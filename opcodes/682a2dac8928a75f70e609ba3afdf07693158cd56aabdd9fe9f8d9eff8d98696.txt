stc
xor
test
cmp
clc
add
jmp
movzbw
not
sbb
lea
movzbw
btc
mov
ror
lea
shr
mov
test
clc
xor
cmp
test
not
neg
clc
test
cmp
add
clc
neg
cmp
add
xor
cmc
cmp
add
jmp
mov
add
xor
lea
movsbw
xchg
mov
cmp
jmp
test
je
mov
cmp
cmp
jne
cmpb
jmp
jmp
jmp
mov
mov
clc
lea
xor
jmp
push
shl
inc
rcl
inc
xor
inc
sub
inc
cmp
pop
jmp
xor
cmp
jmp
mov
jge
daa
push
jp
popf
add
or
je
test
adc
xchg
pop
cs
push
mov
cmc
sbb
sub
push
adc
mov
leave
lcall
and
jge
into
aad
lret
inc
int
stc
adc
lods
outsl
and
fcmove
mov
inc
pop
test
stos
jbe
scas
fucom
clc
adc
enter
cltd
pop
mov
(bad)
cmp
dec
push
pop
jb
inc
insl
jne
jns
adc
jo
adc
sbb
cld
pusha
test
divb
mov
aad
sti
dec
enter
clc
iret
sbb
test
shl
or
insb
les
sbb
stos
sub
lods
cmc
sbb
pusha
mov
xchg
cmpsl
add
jg
movsb
into
or
cmc
(bad)
xchg
mov
fdivrs
mov
mov
jbe
ss
jno
sub
push
sbb
lahf
mov
call
mov
cmpsb
pop
or
jo
mov
in
das
scas
aad
pop
adc
ret
mov
mov
test
jge
aas
enter
clc
jae
or
and
sbb
mov
push
mov
roll
adc
push
sbb
jmp
lods
pop
cmc
jnp
lret
inc
jo
jne
out
jb
ja
int
loope
lret
fadd
aad
call
mov
dec
inc
sbb
rcl
sub
movsl
jmp
xor
lds
std
push
push
(bad)
mov
lds
arpl
movsb
lods
cli
dec
xchg
stos
lea
fisttpl
adc
call
sbb
sbb
insl
out
sub
hlt
js
jo
lea
js
sbb
jg
mov
inc
jno
xchg
aad
or
in
jle
mov
out
test
mov
test
lods
out
add
pop
into
pop
xor
jo
cmp
jmp
xchg
jecxz
mov
rol
les
mov
sub
pop
scas
ret
movsb
inc
cmpsb
pop
xor
sub
xor
or
push
sbb
pop
and
scas
jae
sub
je
xchg
into
jge
add
jp
cmc
repz
arpl
jne
fsts
jnp
in
aaa
pop
test
rclb
push
pushw
xor
jnp
mov
jmp
cmpsl
dec
jge
mov
cmpsl
dec
pop
shl
fmulp
dec
fs
int
pop
ret
stos
mov
rep
push
movsl
data16
mov
(bad)
(bad)
aaa
sar
enterw
iret
push
imul
std
jnp
int1
inc
sub
rcrl
jns
jb
sbb
negb
adc
ficoms
cmp
jecxz
loop
mov
jnp
adcb
mov
jbe
or
jl
inc
js
cvtdq2ps
fwait
cltd
imul
and
leave
jne
or
add
lahf
stos
pushf
subb
jb
into
mov
lds
ret
pop
sub
data16
mov
mov
pop
jp
mov
sub
lret
movsl
sbb
mov
mov
push
sub
scas
int3
mov
(bad)
mov
push
gs
fdiv
subb
(bad)
cmpsl
inc
jl
ret
fucomip
inc
les
(bad)
daa
lret
cmp
rorl
mov
in
imul
sbb
fmul
pop
cmpsb
bound
adc
xorb
mov
mov
jecxz
adc
jle
rolb
stc
inc
jbe
mov
daa
adc
push
adc
or
xlat
imul
loop
shl
inc
or
iret
sbb
enter
shl
mov
into
or
mov
lods
in
data16
xchg
cwtl
aaa
mov
jge
sbb
in
or
sbb
mov
adc
je
fidivs
adc
jno
stos
mov
jg
movzbw
stc
test
mov
sub
test
jmp
mov
sub
add
mov
lea
test
mov
cwtd
sub
rol
mov
xor
clc
ror
test
neg
jmp
inc
jmp
dec
clc
neg
jmp
int1
jno
loope
jg
iret
nop
in
popf
sarl
cmp
mov
movsl
pop
mov
aaa
test
cmc
cmp
in
fadd
jg
dec
scas
fisttpl
push
dec
nop
outsl
ret
enter
or
add
pop
push
jecxz
mov
cmc
ret
iret
xchg
mov
jo
cld
(bad)
fldenv
mov
mov
inc
in
cmp
and
dec
das
inc
movl
js
dec
and
mov
aam
mov
test
mov
scas
pop
xchg
mov
push
jae
fcompl
mov
jg
test
mov
in
and
mov
jg
pop
jae
gs
stos
leave
inc
test
cmp
xchg
(bad)
int
or
fwait
imul
rorb
pop
inc
and
fnstcw
push
add
int1
fdiv
push
dec
cmp
mov
arpl
in
push
mov
popa
inc
daa
ljmp
mov
adc
pop
adc
jns
aam
fistpl
nop
push
ljmp
(bad)
pop
in
push
pop
xchg
jmp
arpl
mov
cmp
orl
jae
popa
push
mov
sub
jae
mov
jo
sub
xchg
shr
jae
and
mov
adc
jns
movb
and
jp
sarl
xchg
mov
cs
loop
dec
mov
add
adc
cmp
mov
push
insb
or
pop
fisttpll
loopne
insl
mov
dec
rcrl
jle
stos
and
add
es
stos
loopne
add
stos
or
repz
int
pop
cmc
andb
leave
xor
cmc
sbb
jg
mov
xchg
fucomip
pop
dec
inc
or
(bad)
psubusw
int3
jae
dec
shl
cltd
add
mov
xor
pop
add
pop
mov
adc
xchg
sbb
(bad)
ja
push
stos
xor
inc
push
cmp
popf
std
inc
add
mov
and
lret
mov
dec
push
lcall
lahf
jmp
dec
int3
hlt
jns
or
jne
xchg
xor
pop
pop
into
in
jge
xchg
xor
testl
adc
cmc
(bad)
dec
inc
popf
cmpsl
(bad)
out
inc
fs
jl
pop
push
xor
add
or
lret
jmp
adc
lret
sbb
inc
push
(bad)
cs
out
adc
or
in
pop
lret
lret
pop
and
ficoms
test
mov
push
mov
sub
sarl
lods
lods
orl
in
push
add
cmp
lods
push
addr16
aam
(bad)
ss
lods
dec
clc
mov
out
mov
push
push
(bad)
and
mov
int
insl
pop
xor
jbe
adc
push
cmp
sahf
pop
mov
mov
sub
loopne
mov
(bad)
push
aas
inc
insl
xchg
(bad)
aaa
mov
lret
adc
clc
shlb
out
fs
leave
xor
fildl
push
les
inc
popa
and
fcoml
pop
cld
sbb
inc
cmp
jl
jg
outsl
cld
mov
sbb
fldcw
dec
add
mov
mov
mov
mov
notb
lods
movsb
jle
xor
frstor
cli
lock
sbb
(bad)
lds
push
xchg
add
insb
fmull
push
xlat
out
sbb
xor
jge
mov
(bad)
in
out
scas
aas
xor
mov
add
jnp
pop
outsl
nop
cmp
les
rcrb
dec
cmc
nop
xor
dec
ja
inc
leave
mov
in
xchg
add
pop
pop
mov
fnstenv
bound
movl
stc
mov
add
adc
std
mov
out
aam
jae
cmp
push
xchg
mov
xor
(bad)
fwait
jne
