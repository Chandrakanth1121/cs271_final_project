subl
push
enter
xor
or
push
jb
inc
cmpsb
adc
mov
fstl
sti
pop
mov
cwtl
int
mov
and
adc
out
add
stos
out
sub
dec
imul
push
fwait
xchg
aam
add
jl
sub
jne
rolb
out
je
lods
or
inc
in
das
out
jg
sahf
call
pop
pusha
adc
dec
or
xchg
outsl
inc
test
xchg
dec
movsl
cmp
(bad)
pop
cmp
jg
xchg
jg
testb
xchg
mov
inc
jle
jl
lea
pop
enter
fstpt
pop
cmp
fmul
adc
lods
adc
and
das
loop
lock
mov
or
imul
xchg
add
mov
mov
dec
fwait
cmp
lods
cmpsl
inc
and
dec
sub
mov
sub
dec
frstor
mov
or
xchg
lods
and
lret
shl
mov
push
ss
and
sub
inc
push
scas
adc
insl
into
js
xchg
cmp
lods
mov
pop
popa
adc
push
jp
out
inc
xor
mov
fadds
ss
mov
divl
xorb
xchg
dec
push
rcrb
imul
pusha
pop
xor
fsub
rolb
lahf
push
add
and
int3
or
sarl
mov
lea
cmp
movsb
jge
sub
mov
cs
jecxz
jnp
popf
fdivrl
xchg
sub
in
int
int3
clc
adcl
leave
fisubrl
pop
repz
mov
sbb
xchg
ljmp
jns
jbe
and
dec
lds
shl
dec
mov
pop
add
sar
mov
lret
pop
or
cmp
push
pusha
scas
cmp
push
mov
aaa
fdivp
mov
inc
pop
lret
adc
outsb
(bad)
dec
xchg
xor
mov
push
inc
pop
imul
xchg
data16
mov
imul
xchg
push
push
cmpsl
into
(bad)
cmp
dec
shll
jp
(bad)
xchg
jnp
adc
dec
mov
lahf
outsl
int3
dec
mov
mov
out
mov
xchg
sbb
test
repnz
insl
and
pushf
rcl
jp
cmp
mov
adc
mov
or
and
cli
sub
pop
cmc
scas
iret
hlt
ret
hlt
mov
arpl
push
nop
scas
xchg
jmp
inc
clc
nop
adc
sub
and
add
cli
sub
mov
jno
dec
cmpsb
cs
mov
test
sbb
or
shll
inc
and
fdivrs
loop
adc
lret
adc
add
mov
adc
mov
insb
inc
call
and
adc
dec
push
dec
pop
test
movsl
adc
dec
lcall
js
jmp
jg
push
je
test
aad
sub
loop
cld
js
popa
dec
jle
mov
push
clc
add
push
adc
adc
cld
inc
je
dec
push
stos
or
push
mov
or
outsb
(bad)
cmpsb
or
and
(bad)
in
pop
jmp
mov
inc
and
jle
(bad)
aas
stos
lret
pushf
push
jg
and
adc
test
jmp
int
insb
dec
lock
add
add
jo
(bad)
out
mov
xchg
inc
into
add
subl
push
push
cmp
pop
inc
push
xor
test
cs
mov
jmp
add
pop
jge
aam
dec
movsl
cli
jecxz
mov
adc
pop
into
outsl
scas
push
sbb
lea
xchg
mov
jo
push
cmp
js
xor
scas
jbe
gs
int1
jle
int1
movsb
pop
push
xchg
jae
movsb
xchg
mov
pusha
lahf
xchg
mov
lods
pop
lret
les
push
shlb
adc
dec
adc
cmp
pop
stc
(bad)
mov
adc
(bad)
jns
push
sub
mov
push
inc
out
jmp
imul
clc
fs
repz
and
jnp
int
in
mov
pop
push
xchg
adc
inc
out
in
adc
sbb
cltd
mov
push
dec
cwtl
mov
pushf
adc
pop
add
sbb
inc
or
cmpsb
iret
pushf
jmp
cs
sub
and
xchg
dec
xchg
lahf
xor
xor
fcom
jge
in
and
or
xchg
leave
cli
les
cltd
or
jg
mov
lret
repnz
mov
jg
(bad)
rcrb
int
or
call
sub
push
push
shll
add
adc
jle
data16
mov
sbb
or
into
pop
in
push
mov
gs
cmp
enter
test
int
mov
inc
into
dec
dec
(bad)
dec
sbb
jl
outsb
adc
movsl
ja
into
pop
inc
adc
int
mov
jl
imul
xchg
mov
adc
mov
aaa
mov
neg
push
adc
call
jp
sub
divb
and
lea
jmp
mov
inc
inc
(bad)
xor
cmp
repnz
push
inc
mov
insb
sbb
jns
pop
push
daa
sub
or
mov
mov
enter
jp
mov
js
cmp
dec
xchg
adc
dec
out
outsl
mov
stos
pop
xchg
xor
cmp
jecxz
mov
cmp
push
leave
bound
inc
arpl
movsb
in
sar
lret
or
xor
notb
nop
dec
lret
mov
imulb
fidivl
dec
or
and
(bad)
inc
xchg
int
mov
cmp
xchg
int1
sub
push
inc
xchg
adc
test
je
dec
movsl
adc
test
pop
xor
dec
ljmpw
dec
rorb
popf
pop
xor
xchg
movsl
mov
js
adc
jae
inc
inc
iret
push
mov
cli
jmp
addr16
and
and
mov
cmp
cmpb
mov
adc
loope
pop
bound
lcall
mov
adcl
call
fcoml
pop
sti
shll
inc
pop
mov
imul
sub
inc
fisttpl
sbb
sub
xchg
sbb
ret
jp
mov
inc
inc
pop
stos
xchg
cmp
pop
add
push
sti
xor
(bad)
mov
sbb
adc
data16
push
nop
and
fisubs
xchg
out
(bad)
or
jmp
fnsave
push
cltd
jmp
jecxz
imul
iret
and
mov
and
les
jg
xchg
movsb
add
rcr
idivl
std
leave
inc
cmp
or
adc
test
xor
mov
ljmp
enter
loopne
sbb
push
sbb
pop
cmpxchg
sub
mull
clc
lahf
add
add
dec
jg
dec
xchg
mov
or
nop
int
push
xchg
daa
xchg
mov
adcl
mov
andl
mov
push
repnz
stos
sahf
test
popf
mov
cmp
fcmovnu
test
mov
dec
loopne
sbbb
std
dec
add
nop
inc
sbb
stos
xchg
jo
aad
push
dec
je
int3
nop
mov
in
cmovle
sub
mov
daa
fdivs
and
jg
dec
out
mov
cmp
and
xor
jo
mov
add
jp
pop
arpl
mov
push
inc
jg
insl
dec
std
add
movsb
orl
cld
jns
push
or
jl
imul
push
mov
es
lcall
sub
sbb
aam
push
repnz
push
(bad)
fsubs
ret
enter
ljmp
in
insl
popf
dec
aaa
and
dec
incl
pop
or
bound
adc
in
in
dec
imul
stos
inc
fisubs
lods
dec
adc
std
(bad)
push
out
notl
xchg
inc
xchg
xor
lret
aaa
pop
ljmp
dec
inc
mov
idivb
pop
incl
xor
mov
mov
push
shll
xchg
mov
loopne
es
subl
dec
inc
hlt
adc
dec
out
jmp
xorb
mov
cmp
mov
dec
push
es
jg
push
adc
or
jmp
xchg
push
mov
adc
dec
cld
pop
cmc
inc
das
cmp
in
aam
nop
gs
adc
repnz
xchg
lahf
lret
inc
cmpsb
pop
mov
xor
jno
cmc
jg
repz
jle
adc
pop
