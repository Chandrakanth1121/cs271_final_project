mov
add
add
add
dec
add
add
add
add
sub
add
add
add
add
or
add
mov
and
add
add
add
inc
jle
add
mov
mov
jmp
and
enter
dec
nop
stos
dec
xchg
xchg
push
gs
inc
mov
pop
or
sbb
push
push
cmp
aad
repz
stos
into
pop
and
fsubl
pop
cmpsb
jnp
adc
push
push
inc
gs
jle
movsb
ret
sbb
pop
xchg
cmp
inc
int1
pop
cli
pop
stos
lods
jecxz
xchg
dec
xor
push
and
imulb
add
in
cld
dec
sub
xlat
lds
mov
dec
fidivrs
push
cwtl
inc
inc
loope
das
jne
ret
dec
lock
sar
(bad)
imul
xchg
adc
push
pop
ficoml
je
rcrl
imul
mov
mov
mov
hlt
pop
imul
dec
mov
mov
leavew
into
cmp
sbb
and
xor
push
jg
bound
mov
scas
test
or
xchg
stc
dec
push
sbb
jnp
mov
jae
and
pop
(bad)
push
jecxz
stos
sub
sub
mov
ret
lds
xchg
or
xor
push
add
sbbb
sub
pop
repnz
int
add
bound
shll
push
popf
xor
push
mov
add
sub
or
stos
inc
jno
push
pop
outsb
adc
and
cmp
fucom
mov
mov
les
jno
aam
add
adc
and
mov
inc
int3
mov
sahf
ja
call
mov
out
out
fstpt
or
inc
psubsw
leave
clc
add
add
addb
xor
jo
push
pop
jb
insb
push
(bad)
sti
std
test
push
(bad)
aad
cmp
psubusw
cmpsb
and
push
rcrl
or
or
out
xchg
out
xchg
shlb
lds
fsubl
mov
pop
adc
push
sbb
mov
in
and
inc
cmp
pop
sbb
push
mov
lods
repnz
mov
adc
sbb
scas
cltd
fnstsw
mov
jb
mov
inc
sti
jle
pop
inc
sub
and
fmul
in
cld
push
mov
arpl
inc
adc
adc
test
jge
mov
xor
scas
sub
dec
sbb
xchg
or
mov
insb
sub
cltd
test
jmp
mov
test
aas
sbb
xor
movl
aam
ss
cmc
or
movsl
mov
fisubrl
popf
in
js
or
push
inc
bound
ret
mov
pop
cs
scas
cmc
sbbb
lahf
rclb
test
iret
lods
cltd
cmp
sbb
adc
jnp
es
int
sbb
outsb
lcall
adcl
jle
mov
call
fnstcw
lahf
or
ljmp
scas
xor
and
sub
data16
lret
nop
shlb
xor
dec
int1
in
(bad)
inc
int
push
jg
imulb
pop
dec
(bad)
lea
mov
inc
stos
dec
push
int3
xchg
add
in
mov
sahf
push
sbb
mov
inc
pop
ljmp
xchg
or
sti
addr16
push
xchg
adc
jmp
xlat
popa
mov
clc
adc
pop
adc
jmp
daa
out
into
popa
leave
xor
loope
mov
jp
fistps
bnd
push
adc
jns
(bad)
aaa
mov
push
std
stos
pop
pop
cmp
fildl
lret
ds
mov
ret
jb
loop
or
cmp
mov
or
add
or
fimuls
mov
pushf
fcoms
nop
fs
test
xor
je
mov
jge
iret
or
enter
mov
pop
mov
mov
out
xchg
xchg
call
hlt
jbe
int
mov
xchg
sbb
loop
mov
lahf
jbe
popa
xchg
iret
mov
push
in
adc
sarl
aad
insb
mov
mov
loop
iret
push
or
xor
movsl
cmp
repz
sti
jl
cmp
xor
inc
inc
(bad)
fsubrp
lret
push
jnp
xor
dec
xchg
or
ret
dec
or
mov
mov
pop
mov
and
xchg
push
aam
pop
int3
pop
gs
insb
jo
push
std
in
mov
push
cmpsl
lea
add
pop
add
shrb
(bad)
add
scas
mov
imul
adc
addr16
xchg
repnz
into
lock
jae
lods
je
out
xor
call
inc
int1
sbb
sub
mov
bound
stos
sbb
dec
(bad)
sarb
lcall
hlt
pop
(bad)
xor
sub
pusha
push
jg
sbb
jp
xchg
leave
pushf
out
mov
sub
mov
jmp
cmp
push
cltd
popa
pop
sub
mov
imul
movsl
push
test
rcrb
nopl
pop
jle
negl
mov
mov
jb
xchg
dec
shr
mov
jp
cmp
jb
rcrb
test
(bad)
arpl
clc
jl
cltd
out
ja
lea
idivb
or
(bad)
imul
outsl
outsl
push
xchg
(bad)
pusha
xor
add
add
test
push
sub
sbb
(bad)
(bad)
bound
stos
stos
lcall
lret
addb
cli
jge
adc
mov
pop
leave
mov
or
lock
inc
lods
lods
addr16
aam
pop
mov
scas
mov
push
movsb
movsb
xchg
in
jb
fwait
rol
jne
mov
loope
std
scas
cmp
es
insb
ss
jle
aas
add
div
dec
or
pop
push
movsl
movsl
xor
in
or
int1
int1
xchg
loop
jno
stos
fcomp
push
bound
xor
sub
add
xchg
mov
pop
popf
ret
ret
sub
sbb
mov
or
lcall
adc
fwait
sbb
loop
int
jmp
dec
daa
daa
int
mov
lahf
ljmp
sahf
sbb
sub
cs
sbb
fsubrl
out
mov
pop
sti
pop
mov
push
dec
jbe
cmp
(bad)
(bad)
into
jge
mov
push
sub
ds
jecxz
pop
das
das
xchg
adc
push
add
add
in
in
pusha
inc
and
pop
jecxz
cld
enter
in
mov
pop
mov
lea
lret
lret
fldenv
mov
ficoms
dec
call
test
iret
imul
out
in
stos
stos
push
in
sti
sti
lds
dec
dec
push
xor
xchg
adc
inc
adc
stc
stc
push
add
add
mov
cmp
mov
dec
test
repz
mov
inc
mov
xchg
xchg
mov
jo
cmp
cmc
cmc
fbld
mov
jne
fcmovu
arpl
and
and
adc
in
decl
std
repz
mov
int
adc
or
xor
ret
in
in
loope
pop
pop
mov
mov
cs
pop
push
xchg
(bad)
(bad)
repnz
cmpsl
cmpsl
cmp
jle
jp
cmp
out
pop
pop
sub
sbb
xchg
out
jae
shlb
sbb
dec
jg
(bad)
inc
and
jle
sub
stos
cmp
mov
mov
sub
out
out
shrl
mov
jns
(bad)
loop
pop
pop
sbb
lods
fcmovnu
cmp
loopne
push
xor
dec
je
cmp
adc
or
xchg
dec
dec
or
push
insb
dec
and
in
pop
pop
pop
lahf
ret
mov
lods
lods
cmpsb
les
test
xchg
xchg
movsb
xor
in
bnd
xor
out
inc
mov
enter
aaa
mov
insl
insl
mov
lea
rcrb
test
cli
lods
push
push
pop
repz
hlt
and
lret
mov
jp
jmp
adc
or
outsl
mov
js
dec
and
cs
sbb
int1
push
cmpsb
cmpsb
(bad)
jae
mov
xchg
mov
lret
call
fstpl
pop
pop
fstl
mov
mov
loopne
jo
jl
les
mov
int3
data16
add
add
div
adc
push
mov
push
xor
shrb
mov
pop
cltd
rol
cmp
sahf
