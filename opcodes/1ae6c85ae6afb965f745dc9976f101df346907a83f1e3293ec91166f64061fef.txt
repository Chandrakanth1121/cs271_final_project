mov
jae
stos
pop
mov
std
push
dec
testl
inc
pop
mov
push
test
pop
mov
aad
mov
jnp
lahf
xchg
or
push
or
pop
or
(bad)
mov
fcomps
test
fiaddl
inc
dec
call
jmp
pop
(bad)
imul
out
mov
mov
aas
pop
imul
fsts
jl
push
stos
arpl
xchg
xor
or
jecxz
out
scas
jnp
fidivs
sbb
mov
or
jbe
lock
outsb
nop
mov
(bad)
insl
pop
mov
in
sub
push
das
in
fistpl
push
rclb
aam
push
push
aas
lods
lods
int3
ss
pop
jg
pop
or
push
xor
fdivrs
xor
outsl
enter
iret
test
xchg
stos
cmp
inc
pop
or
xor
inc
push
mov
push
in
cld
fisttpll
mov
and
arpl
loopne
xchg
jo
xchg
sahf
mov
lods
sub
int
mov
lds
dec
inc
mov
push
xor
xchg
push
out
sbbb
into
jb
loope
jecxz
insl
out
movsb
xchg
lret
xchg
xlat
dec
add
and
dec
arpl
add
mov
iret
xchg
insl
repz
pop
xchg
stos
lock
push
xchg
or
(bad)
enter
cmp
or
and
xor
inc
bswap
data16
adc
ljmp
ja
les
jg
dec
js
xor
mov
mov
dec
xrelease
in
mov
cmp
in
mov
stos
mov
sti
pop
inc
arpl
testb
sub
cli
sub
int1
repnz
adc
mov
leave
sahf
xor
stos
pop
or
push
imul
dec
or
jl
movsl
sub
cmpsl
mov
pop
xchg
rcll
fstpl
fsubrl
mov
mov
shr
int3
je
mov
pusha
xchg
movsb
xchg
mov
scas
mov
pop
stos
fcmovne
fwait
sbb
cli
jbe
aad
arpl
in
xchg
in
fisubs
mov
or
test
out
mov
ret
lods
inc
push
dec
out
fistpll
adc
mov
push
mov
xchg
mov
xchg
popa
test
jb
and
push
cs
cmp
sbb
xor
std
lcall
mov
mov
dec
ficoml
imul
popf
sbb
ficompl
adc
sahf
pop
mov
inc
aam
sub
jle
in
pop
test
mov
daa
hlt
xchg
lock
stos
cs
add
pusha
out
call
repnz
mov
stos
(bad)
fcoml
add
push
xor
rorb
imul
test
sbb
add
push
bound
sbb
and
aaa
or
pop
shlb
mov
pop
fsubr
(bad)
jp
inc
cmc
jecxz
je
or
sarl
sub
insb
lods
aas
pop
pop
lock
jnp
fwait
or
loopne
mov
or
mov
cmc
xor
pop
out
dec
ss
test
test
hlt
andl
xchg
(bad)
imul
mov
mov
mov
fwait
mov
stos
lods
bound
xor
jmp
cmp
inc
pop
iret
inc
insb
(bad)
jnp
xchg
fs
cmp
cmp
jmp
clc
sbb
dec
or
enter
push
dec
sbb
fcoml
popa
or
rolb
fsubrl
xchg
rorb
inc
cmp
cmp
jmp
dec
add
push
test
enter
sbbb
aam
cmp
nop
mov
pop
rcl
and
jp
movups
jns
clc
dec
mov
movzbl
in
pop
sbb
adc
inc
jb
jne
fucomip
nop
mov
mov
mov
dec
divb
sub
aaa
int1
ja
cmc
scas
xchg
mov
shrl
or
(bad)
(bad)
sub
lock
mov
in
push
cmp
xorl
cld
mov
insl
popa
stos
es
push
cmp
inc
sahf
daa
les
jo
sti
jl
out
and
mov
dec
lock
fs
cmp
cltd
outsl
jge
inc
and
int3
adc
pop
and
negl
hlt
out
push
enter
fisttpl
adc
xchg
std
xor
dec
dec
cmp
fisttps
jp
pusha
mov
scas
adc
fs
cmp
enter
bound
push
sti
or
lret
loop
xchg
lock
outsl
lods
cld
sbb
lock
dec
lods
xchg
push
xor
in
(bad)
pushf
push
lret
test
movsb
(bad)
dec
lock
or
xchg
clc
jno
faddl
hlt
bound
insb
xchg
xor
xchg
inc
repnz
out
jno
scas
bswap
push
les
aas
dec
mov
pop
xchg
lret
dec
clc
aas
add
imul
xchg
insb
lock
xchg
mov
shlb
push
dec
lods
cmp
inc
xor
pusha
push
fimuls
xchg
das
movsb
push
movsb
mov
bound
imul
xchg
pop
or
aas
and
movsb
nop
dec
shrl
push
mov
push
imul
jg
addr16
lds
iret
push
xchg
es
das
arpl
addr16
mov
jb
pop
ljmp
push
inc
scas
pop
dec
clc
mov
ret
adc
pop
outsl
mov
mov
or
mov
mov
cmpsl
adc
or
mov
rol
or
jge
shrb
stos
xchg
hlt
pusha
push
dec
pop
jp
xchg
lods
push
push
fldenv
movsl
in
repnz
outsb
sub
dec
mov
xchg
mov
pop
mov
sti
bound
jmp
mov
mov
int1
mov
mov
push
xchg
aas
and
or
cwtl
rorb
fildl
jnp
iret
in
rol
cmp
sub
loope
mov
and
out
and
dec
aaa
sbb
rcrl
cmp
cmpsl
lods
or
push
int1
push
and
movsb
ss
(bad)
in
lock
lahf
and
in
lret
inc
imul
ret
popf
inc
dec
jo
jb
sbb
jecxz
dec
pop
daa
loopne
jl
mov
int1
or
push
push
shl
mov
cltd
mov
inc
dec
lock
out
fs
iret
sub
lcall
stos
stos
outsb
sahf
sahf
dec
test
push
cmpsl
ret
(bad)
mov
ret
cli
and
xchg
lea
adc
add
orb
call
mov
inc
es
outsb
cmp
jne
loop
lret
sarb
pop
mov
jge
enter
popf
push
jmp
pop
iret
xor
scas
dec
or
pushf
push
scas
pop
cmp
mov
insb
cmp
(bad)
call
mov
ljmp
adc
mov
inc
decl
repnz
(bad)
mov
adc
mov
rclb
daa
sub
movsl
adc
(bad)
in
jp
mov
(bad)
sbb
out
(bad)
and
enter
add
arpl
cmpsl
mov
sti
jle
mov
ficoms
adcb
inc
mov
jnp
fcmovbe
inc
mov
out
sti
add
adc
sub
aam
lds
jno
mov
pop
lahf
aam
loopne
shll
sti
shlb
mov
pop
mov
cwtl
in
sarb
or
ss
stos
sarb
popa
aas
pop
jns
jl
incl
and
movsb
cmc
dec
add
inc
xor
cmp
jns
xchg
push
out
cmp
(bad)
xor
xchg
xchg
jmp
jo
or
psubd
mov
repz
into
test
daa
popf
adc
les
jns
add
sub
mov
mov
pop
xchg
sti
mov
bound
fnsave
push
out
outsb
xor
outsl
adc
es
mov
or
and
js
pop
nop
int1
lret
(bad)
dec
mov
jbe
push
stos
mov
and
or
insl
stos
arpl
lret
jo
aam
xchg
lods
sbb
add
mov
pop
jne
insl
dec
xor
cli
xchg
or
add
sarb
fwait
xchg
mov
dec
pushf
pushf
flds
aaa
jmp
pop
dec
jbe
fsubl
or
push
clc
lret
pop
mov
xchg
dec
fstps
pushf
mov
(bad)
frstor
add
int1
mov
push
add
out
scas
adc
in
stos
outsl
