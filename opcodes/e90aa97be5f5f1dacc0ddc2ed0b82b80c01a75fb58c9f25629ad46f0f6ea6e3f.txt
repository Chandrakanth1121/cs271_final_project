imul
inc
push
push
mov
mov
xchg
add
cmpsb
imul
add
mov
dec
pop
js
popw
je
lcall
enter
fwait
cmpsb
in
add
add
sbb
imul
imul
out
hlt
or
add
push
pusha
imul
add
push
data16
lcall
ret
cmpsb
jae
imul
or
inc
add
cmpsb
imul
cmpsb
imul
fiaddl
add
add
add
fwait
out
mov
add
mov
inc
add
add
sti
out
mov
or
pop
push
outsb
inc
add
out
mov
pop
push
pop
aas
jo
add
sar
or
add
add
or
fstpt
add
push
inc
push
add
aas
add
std
popa
lahf
add
cld
jbe
add
add
mov
inc
add
add
or
push
jp
add
add
lcall
inc
add
jge
add
pop
add
mov
pop
jge
mov
mov
push
pop
or
jl
(bad)
lea
sti
int
pop
rcrl
popa
incl
add
sub
push
mov
inc
add
arpl
int3
std
xor
inc
add
add
shll
xor
sbb
inc
out
rclb
roll
adc
out
(bad)
out
ret
inc
add
add
add
add
dec
sarl
adc
or
add
data16
fbstp
xor
or
inc
add
insl
movb
mov
shll
repnz
fadds
pop
(bad)
mov
xchg
mov
push
adc
jmp
mov
hlt
mov
lods
mov
add
sbb
mov
pop
add
xor
sbb
sbb
dec
add
add
jo
xor
pop
sbb
sbb
sbb
je
xor
sub
sbb
sbb
cmp
cmp
sbb
sbb
sbb
int3
add
add
sbb
sbb
and
sbb
sbb
add
or
sbb
sbb
sbb
sbb
and
sbb
sbb
push
sbb
sbb
sbb
sbb
loopne
inc
les
sbb
sbb
sbbb
sbb
sbb
rclb
mov
add
push
mov
add
add
push
cmp
add
sub
scas
std
mov
test
add
add
jbe
divl
inc
gs
add
and
or
sbb
in
rcrb
jo
sub
sbb
pop
jl
add
sbb
roll
add
sbb
sbb
inc
add
or
adc
pop
or
(bad)
push
ljmp
jmp
imul
je
push
add
jb
popa
jae
outsl
jb
xchg
pop
out
push
inc
xor
adc
jle
mov
nop
out
or
add
loop
cmp
addr16
push
cmp
adc
out
jmp
cmp
js
jge
pop
add
add
(bad)
jmp
je
add
popa
outsb
outsl
add
xor
(bad)
mov
xchg
arpl
addr16
jmp
or
sub
add
sahf
mov
and
add
and
idivl
mov
push
(bad)
movups
popf
fstpt
add
add
(bad)
in
xadd
jmp
negl
add
add
jo
cld
or
or
sti
fstpl
stos
add
xchg
rorl
sbb
add
lsl
cmpsb
imul
jmp
add
sbb
push
mov
data16
sbb
push
sarb
insb
and
(bad)
jns
add
push
jo
cmp
pop
js
inc
push
enter
pusha
pop
cmp
bound
pop
enter
imul
popa
insl
inc
jns
xadd
or
jo
xchg
outsl
loopne
add
add
push
adc
pusha
das
or
out
add
js
inc
cmp
addps
outsl
mov
imul
mov
(bad)
cltd
test
jne
dec
test
inc
fs
stc
mov
or
jge
ret
sahf
and
mov
mov
sahf
dec
scas
jnp
adc
add
clc
xchg
fwait
int3
cltd
mov
adc
pop
jae
adcb
mov
jle
sbb
stos
adc
test
jle
jne
sbb
add
add
out
or
js
test
nop
scas
fistpl
push
add
imul
popa
bound
add
jg
inc
insb
imul
popa
outsb
push
sub
(bad)
cld
cli
mov
or
sub
jno
inc
pusha
lret
lret
scas
inc
mov
ror
jl
leave
(bad)
call
lods
lahf
inc
roll
xchg
loop
adc
and
ja
push
inc
insb
sti
insb
and
ljmp
add
(bad)
(bad)
jmp
inc
cmp
outsb
outsl
ja
pop
jae
jae
gs
xor
pop
insl
jae
bound
ss
negl
insb
insb
pop
dec
push
inc
push
push
dec
cmp
fstpl
xor
push
pop
add
cmovs
das
or
push
sbb
bound
fstp
jmp
je
outsb
add
inc
ja
insb
gs
add
jno
imul
add
dec
outsb
data16
imul
addr16
je
jae
(bad)
push
jo
gs
imul
add
inc
jb
imul
jae
bound
out
mov
addr16
jb
add
gs
outsb
jne
outsl
inc
cmp
jb
out
call
inc
bound
imul
jl
push
add
loope
pop
jmp
dec
mov
add
add
pop
mov
add
sbb
or
inc
or
add
inc
dec
inc
inc
inc
fdivrp
fisttpll
adc
inc
gs
jb
jbe
push
jb
xor
out
lret
push
je
hlt
inc
sbb
push
ret
pusha
ja
test
add
pop
mov
je
push
ds
add
loopne
out
loopne
call
jmp
xor
(bad)
sarb
push
imul
jae
insl
pushf
sbb
outsb
je
mov
inc
cs
add
movl
aas
in
call
rorb
gs
gs
xor
mov
lds
add
insb
inc
mov
gs
outsl
jge
mov
cmp
sbb
stos
insb
cmpb
mov
ja
das
mov
pop
gs
dec
enter
js
and
mov
clc
out
sbb
inc
and
add
jb
je
sarl
jae
push
xchg
lods
dec
xor
mov
mov
or
xlat
and
addr16
dec
nop
dec
outsb
je
mov
aaa
fdivr
inc
nop
cmp
cwtl
sbbl
incl
je
popa
insb
inc
insb
insb
outsl
arpl
add
inc
ret
daa
pushf
cmp
add
movsb
or
jmp
iret
sarb
cmovb
jo
sbb
idivl
nop
mov
mov
or
push
xor
xor
lea
dec
gs
jo
outsb
inc
outsb
jne
into
xchg
mov
mov
inc
add
pop
pop
jbe
popa
clc
jae
testl
add
add
or
add
nop
xlat
cmp
and
xchg
or
xor
or
adc
sbb
xlat
je
aaa
and
add
mov
lods
cmp
mov
sub
inc
fiadds
pop
sub
dec
pusha
sbb
cmp
sbb
cmp
jbe
add
xor
jae
push
add
pop
fdivrs
cmp
cmp
and
or
out
hlt
pop
clc
adc
cld
or
mov
add
pusha
pop
add
pop
xlat
je
fs
push
or
jl
mov
ja
adc
add
add
test
pop
xlat
jne
add
sub
or
mov
jnp
shll
jb
neg
cwtl
add
add
push
add
rorl
jne
inc
add
inc
add
or
pop
xor
xor
aaa
sbb
pop
cmp
inc
iret
pop
xlat
lea
inc
or
xor
adc
mov
inc
and
(bad)
xor
add
add
lret
xor
inc
adc
iret
dec
xor
inc
adc
sti
pop
ja
iret
daa
inc
cmove
sub
xor
mov
inc
add
(bad)
xor
xor
fidivrs
mov
add
add
pop
in
inc
pop
dec
arpl
jnp
gs
aaa
add
dec
sti
fidivrs
addl
cmpl
mov
(bad)
and
inc
or
add
mov
fisttps
cmovg
xor
neg
jnp
add
cmp
xor
