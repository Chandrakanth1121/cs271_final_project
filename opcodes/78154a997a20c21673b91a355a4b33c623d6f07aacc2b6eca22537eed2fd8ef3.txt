mov
mov
xor
test
jge
push
loopne
jo
sarb
rep
mov
out
add
adc
test
out
flds
push
xchg
test
mov
jbe
adc
in
outsb
mov
sbb
mov
and
pop
jae
add
enter
cmpsl
out
push
in
dec
pop
mov
ret
add
loope
nop
push
stos
stos
mov
sbb
xor
mov
add
mov
cmp
add
and
jmp
int3
dec
outsl
push
adc
int
dec
subl
jg
pop
es
sub
xlat
fsubrs
adc
jp
jg
xor
in
sub
ret
(bad)
sbb
movsl
cmp
jo
out
jl
push
mov
cmp
inc
sub
sbb
mov
call
jno
fmull
push
lock
pushf
push
fnstcw
pop
addr16
cmp
(bad)
roll
ret
fwait
cwtl
dec
dec
loopne
int
outsl
adc
jg
push
jbe
dec
pop
add
sub
sbbb
add
aam
mov
stos
mov
insl
jecxz
mov
lods
call
in
fidivrs
filds
femms
pop
adc
jle
arpl
insb
xchg
xchg
or
jge
or
mov
and
sahf
mov
cmovle
mov
fdivr
jmp
mov
sbb
mov
(bad)
hlt
and
ds
and
sti
test
add
inc
jp
cli
jbe
cmp
mov
xor
xor
std
cmpsl
sbb
mov
push
into
lds
jle
ja
stos
push
fwait
shll
cmpsl
or
or
xor
in
loop
arpl
ret
cmp
jno
sub
cmp
pop
ret
outsb
add
popa
test
xchg
in
lahf
xorl
ret
fnstcw
mov
push
jbe
jg
rclb
xchg
and
jg
or
xchg
xchg
or
inc
add
jge
xor
mov
rcrb
(bad)
lahf
stc
adc
add
ror
arpl
jo
mov
cmp
mov
movsb
fsubp
and
mov
leave
ret
inc
cwtl
addb
dec
cmpsb
jg
lea
loop
js
repnz
inc
mov
lret
sub
ret
mov
and
sbb
xor
fdivrs
sub
popa
inc
and
inc
push
test
in
hlt
inc
lcall
inc
xor
outsb
rolb
shrl
jns
sub
pop
inc
in
and
repnz
xchg
fisttpl
adc
mov
mov
mov
inc
pop
(bad)
insl
and
xor
addr16
push
inc
or
inc
mov
lret
pop
jns
dec
xor
mov
pop
outsl
fisubrs
and
popf
pusha
sbbb
mov
ffree
and
mov
cmp
pusha
daa
cld
idivl
jbe
insb
mov
pop
cmp
addb
aaa
pop
jle
popa
arpl
xchg
loope
jbe
movsb
mov
js
ret
xor
das
outsb
jne
aaa
xor
out
out
adc
sub
data16
mov
dec
in
adc
cli
xchg
or
and
xchg
and
sbb
ja
clc
mov
gs
cltd
xchg
idivb
mov
mov
cmp
cmp
in
imul
mov
pop
or
stc
xor
in
lock
sub
jne
test
lea
hlt
imul
test
gs
push
lods
std
into
(bad)
push
xor
xor
xchg
stc
xor
decl
scas
dec
fsubr
decb
fldenv
lret
push
mov
movsb
fnstcw
inc
into
sti
(bad)
mov
push
adc
repnz
fdivs
gs
adc
or
in
out
xor
jns
in
jno
(bad)
clc
movsl
inc
nop
addr16
xchg
push
xchg
inc
mov
sahf
fidivrs
mov
inc
aam
pop
dec
mov
dec
adc
mov
lret
sub
pusha
std
mov
subl
xchg
push
setne
xor
cwtl
andl
inc
fs
jmp
inc
mov
(bad)
xor
push
mov
sbb
in
cmp
mov
xchg
out
imul
imul
aaa
xchg
in
daa
cmpl
cmp
adc
ja
sub
aas
mov
cmp
xchg
inc
cltd
and
and
push
xchg
insl
xor
jmp
or
mov
cmp
push
pop
insl
cmp
outsl
gs
add
inc
mov
das
inc
sahf
loop
pop
ss
repz
ds
jne
inc
int
push
mov
int3
jnp
mov
ds
js
lods
jb
xchg
ja
movsb
xchg
std
cmp
and
out
sbb
jbe
push
lcall
(bad)
mov
insb
and
add
aas
aaa
push
jne
sbb
sub
xor
ss
movsl
mov
jecxz
test
int1
mov
inc
sub
dec
cld
fwait
sahf
ss
pop
jl
ja
fwait
xor
clc
inc
add
mov
adc
bnd
push
pop
and
int1
not
rcrl
imul
fstpt
shlb
insl
sub
stos
fs
sub
xor
sbb
test
addb
aas
mov
fnstcw
aas
fisubs
xchg
jp
les
xchg
(bad)
jno
std
lret
in
mov
mov
dec
faddp
jg
pmaxsw
addb
push
or
inc
mov
dec
or
jbe
or
out
cmp
push
push
push
cmp
xchg
pop
push
movb
dec
mov
jo
incl
repz
dec
test
push
or
add
mov
movsl
jae
mov
add
lods
stos
dec
mov
xor
dec
in
or
sub
filds
addl
aas
fs
or
in
repnz
es
outsb
cltd
inc
lret
cmp
pop
adc
movsl
adc
clc
out
jp
leave
pop
inc
sbb
daa
mov
xor
(bad)
mov
data16
fcomps
aam
(bad)
mov
inc
in
stc
add
xchg
popa
add
mov
and
dec
sbb
push
sub
insb
ret
fidivs
push
pop
jg
push
lret
or
mov
jmp
cltd
movb
or
pop
mov
hlt
les
sub
js
push
(bad)
xor
shrl
pushf
jle
lahf
mov
or
inc
inc
js
xchg
push
dec
test
mov
js
insl
mov
outsl
sub
xchg
xor
adc
add
out
ret
lea
enter
test
push
sbb
bnd
popa
jae
cmp
dec
pusha
xchg
ljmp
loop
lock
inc
cmp
lret
push
shl
aam
cs
lcall
outsb
mov
dec
push
mov
leave
cwtl
jo
adc
jl
frstor
mov
jmp
dec
jecxz
mov
out
das
mov
or
popf
out
nop
inc
lock
lret
push
mov
(bad)
loop
mov
fcmovnu
add
cld
aaa
mov
mov
daa
loop
push
nop
push
les
add
mov
int1
jl
inc
push
fildll
xchg
push
in
push
jo
cltd
insl
addr16
xor
xor
or
fs
xchg
dec
cmp
or
imul
je
out
adc
test
mov
mov
ret
inc
mov
xchg
dec
ret
sbb
stc
sahf
dec
mov
test
push
aas
lock
cs
rorl
les
ja
xorb
add
dec
mov
cmp
dec
repnz
sbb
and
mov
mov
mov
aaa
and
into
in
adc
dec
aas
aas
ret
movsl
js
movsb
pop
or
clc
ja
popf
jmp
mov
ss
and
stos
mov
hlt
and
in
clc
push
xchg
arpl
popf
out
inc
cmp
pop
xor
lahf
xor
int1
loope
movsb
cmp
jle
dec
add
cs
aas
xor
enter
cld
mov
xchg
xor
mov
pop
xor
inc
xchg
sub
fwait
aam
sbb
xchg
aas
sbb
pop
push
fdivrs
lahf
xor
test
mov
fists
xchg
out
int1
insl
xchg
sbb
cmp
push
arpl
and
mov
imul
sub
sub
pushw
or
push
dec
pushf
repnz
push
cli
pop
aam
or
fildl
mov
mov
push
dec
pop
mov
pop
aad
