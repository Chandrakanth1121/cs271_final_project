fldenv
adc
repz
adc
sbb
add
mov
shll
mov
clc
adc
xchg
es
sbb
adc
stc
fsubrs
dec
jmp
sbb
cld
jp
stos
nop
jmp
das
dec
push
insl
pop
fs
mov
call
lods
mov
jg
pop
aas
sub
repnz
or
or
insl
daa
fdivrl
mov
mov
int1
xor
sbb
mov
test
andl
push
sub
test
not
xchg
jecxz
mov
mov
mov
popa
in
adc
inc
inc
aas
in
gs
aad
mov
fldcw
mov
push
imull
sahf
jg
in
or
ja
xchg
pop
add
xor
xchg
inc
mov
jmp
std
insb
pminub
sub
add
jno
hlt
sbb
bound
aam
rcl
les
sub
ret
or
lret
jg
js
push
xor
(bad)
adc
ljmp
add
add
jl
xchg
lds
decb
enter
adc
lds
leave
jge
mov
pop
xorl
xchg
sub
xchg
jmp
jmp
cmp
mov
jp
sub
sub
mov
pop
(bad)
jbe
ret
cmc
xchg
and
daa
mov
movsl
add
test
scas
(bad)
and
cmpsb
sub
jle
mov
popa
shl
(bad)
jp
push
sbb
dec
ret
jmp
jmp
insb
jae
mov
rcll
loopne
(bad)
xor
mov
outsb
enter
pop
jecxz
call
sub
(bad)
mov
mov
fldt
cld
lds
cmp
adc
dec
inc
fists
add
inc
mov
mov
add
scas
cmp
jno
cltd
out
imul
lret
or
push
(bad)
roll
xchg
cmp
dec
incl
push
outsl
cmp
push
scas
into
(bad)
cli
or
bswap
xchg
pop
add
pusha
in
fisttpll
xchg
pop
clc
ljmp
cmove
sub
inc
pop
adc
sbb
lret
pop
mov
xor
in
push
cld
(bad)
clc
inc
imul
add
and
mov
xor
jecxz
imulb
mov
fs
out
lahf
aad
cmpsl
adc
imul
push
std
repnz
mov
fucompp
cmp
bound
lock
add
cmp
mov
ret
jmp
out
pop
out
adc
jge
sub
or
aad
cmp
sub
push
mov
faddl
rorl
stos
bound
testb
mov
mov
ret
push
dec
cmp
aas
adc
movsb
sbb
cmp
jg
inc
xorl
int
pop
mov
sub
push
jge
sar
push
xor
push
je
xchg
mov
mov
ret
dec
aas
outsb
pop
cmpsl
ja
mov
dec
mov
int
popa
aas
sub
mov
mov
(bad)
out
mov
fldt
out
sarl
lret
cmp
ret
inc
test
jne
stos
and
out
mov
jle
jnp
xchg
movsb
arpl
out
cmp
jl
add
dec
ret
leave
adc
cmp
jno
and
js
out
sbb
movsl
nop
mov
int1
fsubs
into
lods
jmp
sbb
in
(bad)
cltd
les
dec
or
inc
inc
xchg
mull
imul
aam
insb
out
iret
sbb
movsb
mov
mov
inc
mov
and
mov
push
test
cmp
adc
pop
or
pop
shlb
xor
cmpl
mov
adc
add
iret
adc
cmpsl
push
sbb
fmull
dec
fs
aad
in
jae
sub
incl
stos
and
add
mov
and
outsb
sub
jmp
int
xchg
lret
daa
fsubrl
push
aas
loopne
je
stos
mov
mov
jns
jge
mov
(bad)
lea
int
jno
dec
cmp
mov
(bad)
faddp
mov
and
popf
lea
inc
sub
adc
imul
inc
jp
jecxz
jmp
and
je
cld
inc
cmp
mov
xchg
dec
jbe
jnp
add
push
sub
push
xor
fwait
pop
xor
nop
and
leave
jnp
in
dec
into
cli
sub
int3
lcall
dec
sbb
shrb
jge
pushf
xlat
ljmp
bound
roll
cmp
xchg
int
adc
call
jge
mov
sahf
aaa
jl
xor
xacquire
inc
fldcw
cmp
or
mov
mov
jecxz
fidivrl
jno
push
adc
stos
xor
stc
and
xlat
ljmp
arpl
xlat
mov
jge
lret
push
(bad)
scas
int3
(bad)
mov
xchg
pushf
fidivrs
outsl
jg
aas
int3
cmp
(bad)
(bad)
mov
js
mov
nop
mov
sub
out
push
sub
stos
js
fwait
cmpsl
xor
lea
ljmp
jb
pop
sbb
ss
jle
std
mov
add
mov
mov
push
add
(bad)
push
mov
enter
cmp
filds
jmp
inc
mov
(bad)
fildll
test
dec
dec
and
sub
add
cmp
stos
popf
cli
sahf
stos
aas
cld
stos
je
(bad)
shrb
fs
cmp
push
and
aas
xchg
gs
adc
std
lods
xor
inc
mov
adc
fwait
sahf
int3
sbb
outsb
fmul
jg
mov
cld
xor
fisttpll
(bad)
movsl
cmp
jecxz
add
es
jno
(bad)
in
ds
fdivs
hlt
std
cmpsl
dec
xchg
or
sub
sub
mov
adc
jo
insb
sarl
jnp
shrb
imul
sub
sti
mov
cmp
push
adc
xchg
(bad)
sub
cmp
jae
xchg
lock
in
je
imul
push
xor
leave
nop
fmuls
mov
into
or
test
in
jmp
cld
cwtl
lods
dec
jnp
mov
push
in
out
les
mov
inc
enter
cmp
jecxz
xchg
xchg
mov
cltd
lret
mov
and
(bad)
cltd
sbb
out
into
and
mov
ret
sub
repnz
mov
and
aam
hlt
mov
loop
mov
mov
out
ja
add
repz
xsha256
cmpsb
push
xor
add
orl
call
pop
ljmp
jmp
mov
and
into
cmp
adc
xchg
xchg
pop
xchg
fidivs
jne
pop
loopne
and
and
mov
mov
sarl
scas
int3
(bad)
sub
out
pop
test
aad
cli
xor
test
outsl
adc
push
mov
adc
sahf
decb
jnp
outsb
jmp
or
enter
fistps
repz
or
mov
scas
cs
fidivl
int1
cli
lds
jp
jnp
popf
call
cmpsb
lds
mov
and
add
divl
jg
and
pop
aad
lahf
ljmp
xchg
xor
test
(bad)
stos
sub
test
mov
lret
dec
jle
or
in
aaa
in
loope
mov
stc
lcall
ficoms
pop
stos
dec
shr
in
fnstcw
test
push
sbb
pusha
inc
mulb
mov
add
adc
pop
push
push
lret
fdivrp
out
aam
pusha
out
dec
aas
fimull
lret
xlat
fwait
shrl
in
stos
imul
test
loope
and
and
or
mov
cmp
cmp
adc
mov
fnstenv
pop
insb
push
or
orl
inc
aad
(bad)
mov
cmpsl
test
sahf
gs
out
push
clc
add
cltd
mov
mov
mov
int3
add
test
les
mov
mov
out
dec
int3
leave
jnp
add
sti
mov
cmp
es
adc
imul
cwtl
clc
aad
pusha
jnp
dec
in
lret
fwait
xor
xor
into
xor
lods
jmp
sarb
ss
loope
xor
nop
xor
cmc
jno
sti
or
pop
pop
and
jp
jo
add
lahf
mov
aaa
sub
pop
(bad)
popf
repz
(bad)
mov
jl
xor
jb
mov
sbb
jg
(bad)
mov
loope
sbb
mov
stos
mov
cmp
xor
sub
testl
iret
mov
ss
jl
out
clc
or
lods
stos
inc
in
add
or
mov
daa
das
push
aaa
loopne
pop
