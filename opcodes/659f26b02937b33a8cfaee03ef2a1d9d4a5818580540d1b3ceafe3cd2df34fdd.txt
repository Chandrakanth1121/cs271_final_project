lods
adc
add
add
add
adc
add
add
add
add
add
and
ja
outsl
add
insb
add
add
add
add
popa
add
je
imul
add
add
add
push
push
push
push
call
push
call
ret
nop
nop
nop
pushf
adc
add
adc
add
add
add
add
(bad)
adc
add
adc
add
add
enter
add
add
jge
inc
js
je
jb
arpl
jae
dec
inc
push
dec
inc
dec
xor
cs
insb
add
ret
add
jae
popa
addr16
outsl
js
add
inc
push
xor
cs
insb
add
add
mov
pop
mov
mov
roll
outsl
sbb
pushf
mov
and
stos
aad
cmc
nop
pusha
cmp
(bad)
push
mov
inc
sahf
add
jns
cmc
mov
mov
and
insl
insl
in
mov
mov
mov
mov
outsb
xchg
dec
dec
cmp
inc
cs
sub
pop
or
fnsave
js
lret
jmp
push
push
mov
aas
push
out
out
es
xchg
mov
rcll
mull
add
lahf
clc
xchg
adc
rorl
sbb
push
xchg
je
adc
movsb
xor
add
pop
inc
leave
jmp
sub
dec
push
dec
mov
lea
sti
out
pop
data16
adc
push
sahf
jb
popa
jg
popf
cmp
mov
push
mull
shlb
sbb
and
mov
cmp
xchg
cmp
adc
shl
or
or
inc
sti
jbe
movsl
cmp
dec
mov
ror
mov
testl
mov
jo,pt
clc
or
lock
jb
xchg
adc
es
mov
rcll
or
xchg
xchg
popa
sbb
lret
dec
and
aad
dec
les
stc
dec
rclb
pop
inc
rcll
(bad)
xlat
pushf
xor
pusha
sbb
rclb
mov
push
mov
fbstp
pop
and
(bad)
adc
inc
xor
pop
jae
stos
mov
aam
(bad)
or
xchg
mov
data16
sub
xor
ret
dec
fst
pusha
jb
adc
lret
xchg
rcrl
dec
add
rclb
test
xor
popa
outsl
fsubrs
push
xor
lcall
jo
fiadds
popf
mov
xchg
loopnew
push
push
adcb
pop
xor
mov
mov
out
repz
(bad)
popf
inc
jae
xchg
enter
lock
mov
cmp
sbb
pop
or
push
int
(bad)
lea
enter
shlb
sbb
adc
inc
repz
mov
das
stc
mov
jecxz
js
jne
in
mov
dec
loop
bswap
inc
outsb
push
mov
movsb
jno
jne
cmp
ret
lcall
jbe
push
test
ss
int1
dec
xlat
(bad)
subl
scas
xor
stc
jp
mov
daa
hlt
add
in
sub
xchg
dec
or
sarb
sub
insb
insl
mov
cs
(bad)
sbb
lret
lods
mov
jb
xor
add
bound
add
xor
mov
xchg
in
cmp
popa
sbb
push
aad
dec
in
movsb
xor
pop
shlb
bound
testl
ljmp
sbb
test
(bad)
lret
mov
popf
(bad)
jge
test
push
adc
add
and
cmp
mov
add
mov
aad
dec
and
ret
or
mov
shll
jae
inc
inc
stos
xchg
cmp
stos
cmpsb
test
mov
xor
imul
outsl
cmpsl
mov
adc
incl
(bad)
push
inc
orl
and
sarl
pusha
mov
imul
jp
popa
mov
xor
add
mov
and
cli
lods
and
xchg
ss
xchg
enter
push
fists
fildll
xchg
and
or
enter
outsb
notl
ret
ja
xor
in
call
sahf
nop
rcrl
dec
jb
pop
data16
xchg
adc
sbb
sbb
and
roll
aas
mulb
jno
mov
mov
lea
push
and
dec
outsl
addr16
loopne
pop
sti
push
cwtl
mov
xor
cmpsl
loope
sbb
sbb
insb
cs
fbld
sbb
repnz
int
xchg
xchg
xchg
inc
push
mov
mov
inc
bound
xor
js
aaa
test
pop
xchg
pop
cmp
mov
ljmp
mov
popf
dec
mov
imul
enter
scas
in
mov
inc
imul
sahf
movsl
mov
sbb
pop
cmp
inc
rclb
orl
jge
rolb
sbb
push
sub
pop
clc
pop
mov
pop
lods
out
mov
imul
dec
jmp
ljmp
xchg
stos
fmulp
vpsubw
adc
or
dec
in
lcall
adc
sbb
test
scas
push
loopne
lret
mov
insb
dec
dec
push
std
ja
out
dec
ret
push
xor
(bad)
push
or
mov
pop
mov
push
and
stos
add
xor
out
pop
xlat
jge
out
mov
mov
pop
(bad)
outsb
(bad)
sub
cmp
jno
sub
jno
sbb
inc
or
ljmp
stc
xchg
push
es
xor
sahf
iret
cmp
jle
fxch
test
pop
push
daa
add
ja,pn
jb
ret
shrb
pop
movsl
mov
pop
sbb
pop
cmp
cmp
dec
pop
add
lcall
shl
inc
pop
stos
xchg
repz
sahf
jo
insb
ja
cwtl
(bad)
in
or
int
adc
cltd
pop
xchg
stos
mov
sar
sbb
cmpsb
sbb
dec
pop
lret
xor
adc
lds
sahf
mov
(bad)
mov
inc
cmp
pusha
mov
fidivrs
pop
mov
imul
adc
xlat
subl
call
scas
notb
dec
pop
test
test
dec
mov
inc
xlat
sbb
daa
cmp
sbb
pop
mov
sub
xchg
(bad)
rolb
jecxz
inc
leave
shll
mov
mov
sbb
mov
out
movsb
jae
in
loopne
adc
std
and
and
push
jp
cmp
dec
mov
inc
jno
mov
fiaddl
mov
(bad)
outsb
dec
outsb
test
inc
lcall
sub
stos
rcr
add
pusha
inc
cmp
mov
sahf
rcll
sub
dec
push
inc
mov
cmpsb
xchg
mov
pop
cmc
pop
pop
mov
jp
cmp
lock
ljmp
xlat
mov
leave
movaps
fwait
test
pusha
imul
dec
xor
cmp
cs
addr16
int
xchg
pop
cmpsb
mov
push
mov
inc
pop
cmp
push
rorl
xor
mov
add
jae
pop
inc
cld
test
bound
pop
lret
mov
dec
ficoml
cld
xchg
add
jbe
lea
lea
push
clc
test
cmp
xchg
inc
dec
cli
fwait
push
push
rol
inc
jae
(bad)
push
push
and
mov
roll
lcall
xchg
or
fsubs
cmp
enter
mov
stos
aad
leave
xlat
cld
adc
adc
sub
pop
sbb
cmp
popa
or
in
sub
fdivr
fstpt
mov
clc
dec
mov
shll
(bad)
leave
fwait
pop
movsl
mov
lret
mov
jl
push
push
les
nop
aas
idivb
loope
ret
insl
adc
rcrb
cmp
lock
pushf
pop
pop
inc
cmp
mov
ss
mov
ret
in
push
cmpsl
mov
hlt
movsl
ret
movsl
pop
push
add
loop
lds
ret
xor
sbb
dec
cs
in
xorl
mov
enter
pop
push
add
clc
dec
mov
imul
out
pop
mov
lds
pop
push
lahf
out
xchg
sbb
xchg
sub
clc
(bad)
shrd
mov
and
bound
pop
stc
or
sub
cmp
das
mov
xlat
inc
in
pop
outsb
add
or
pop
sub
mov
jo
movsl
inc
pop
jl
je
ret
lds
add
push
repnz
dec
and
gs
cmp
ja
or
push
shlb
