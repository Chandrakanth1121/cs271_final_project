mov
loop
imul
outsl
ret
enter
mov
stc
lret
or
loopne
mov
imul
loop,pn
cmp
call
sbb
adc
pop
jae
adc
xchg
adc
outsl
inc
adc
outsl
inc
adc
outsl
inc
adc
outsl
ret
enter
mov
std
lret
or
loopne
mov
imul
scas
cmp
call
jae
pusha
sbb
add
fsubs
inc
sub
pop
sub
sub
ret
sub
sbb
ret
enter
incl
div
or
cld
cld
pop
inc
pushf
sbbb
loope
sbb
xchg
add
lods
imul
cmpsb
cmpl
sbb
add
lods
fwait
pop
mov
rcrb
inc
movsl
push
adc
outsl
inc
adc
outsl
inc
adc
outsl
inc
adc
outsl
ret
enter
mov
stc
lret
xchg
sbb
rolb
xchg
pusha
jg
xchg
lcall
cmpsl
pop
rcrb
aad
lods
xor
pop
mov
mov
popw
push
inc
in
pop
sub
call
pop
mov
adc
loop
cmpsb
bound
(bad)
cmp
inc
out
ret
sbb
loope
addb
cwtl
push
movsb
pop
rcrb
aad
lods
xor
pop
mov
mov
popw
push
inc
in
pop
xchg
cmp
pop
mov
cmpsl
addb
bound
(bad)
cmp
fs
sbb
xor
sbb
loopne
addb
mov
in
pop
loop
pop
cltd
mov
data16
jle
divb
addb
pop
ret
pop
push
inc
sbb
out
addb
lods
cmp
jb
xchg
lcall
rcrb
sbb
dec
nop
rolb
xchg
adc
outsl
inc
adc
outsl
inc
adc
outsl
ret
enter
mov
stc
lret
or
loopne
mov
imul
xchg
add
roll
xor
inc
pop
loop
pop
popf
push
mov
cmpl
push
xorl
pop
inc
cmp
add
movsb
xchg
add
push
popf
cmp
pop
jbe
call
sbb
xor
cmpsb
bound
(bad)
pop
lods
mov
pusha
sbb
mov
pop
ret
pop
fwait
loopne
addb
fidivs
xchg
(bad)
push
add
loopne
addb
fdivrl
xchg
bound
fcomps
data16
out
sarl
add
fcomps
inc
jae
fld
out
roll
out
(bad)
cmp
xchg
roll
add
scas
xchg
add
fiadds
xor
pop
repnz
add
mov
addb
ret
push
fdivrp
roll
cmp
cmp
inc
out
ret
sbb
(bad)
rolb
add
pop
push
loop
inc
pop
loop
pop
fcompl
push
cld
sbb
pop
loop,pn
cmp
test
rcrl
inc
in
pop
dec
cmp
pop
ret
xchg
pop
pop
loop
adc
jg
mov
outsl
inc
adc
outsl
inc
adc
outsl
pop
dec
loop
xor
add
ret
push
cltd
loope
sbbb
cld
adc
outsl
inc
adc
outsl
inc
adc
outsl
ret
enter
mov
test
in
in
jg
xor
lcall
outsl
inc
adc
outsl
inc
adc
outsl
pop
push
loop
rorb
sti
push
enter
pop
pop
andb
xchg
rolb
rolb
fstpl
sbb
pop
pop
ljmp
push
push
(bad)
rolb
lret
pop
insl
(bad)
rolb
pop
outsl
inc
adc
outsl
ret
enter
mov
test
addb
mov
mov
add
stos
jb
pop
ret
sbb
pushw
mov
add
ret
push
and
rolb
push
mov
lods
lcall
cld
outsb
sbb
enter
cld
lds
pushf
inc
adc
outsl
inc
adc
outsl
inc
adc
outsl
pop
dec
loop
xor
add
ret
push
out
rolb
push
outsl
inc
adc
outsl
inc
adc
outsl
nop
xchg
dec
cmpsl
rcll
shl
pop
test
je
xchg
pusha
shrb
add
(bad)
rolb
sahf
pusha
adc
in
in
jg
xor
nop
mov
outsb
inc
adc
outsl
inc
adc
outsl
inc
adc
outsl
pop
sahf
jecxz
xor
mov
aas
ret
push
jle
rolb
push
outsl
inc
adc
outsl
ret
enter
mov
test
in
in
jg
xor
lcall
outsl
inc
adc
outsl
inc
adc
outsl
pop
push
loop
rorb
enter
(bad)
push
cwtl
xchg
sbb
lcall
cwtl
sahf
pop
mov
rclb
loop
pop
(bad)
loop
ret
sahf
pushw
sbb
xchg
xchg
xor
movsl
pop
sbb
pushf
adc
push
outsl
inc
adc
outsl
inc
adc
outsl
inc
adc
outsl
ret
enter
mov
test
addb
cmp
mov
jnp
xchg
xchg
xorl
sbb
addb
faddl
cld
call
addb
fdivl
imul
and
pop
pop
adc
std
sti
roll
mov
sub
pop
sub
pop
mov
adc
xlat
push
fcomps
push
jae
sbb
and
data16
adc
xor
pop
ret
andb
andl
sbb
rorl
lcall
fiadds
call
sbbb
xchg
rcr
fsub
rolb
xchg
rolb
fdivrp
pop
mov
xchg
pop
ret
inc
xor
call
push
inc
jecxz
mov
cmc
lods
mov
xabort
in
lcall
xorb
or
cmp
inc
jecxz
mov
pop
sub
loop
loope
sbb
scas
rcrb
jb
adc
pop
sub
pop
sub
xchg
idivb
pop
(bad)
mov
xchg
loop
jne
dec
enter
cld
adc
push
outsl
mov
imul
sbb
xor
inc
or
mov
mov
data16
daa
and
mov
push
(bad)
xchg
add
addb
pop
loop,pn
pop
lods
xor
dec
addb
pop
flds
and
repnz
ret
rolb
add
fmull
imul
sub
pusha
sbb
add
lods
xchg
xchg
fdivrs
xchg
daa
lcall
pop
mov
pop
idiv
pavgw
pop
sbb
fcompl
pop
jae
fadds
mov
adc
decb
sarl
push
jnp
xchg
push
hlt
daa
jl
outsl
inc
adc
outsl
inc
adc
outsl
inc
adc
outsl
pop
test
mov
xchg
dec
stos
rcrb
cmpsl
jle
jl
xor
andl
psllw
pushf
push
jmp
xchg
dec
stos
rcll
rcr
pop
test
in
pop
or
adc
lcall
ffree
je
xchg
inc
adc
outsl
inc
adc
outsl
inc
adc
outsl
push
mov
in
pop
sub
call
sbb
adcl
xchg
rcrb
pop
in
pop
cwtl
cmp
ret
sbb
loopne
orb
addb
xor
mov
pop
pop
cmp
push
mov
call
xchg
dec
es
mov
bound
test
pop
xor
loopne
sbbb
pop
mov
and
hlt
pushf
xchg
pop
fistps
fiadds
loop
cmp
cmp
push
inc
in
pop
rolb
pop
cld
xchg
push
xlat
std
orb
rolb
xchg
inc
sahf
jecxz
cwtl
sbbl
cld
add
pop
ret
pop
jg
rolb
lcall
pop
outsl
loope
sbbb
inc
loop,pn
cmp
inc
in
pop
push
cmp
sbb
call
xchg
add
addb
pop
ret
add
rolb
pop
jle
subb
fiadds
cmp
ret
mov
(bad)
sahf
xchg
shrl
xchg
pop
aam
leave
into
add
pop
push
lcall
sbb
adc
push
es
sbb
loope
inc
lcall
addb
pop
mov
xchg
pop
inc
cmp
roll
mov
and
hlt
addl
cmp
call
add
loope
adcb
fildl
mulb
addb
inc
or
xchg
pop
movsl
xchg
arpl
xchg
mov
mov
xchg
pop
pusha
dec
(bad)
rolb
push
call
addb
jae
sbb
roll
push
stc
push
xchg
add
addb
rolb
mov
sbb
(bad)
rolb
mov
pop
cmp
xor
adc
mov
pop
sub
and
les
enter
jg
