test
fnstcw
mov
(bad)
call
lret
xor
xor
(bad)
test
rex.wx
(bad)
fsts
sub
xchg
movabs
sti
jrcxz
call
repz
jb
add
stc
{rex2
sub
rex.r
(bad)
mov
cmp
adc
fwait
push
scas
int3
rex.wxb
rex.rxb
(bad)
xchg
(bad)
push
mov
scas
test
or
xor
je
or
in
pop
jae
adc
(bad)
data16
rex.xb
repnz
ret
in
mov
jns
jae
pop
mov
cmpsb
hlt
pushf
(bad)
push
imul
out
or
jnp
and
out
fistl
(bad)
sub
mov
(bad)
in
push
and
(bad)
test
push
in
shl
mov
out
test
cmp
or
pop
mov
pop
mov
rex.wrxb
(bad)
sub
mov
mov
(bad)
sub
ss
test
mov
mov
fwait
(bad)
mov
(bad)
cmp
push
jmp
cmp
push
stos
mov
mov
mov
mov
ja
cmp
rex.wrb
rex.wr
rex.wx
mov
push
and
out
pop
jno
imul
in
addr32
rcrl
mov
mov
sub
adc
hlt
adc
lret
call
fcmovnb
mov
movabs
sti
sar
fldt
ret
jl
or
cmp
sahf
(bad)
(bad)
call
pop
rex.rb
outsl
(bad)
(bad)
movabs
sub
sbb
pop
add
(bad)
mov
push
test
int3
scas
rex.xb
movabs
xchg
call
clc
int3
loopne
pop
jne
cmp
scas
(bad)
int
cmpsl
(bad)
ret
test
add
mov
or
scas
int1
leave
(bad)
sub
shlb
out
mov
mov
xchg
std
add
jbe
scas
pop
lods
(bad)
pop
sub
(bad)
outsb
rex.wxb
loopne
cs
(bad)
(bad)
repz
cmp
cs
sbb
mov
in
ja
(bad)
xchg
mov
cwtl
(bad)
nop
xchg
fists
pushf
xchg
ss
sbb
in
fistpll
adc
(bad)
sub
lret
(bad)
jge
sbbb
out
fxch
rex.wxb
sbbl
sub
adc
mov
fs
sub
cmp
(bad)
adc
jge
out
and
movabs
test
xchg
leave
rex.x
adc
cmpsb
cmc
or
xor
rex.wb
stos
(bad)
call
out
jb
(bad)
sub
cmp
pop
cld
int3
(bad)
jle
movl
rex.b
in
repz
adc
adc
repnz
push
out
xor
rex.xb
repnz
mov
adc
loopne
cmpsl
js
js
rex
push
(bad)
jmp
shll
add
adc
popf
fstl
cmp
(bad)
(bad)
out
(bad)
in
xor
lods
cmp
rex.rb
addr32
rcll
mov
rex.rb
xchg
rex.wb
rex.rxb
cmp
pop
(bad)
sbb
cmpsl
stc
xor
cs
mov
or
divb
(bad)
cmpsl
jb
xor
mov
in
pop
lret
sub
(bad)
rex.rx
pop
(bad)
repz
(bad)
push
mov
(bad)
jl
sub
pop
xchg
mov
test
cld
mov
jmp
pop
sbb
mov
xchg
(bad)
adcb
push
out
fnstsw
add
xchg
jmp
repz
pop
je
pop
mov
or
pop
rex.rx
ds
(bad)
jrcxz
(bad)
neg
(bad)
xchg
ret
(bad)
pop
loope
rex.rxb
push
xorl
jno
and
addr32
or
sahf
(bad)
(bad)
test
(bad)
mov
(bad)
mov
ret
ja
mov
xor
enter
fdivp
and
(bad)
xchg
mov
xchg
sub
cmpsb
sbb
xor
xlat
xor
rcll
test
(bad)
outsl
es
xchg
jno
push
jbe
push
xchg
nop
mov
lea
cmp
decb
mov
(bad)
xor
test
pop
test
jl
or
fildl
int3
sarl
push
mov
cs
(bad)
(bad)
or
pop
je
mov
jrcxz
xchg
adc
add
mov
repz
loope
sub
sub
in
and
cmp
xor
(bad)
and
movabs
rex.wxb
cli
rex.wrxb
cmp
rex.x
sub
(bad)
rex.xb
push
rex.wxb
(bad)
rex.xb
jmp
sub
sbb
rcrb
pop
fyl2xp1
idivb
rex.x
(bad)
adc
rex.rxb
mov
pop
or
movabs
sbb
jae
jb
xor
sub
sub
pushf
xchg
jg
xor
or
loope
movabs
je
push
add
sbb
outsl
mov
cs
out
xchg
mov
add
xchg
(bad)
jae
xor
int
rolb
jbe
cmc
scas
jp
in
xchg
pop
shrb
sbbb
movabs
xchg
rex.rxb
(bad)
loop
cmp
sub
adc
rex.x
rol
test
in
sbb
imul
(bad)
test
sti
insl
push
jge
add
mull
fcmovnu
(bad)
fbstp
xor
and
rex.wr
mov
ds
(bad)
gs
cmp
(bad)
addl
loop
(bad)
push
xchg
js
lahf
lods
rex.rx
and
sbb
fldt
mov
cmpsl
adc
std
or
loope
adc
xlat
mov
call
(bad)
or
fcomps
insl
enter
adc
ror
mov
add
pop
(bad)
out
xchg
test
xchg
movsb
cmp
rex.rb
loop
enter
rex.wr
pushf
pop
fcmovnbe
xchg
(bad)
jnp
pop
adc
in
jg
add
ja
sub
and
rex.wb
(bad)
out
(bad)
std
rex.b
push
jg
add
(bad)
xlat
shrl
(bad)
sbb
fistpll
add
pop
{rex2
test
fadds
(bad)
mov
adc
xor
adc
jnp
adc
scas
adc
insb
pop
jne
push
test
mov
cli
(bad)
rex.wrxb
test
mov
mov
push
mov
mov
push
hlt
mov
movabs
imul
and
fstpt
pop
lret
push
add
rex.wr
jnp
(bad)
mov
sub
(bad)
xor
mov
nop
or
xor
adc
fists
mov
push
outsb
jmp
(bad)
xorb
sub
mov
test
xor
cmp
adc
rex.wx
lea
ret
and
mov
fldt
fwait
adc
roll
imul
pop
jg
ret
cli
jbe
sbb
frstor
fbld
mov
push
rorb
lods
rex.wxb
fiadds
mov
add
rex.wr
insb
mov
mov
ret
mov
ret
outsl
mov
xchg
sub
out
jp
addr32
or
pop
(bad)
jno
pop
ror
xchg
adc
(bad)
stos
ret
out
(bad)
movabs
in
rex.b
rex.r
addr32
adc
leave
rex
stc
jmp
pop
cmpsb
ds
out
xor
ja
(bad)
repz
nop
shlb
rex.rx
(bad)
roll
movabs
(bad)
outsl
mov
lret
lret
mov
jp
xchg
flds
xor
mov
movabs
(bad)
sub
cmc
and
or
adc
adc
fucomip
mov
movabs
fdivrs
ret
adc
rex.r
lock
cmp
rcrl
sbb
movsl
push
xchg
push
rex.rxb
and
rex.wrxb
insl
(bad)
xlat
roll
lock
xor
rex
rex.r
xchg
int
movsxd
(bad)
xchg
or
rex.wx
rex.wrxb
and
cs
adc
pop
or
mov
rclb
push
stos
(bad)
pop
rex.wrx
cmp
xlat
xor
insb
cmp
sbb
rol
jo
mov
rex.wx
rex
cmp
pop
push
jnp
sbb
pop
jmp
in
add
mov
jrcxz
in
fcmovu
ja
and
xchg
cmp
(bad)
out
jne
rclb
lock
(bad)
rex.wr
xor
sub
adc
rex.rxb
loope
push
rex.wx
sbb
(bad)
(bad)
clc
in
rex.rx
movsl
lock
fisubs
sbb
add
(bad)
int3
scas
leave
push
mov
loop
mov
mov
sbb
xor
push
(bad)
lods
iret
call
and
{rex2
outsb
fimuls
(bad)
outsb
lock
or
lahf
rex.xb
or
call
scas
add
cltd
mov
(bad)
push
and
lret
pop
out
shrl
lea
ret
ss
(bad)
(bad)
mov
xor
and
sub
out
mov
(bad)
fdivr
movsl
rex.b
data16
movsl
data16
repnz
add
test
imul
rex.x
gs
xchg
rcr
(bad)
int3
add
ss
out
fidivrl
sbb
sub
mov
xlat
loopne
(bad)
cmp
pushf
adc
xlat
stos
sub
xor
ds
