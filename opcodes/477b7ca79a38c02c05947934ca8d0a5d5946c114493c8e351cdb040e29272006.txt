push
data16
fdivrs
test
call
sub
cs
lods
add
mov
cmp
jp
and
test
addr16
mov
add
mov
pushf
or
or
xchg
dec
mov
lods
(bad)
mov
lods
shrb
or
jg
push
mov
loopne
mov
pop
dec
ret
xchg
les
dec
loopne
mov
fmul
dec
test
pop
push
push
mov
xchg
pop
cltd
pop
pop
in
out
pop
jo
loop
call
push
and
shrl
cltd
or
(bad)
and
loop
xlat
jmp
scas
std
adc
(bad)
lea
fst
xchg
jb
lds
and
mov
insl
fistps
cmpsl
inc
loope
in
mov
mov
or
std
mov
insb
(bad)
push
enter
je
sub
neg
xchg
fs
lods
pop
mov
shrl
xchg
out
nop
cltd
adc
add
jae
jmp
mov
(bad)
scas
into
out
outsb
sbb
nop
in
negl
or
push
pushf
push
lret
cmp
bound
mov
sahf
mov
ret
mov
jb
mov
mov
mov
push
or
cmp
mov
fsubrl
and
mov
dec
push
fs
cmpsl
push
inc
jge
jnp
roll
adc
inc
lcall
pop
or
and
into
test
and
nop
push
push
aad
scas
test
fcoms
clc
in
idivb
xor
xchg
cmp
ror
fistps
inc
shll
out
xor
fcom
mov
int
mov
rcrb
push
into
dec
jns
orl
int3
insb
xchg
mov
jb
loop
nop
stos
(bad)
scas
cli
nop
pop
cmpsl
and
cltd
dec
popa
jle
dec
inc
mov
xor
ret
rol
aas
adc
sahf
scas
(bad)
xchg
push
in
pop
hlt
add
js
repz
leave
jl
js
push
mov
pop
loope
xchg
cld
pushf
pop
les
mov
loopne
add
ss
pushf
sahf
mov
mov
pop
adc
pop
gs
test
push
out
ja
leave
outsl
adcb
jmp
pusha
cmpsl
lods
lods
sub
cmp
push
pop
jnp
inc
in
in
xchg
out
addr16
mov
fchs
mov
pushf
sub
or
dec
lcall
aad
sbb
mov
out
jmp
adc
mov
outsl
jl
loop
sub
jg
nop
mov
mov
rol
push
pop
and
ja
loopne
jge
mov
mov
cmc
lret
mov
movsl
ja
xchg
pop
adc
adc
pop
adc
into
mov
jo
iret
inc
loope
jo
mov
fsubs
mov
mov
mov
jp
push
pop
pop
mov
xchg
(bad)
jmp
addl
gs
mov
cld
stos
mov
test
(bad)
insb
loopne
test
negb
stos
and
jns
ja
aad
mov
sbb
(bad)
hlt
adc
stos
int
inc
hlt
mov
shll
dec
jle
scas
lds
inc
lret
shlb
idivb
jb
adc
lock
outsl
gs
mov
mov
aas
int1
pop
mov
in
lods
cvtdq2ps
mov
fnstenv
mov
int
mov
(bad)
mov
fs
mov
and
mov
or
mov
pop
mov
inc
or
int
sub
push
xor
leave
add
mov
loop
cmp
sbb
test
dec
lret
test
jae
cmpb
shlb
lock
(bad)
xchg
mov
inc
adc
jae
fs
insl
mov
out
mov
add
mov
pop
mov
pop
nop
inc
jg
lcall
adc
test
fwait
add
dec
popf
lret
mov
mov
scas
or
lahf
movsl
add
dec
mov
out
jo
sbb
mov
hlt
inc
cmpsl
rorb
aad
loop
or
jno
dec
dec
pop
or
rcrl
jns
or
test
jg
mov
push
sbb
mov
jp
cli
sarb
push
fwait
scas
mov
scas
pop
xchg
into
lcall
sub
scas
mov
test
mov
or
scas
xchg
(bad)
ja
push
nop
inc
mov
mov
je
xchg
and
call
ljmp
xchg
call
sub
sub
jecxz
sub
scas
outsl
loop
mov
xchg
push
jbe
sbb
pop
mov
mov
stos
mov
enter
mov
jno
into
enter
clc
push
cmp
out
mov
xchg
cmpsl
insl
add
push
jmp
rcr
jle
test
sub
(bad)
aad
xchg
and
xchg
cmp
scas
mov
dec
jnp
push
divl
popf
dec
or
fsubrs
xor
int3
xlat
sub
mov
mov
xchg
pop
arpl
or
(bad)
clc
in
pushf
addl
mov
popa
out
sarb
lds
enter
cmpsb
es
lods
jb
mov
dec
daa
(bad)
mov
leave
jb
int3
push
add
jmp
sarl
mov
mov
cmpsl
jae
movsl
pop
idivl
push
insb
call
cltd
xchg
(bad)
mov
mov
(bad)
mov
sbb
lock
dec
dec
mov
cs
xchg
pop
cwtl
mov
xchg
enter
dec
(bad)
loopne
xchg
in
fwait
data16
fdivp
nop
lds
mov
cmp
rcrb
dec
jns
je
jg
dec
mov
imul
jge
stos
pop
lcall
hlt
scas
data16
aaa
pop
add
pushf
pop
sti
xchg
aad
or
jmp
aaa
shlb
shlb
stos
pop
repnz
stc
pop
idivb
(bad)
dec
rcll
or
bound
aam
std
js
mov
jne
fcoms
negb
movsl
lea
std
mov
xlat
xchg
xchg
sahf
(bad)
pop
imul
and
mov
xor
arpl
xor
loopne
mov
pop
jmp
cli
std
add
insl
rorb
jmp
insb
push
inc
xor
mov
mov
jp
iret
es
call
ret
pop
mov
mov
hlt
pop
ret
iret
or
mov
mov
jb
insb
mov
lret
repz
jnp
mov
shl
mov
adc
jl
mov
mov
inc
jmp
scas
lods
cli
in
nop
dec
inc
pushf
fidivrl
popa
adc
jmp
pushf
xrstors
shlb
loope
les
add
mov
pop
mov
js
out
add
clc
pop
jl
sub
ret
out
movsl
jl
ret
ja
inc
test
xchg
mov
pop
int1
in
popf
xchg
roll
scas
xchg
leave
rcl
lea
ds
lods
xor
mov
xchg
xchg
xchg
mulb
(bad)
sub
xchg
pop
lds
mov
fiaddl
ss
fsubrl
xchg
sub
inc
orb
mov
mov
xchg
insl
clc
mov
cmp
orb
cmp
xchg
pusha
xchg
mov
popa
sar
dec
mov
pop
xor
mov
push
out
pop
repz
cwtl
jns
sahf
rcll
cmpsb
into
adc
out
lods
jge
(bad)
mov
mov
mov
pop
mov
(bad)
push
insb
repnz
scas
mov
shrb
and
push
hlt
xchg
outsb
(bad)
cli
xorb
repz
pop
ss
leave
dec
hlt
xchg
(bad)
cmp
add
mov
in
mov
add
mov
mov
xchg
mov
mov
add
mov
imul
ljmp
(bad)
pusha
sarl
mov
inc
xchg
shll
and
pop
mov
ret
lret
in
pop
pop
loope
bound
std
call
movsl
(bad)
mov
rcr
aaa
xchg
sub
mov
mov
insl
push
stos
inc
xor
ficompl
xchg
stc
add
adc
test
mov
dec
in
mov
lods
stos
push
inc
pop
dec
xor
xchg
jmp
adc
aas
mov
movsb
pop
xchg
lods
push
push
dec
fnstenv
xchg
cmpsb
fadd
int
clc
lcall
add
(bad)
data16
inc
enter
push
mov
push
mov
push
xor
cmp
iret
call
or
lret
fldcw
mov
dec
cmpsb
pop
movsl
