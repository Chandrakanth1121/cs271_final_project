sub
(bad)
adc
loop
cmp
imul
xor
jecxz
fidivl
jo
inc
jbe
(bad)
loopne
push
(bad)
aad
data16
and
jmp
xchg
movsb
mov
out
push
pop
lahf
xor
pop
in
(bad)
lcall
stos
inc
jle
shl
movsb
pop
dec
notb
ss
aas
dec
fisubl
cld
mov
and
push
mov
enter
add
inc
std
ljmp
pop
lret
xchg
inc
xor
add
ret
mov
cmc
fcomps
add
inc
repnz
int
inc
adc
fildl
xchg
sbb
jbe
jno
mov
(bad)
pop
popf
lret
pop
fstpt
xchg
pushf
push
(bad)
ss
mov
out
and
bound
rorl
and
inc
call
enter
mov
adc
fsubrs
adc
aam
push
pop
cmp
push
and
pop
adc
and
call
push
lcall
test
in
fadds
fidivrs
lods
dec
sahf
inc
or
loope
sbb
sub
(bad)
cmp
shll
(bad)
xor
adc
idivl
lcall
push
in
fnsave
arpl
popf
fistpl
jnp
imul
inc
pop
push
jnp
fsubl
jg
cld
pop
sbb
repz
or
or
fdivl
or
dec
lahf
(bad)
clc
test
adc
mov
scas
andnps
xor
cmp
xlat
push
pop
mov
rcl
mov
fdivl
jne
add
jae
xchg
bound
add
push
je
(bad)
ljmp
jnp
in
sbb
mov
mov
iret
push
and
adc
and
hlt
popf
std
adc
mov
leave
xchg
cmp
fnsave
jmp
loopne
loop
sub
std
or
adc
fs
in
xchg
mov
(bad)
in
mov
out
mov
sti
cmp
jb
xchg
cmpb
das
push
rclb
loope
mov
repz
cmpsl
lret
dec
std
jno
ret
ljmp
ja
inc
xchg
mov
iret
aad
push
xor
pop
pushf
pushf
dec
and
push
rcrb
leave
fwait
clc
(bad)
ds
sub
and
shll
pop
xchg
sbb
fbld
mov
movsb
mov
ficoml
inc
ficoms
ja
jecxz
xor
sbb
(bad)
loopne
fwait
pop
in
gs
out
sete
xchg
fwait
push
ror
jb
adc
lock
inc
or
dec
xor
int
inc
popa
inc
sbb
roll
pop
mov
mov
subb
fstl
lock
inc
and
aad
mov
(bad)
cmp
xor
cwtl
orl
dec
iret
insl
adc
jmp
jno
add
lods
int3
lock
inc
loopne
inc
jmp
adc
in
mov
loop
sbb
xchg
(bad)
push
mov
mov
roll
int3
mov
ja
repnz
xchg
fldcw
shlb
ss
xor
repnz
data16
idivl
loop
and
xor
cld
in
ret
outsb
push
ret
(bad)
es
xchg
xchg
rcrl
and
fst
rorb
jecxz
mov
mov
rorb
xlat
dec
jg
add
mov
aam
(bad)
mov
and
adc
fildl
jmp
ljmp
sub
mov
mov
and
imul
(bad)
sbb
and
(bad)
in
jns
pushf
xchg
repnz
jo
shlb
ficomps
jno
shlb
outsl
cmpsl
xor
mov
xchg
imul
dec
les
jno
not
mov
adcb
movsb
xorb
ret
iret
sub
mov
(bad)
(bad)
std
std
pop
clc
mov
or
fimull
push
push
mov
adc
pop
jbe
arpl
push
pushf
and
leave
pop
loop
into
cltd
mul
cld
int3
iret
xor
or
in
and
cld
inc
rorl
shrb
and
fisttpll
cltd
mov
cmp
add
mov
fdivl
cli
inc
jl
mov
push
fstps
loop
aam
out
mov
pop
inc
mov
sbb
jl
je
mov
aad
loopne
push
mov
or
shll
(bad)
or
inc
push
and
sahf
fcmovu
out
in
and
fwait
lahf
sti
jle
push
or
xor
jno
pop
mov
cmpsl
lret
ror
out
pop
or
loop
cli
xlat
push
adc
mov
jae
leave
sti
pop
mov
push
push
push
js
popf
insl
fwait
mov
xchg
je
adc
adcb
xchg
mov
(bad)
pushf
gs
lahf
xchg
mov
lods
ss
mov
xor
push
inc
pushf
std
pop
push
repnz
adc
(bad)
sub
or
adc
lret
ficomps
fistpll
pop
shrb
aad
rol
mov
pop
xor
repnz
jecxz
sbb
xchg
cwtl
shrb
(bad)
jp
in
scas
into
dec
hlt
sti
mov
xchg
pop
fsubl
bound
xchg
cmp
xlat
pop
adc
dec
push
aad
jp
dec
aam
push
jo
int
loope
jecxz
(bad)
push
jg
imul
in
adc
jbe
clc
in
adc
cli
mov
add
cmp
into
jmp
lret
xor
add
pop
cmpsl
shr
int3
xchg
sti
jno
jbe
cmp
out
(bad)
cmpsl
push
mov
das
stos
out
out
bound
lcallw
mov
push
aad
mov
xchg
popf
sbb
jp
gs
aam
fucomip
cmp
mov
mov
js
addl
cltd
and
xchg
cld
(bad)
repnz
fildll
xchg
repz
xchg
aam
(bad)
fucomp
cs
scas
push
push
jmp
aad
jg
mov
push
lret
jecxz
pop
mov
mov
mov
hlt
lods
pop
into
cli
fldenv
or
lcall
xlat
call
mov
jae
ret
in
mov
cli
cli
(bad)
dec
jg
mov
and
push
scas
stc
ljmp
or
mov
ret
leave
(bad)
(bad)
or
adc
call
repnz
daa
mov
sbb
repnz
out
push
test
add
aam
(bad)
les
fnstenv
rcr
and
adc
hlt
pop
mov
fnstsw
addr16
jns
in
loope
sti
hlt
into
nop
aad
sub
mov
mov
dec
pop
jb
ret
addr16
sahf
je
imul
dec
adc
andl
outsb
(bad)
imul
sub
sbb
mov
fstpt
ja
repnz
cltd
jne
cmp
arpl
add
imul
out
dec
push
dec
mov
cld
cltd
lock
push
test
inc
movsl
ds
cmpsb
outsl
repz
dec
clc
rcr
sbb
dec
call
mov
or
out
mov
fisubl
cld
fwait
inc
pop
in
or
(bad)
scas
int1
out
add
loope
aam
adc
pop
inc
mov
mov
std
mov
fidivs
data16
jle
(bad)
xchg
(bad)
cmp
push
test
loop
inc
rcrb
(bad)
in
scas
and
rorl
in
cmp
xor
lcall
pop
inc
cmp
loopne
out
jp
add
adc
std
cmp
notb
out
(bad)
jno
jbe
xlat
jmp
insl
cmp
fisubrl
pop
movsb
inc
xchg
loopne
popa
bound
fildll
insl
clc
cmp
cmpsl
ljmp
cltd
mov
mov
lret
(bad)
mov
hlt
xor
adc
inc
(bad)
call
push
sub
add
adc
or
push
dec
push
and
lock
in
jecxz
ljmp
mov
push
lret
pop
sbb
add
hlt
push
int3
mov
inc
inc
mov
clc
js
adc
int1
xchg
pop
repnz
ljmp
ret
or
jp,pt
fidivl
ljmp
inc
add
das
xchg
fwait
scas
rclb
xchg
xchg
(bad)
push
aam
out
or
(bad)
into
lcall
adc
and
push
adc
mov
es
repz
out
repnz
pop
js
dec
loop
daa
fisubrs
test
sbb
lcall
jb
clc
push
pop
in
dec
and
loop
ret
addl
cmp
mov
xchg
and
out
dec
add
out
xlat
xor
loop
popf
or
shll
stos
xchg
cld
les
jbe
mov
iret
(bad)
