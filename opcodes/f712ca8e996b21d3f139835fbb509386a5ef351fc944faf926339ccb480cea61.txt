stos
lods
push
cs
cmc
das
push
xchg
lret
add
insb
(bad)
movsl
repz
push
cmpsb
jmp
clc
adc
sub
enter
std
xlat
cmpb
mov
mov
fildll
rorl
xor
repnz
das
add
ss
outsb
in
lock
mov
imull
add
or
mov
insb
add
adc
sbb
push
inc
gs
js
(bad)
loop
jmp
lock
pop
js
rorb
mov
stos
les
ja
xor
mov
lods
pop
and
imul
push
loopne
dec
int
and
mov
mov
(bad)
ljmp
call
push
pop
add
adc
or
pop
adc
fstl
je
not
or
pop
mov
shld
sub
mov
xchg
cmpsb
pop
insl
repz
dec
sub
jmp
js
rorb
adc
inc
inc
fnsave
pop
xor
sahf
popf
nop
imul
mov
pop
jp
(bad)
int
lods
cmpsb
test
sarb
jg
out
rcll
(bad)
repnz
jmp
mov
xchg
xchg
sahf
xor
scas
stc
repz
shll
cwtl
push
cmp
int
or
(bad)
pop
stos
sub
lods
sbb
pop
scas
into
sub
cmp
cmpsb
xor
jae
pop
test
cmp
lret
and
jne
mov
imul
movsl
ss
jmp
outsl
gs
stos
mov
clc
rcll
sbb
and
outsl
test
movsl
xlat
or
dec
scas
or
pop
popf
sub
mov
fmuls
xchg
cmpsb
insb
ret
mov
iret
mov
lock
mov
sbb
sub
ret
sbb
je
pop
mov
dec
movb
and
inc
sub
lods
mov
add
jge
mov
xchg
jg
outsb
scas
jmp
xchg
mov
(bad)
aas
lods
sbbl
stc
jo
aas
xlat
ficoml
ljmp
mov
(bad)
mov
pop
(bad)
cmpsb
scas
popa
cmp
pop
lock
int1
movsl
mov
xlat
push
shr
lcall
jnp
sub
movsb
cmpsl
mov
loope
mov
scas
test
sbb
cmp
stos
cmpsb
sub
push
mov
lahf
jae
repnz
lcall
cmp
ret
data16
cltd
pop
push
enter
push
jno
mov
and
push
push
xchg
push
inc
mov
and
add
jle
fmulp
ss
mov
arpl
lods
(bad)
pop
(bad)
sbb
pop
addb
loop
out
push
sahf
xchg
cmp
or
pop
jne
sbb
xlat
dec
mov
out
cmpsb
or
scas
movsb
sbb
in
or
pop
xabort
mov
leave
pop
pop
xchg
fisttps
xor
jl
movsb
mov
add
dec
push
cmp
jae
pop
mov
out
mov
jle
xchg
mov
push
mov
ret
xor
jbe
(bad)
cmp
xor
insb
out
dec
cmp
insl
popa
stc
outsl
push
(bad)
lahf
add
sar
push
adc
sbbl
stos
pop
mov
push
xor
outsb
cmc
and
dec
mov
sub
mov
out
mov
jne
cmp
scas
pusha
adc
fistpll
sub
push
in
lret
leave
lods
xor
(bad)
in
dec
in
dec
inc
xchg
jge
push
jmp
xchg
push
sub
inc
mov
ljmp
xchg
mov
xor
sbb
(bad)
xchg
loope
mov
leave
xchg
mov
jle
mov
xchg
in
(bad)
cmc
xor
pop
dec
pop
pop
or
lock
daa
push
jno
inc
jl
lods
and
test
push
pop
ret
jmp
xor
sarb
push
loop
gs
cs
shl
fistpll
iret
out
add
and
shl
and
lret
sub
mov
andl
mov
fildll
loop
(bad)
imul
fwait
mov
shr
popa
cmp
pop
xchg
push
mov
pop
xor
mov
inc
mov
mov
imul
cmpsl
and
add
push
mov
in
pusha
or
mov
in
stc
stos
push
repz
lock
xor
mov
aam
sbb
jo
add
scas
aad
daa
(bad)
ds
mov
je
sbb
jmp
xor
dec
xchg
mov
pop
adc
inc
jae
aas
stc
lods
in
(bad)
andb
mov
in
call
je
inc
addl
mull
dec
jbe
sti
movsl
popf
pop
loope
aas
add
repnz
pop
shl
sbb
push
mov
lea
cmc
aaa
jbe
stos
in
sbb
sbb
out
xor
inc
(bad)
cli
dec
int3
dec
and
lods
jne
mov
pop
lods
lcall
lahf
repnz
sahf
fdivl
mulb
sub
cli
sarb
scas
repnz
inc
xchg
sbb
xor
dec
pop
jbe
jnp
pop
fucom
sbb
fists
fs
insb
int3
xor
ja
rcll
jecxz
push
xchg
outsl
je
pop
aas
inc
sbb
xchg
repz
inc
out
jbe
jb
xchg
lahf
xchg
pop
push
aam
fwait
and
push
jo
js
xchg
sbb
push
insl
std
pop
jb
popa
cld
mov
xchg
sbb
sub
push
daa
inc
pop
idivl
fs
fistpl
push
enter
add
mov
test
test
imul
into
xchg
pop
sbb
adc
mov
ja
jle
int
cltd
mov
jle
in
jmp
mov
in
idivl
(bad)
xchg
push
mov
aad
mov
sbb
xor
fcoml
sbb
push
pusha
js
cmp
test
jae
or
mov
mov
add
mov
cli
aad
ja
push
clc
mov
xchg
sbb
movsb
test
popa
mov
cwtl
imul
scas
jne
and
shrb
push
(bad)
xor
jmp
out
out
popa
xchg
sbb
jp
push
add
rcll
and
jmp
jecxz
cmp
out
loopne
push
push
je
fbstp
out
div
outsb
shll
or
in
(bad)
clc
xlat
xorb
lods
insb
xor
div
mov
jl
into
ret
xchg
add
inc
xchg
jne
add
arpl
clc
push
ss
das
jbe
lret
pop
push
jmp
pop
rcrl
sub
add
xchg
in
push
cmc
cmpsb
adc
xchg
fisubrs
xchg
mov
ret
test
pop
mov
pushf
test
fsts
addr16
mov
pop
jnp
jb
out
clc
outsb
jnp
xchg
imul
lret
adc
jmp
xlat
outsb
add
mov
mov
push
lahf
aad
mov
rolb
cmpsb
movsl
mov
mov
or
ljmp
or
mov
xor
ds
sub
or
aaa
and
andb
test
lock
bound
repz
outsb
repz
mov
jbe
fisttpll
add
jmp
(bad)
pop
adc
jo
imul
add
(bad)
jl
loopne
leave
lock
lret
sbb
out
nop
push
fcoml
sbb
jno
loope
neg
aam
mov
lods
imul
loopne
fs
or
mov
scas
xor
xchg
pusha
or
rcr
fstpt
outsl
and
rorl
outsb
sub
mov
iret
pop
push
div
sbb
mov
es
mov
nop
sub
stc
pushf
and
je
pushf
pop
xor
aam
xchg
imul
and
imul
mov
cpuid
adc
aas
std
pop
arpl
stos
cmc
lock
jo
int
jle
lea
js
xor
xlat
aaa
push
dec
pop
cmp
scas
ljmp
aad
scas
dec
jne
xor
mov
data16
lcall
mov
out
(bad)
jge
or
mov
inc
sub
cmpsb
insb
loope
push
push
or
inc
sti
push
addr16
gs
lods
imul
jle
jl
out
outsl
mov
enter
shrl
lock
decl
mov
mov
push
dec
pshufw
das
mov
xchg
cmpsl
sbb
repnz
pop
or
sub
popf
leave
sti
mov
adc
pop
and
pop
out
mov
insb
jmp
aaa
pushf
faddl
cmp
add
mov
xchg
loop
