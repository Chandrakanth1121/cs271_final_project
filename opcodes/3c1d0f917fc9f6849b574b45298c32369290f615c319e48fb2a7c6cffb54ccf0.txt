popa
xorl
xchg
sub
leave
ljmp
cli
pop
ret
push
mov
fsubs
dec
(bad)
loopne
mov
inc
das
stc
ljmp
jne
sub
pusha
in
test
imull
jle
std
divb
xchg
adc
push
popf
imulb
sbb
mov
insb
jmp
sbb
and
lods
adc
cli
lcall
xchg
or
cld
sub
das
movsl
inc
daa
shrb
adc
sbb
adc
das
std
ds
xor
fidivs
daa
insb
rorl
out
loopne
aas
(bad)
hlt
(bad)
das
sub
repnz
in
push
xor
xchg
shl
adc
mov
jl
repnz
add
push
(bad)
and
mov
insl
mov
jg
imul
and
sub
movsl
outsb
call
sbb
jae
dec
adcl
mov
or
into
pushf
jecxz,pn
cli
(bad)
cmp
(bad)
scas
mov
push
xor
arpl
xchg
pop
sub
cmpsl
lods
inc
and
dec
pop
clc
push
adc
loope
in
dec
imulb
sub
xorb
in
lods
pop
xchg
or
sahf
push
stos
in
repnz
sub
push
ljmp
xor
xor
sbb
xchg
es
enter
das
or
adc
imul
push
xchg
call
pop
mov
mov
or
out
mov
and
cli
sub
push
fldz
mov
xor
mov
hlt
(bad)
fwait
call
sbb
inc
mov
sbbb
lret
or
pushf
and
repnz
and
inc
jecxz
repz
subl
ljmp
sbb
scas
sahf
cli
push
or
xor
cmp
pop
jb
loop
(bad)
adc
push
pop
test
movsl
pop
and
sub
adc
and
call
and
daa
cli
inc
add
loopne
in
add
in
mov
jge
push
insl
es
repz
insb
in
sbb
stc
ss
and
cmp
xor
xor
fs
add
stos
inc
add
xor
jne
sbb
push
lea
push
add
pop
in
cmp
(bad)
mov
and
bound
stc
push
push
inc
inc
sub
cld
dec
lods
scas
push
sbb
test
aaa
pop
test
push
add
add
leave
add
add
mov
inc
loope
dec
frstor
xchg
scas
decb
add
out
jp
ljmp
jnp
andl
sbbb
lock
idiv
fisttps
pop
mov
sbb
rcll
mov
add
sbb
xlat
stc
int
fiaddl
jno
and
(bad)
idiv
fwait
pop
std
push
push
stos
and
push
adc
rcr
adc
(bad)
jo
test
sbb
popa
in
out
stos
(bad)
pop
pop
call
pop
adc
dec
adc
xor
add
push
pop
mov
xchg
dec
dec
sbb
sub
sub
push
sbb
into
push
clc
rdtsc
sti
mov
lret
adc
mov
adc
gs
and
dec
or
xor
add
lods
add
test
pop
adcl
xchg
xchg
lock
adc
or
add
inc
cmp
or
sub
or
ss
mov
add
jmp
xor
sub
repz
(bad)
rorb
call
pusha
lock
rcll
mov
pop
and
xchg
(bad)
loopne
movsl
and
addr16
lds
push
mov
sbb
jmp
cmpsb
lea
std
fwait
mov
leave
mov
adc
adc
data16
jbe
xor
mov
stc
xchg
jge
push
sti
mov
aad
push
inc
(bad)
and
or
rorl
push
mov
mov
jne
(bad)
mull
subl
adc
adc
push
inc
mov
add
or
test
adc
inc
or
inc
add
clc
dec
lds
add
cmp
mov
mov
es
pushf
sub
and
int
and
dec
jp
dec
mov
imul
loop
pop
fwait
push
orb
mul
movsl
and
clc
xchg
outsb
dec
fcoms
mov
lock
xor
out
adc
sbb
imul
inc
cmp
adc
cmp
aas
clc
lods
xchg
push
pushf
pop
and
ret
fisttps
cmc
outsb
mov
sti
sbb
fisttpl
pop
and
in
clc
pop
in
push
jecxz
inc
into
sahf
pop
xor
adc
add
jp
mov
sub
ret
(bad)
or
pusha
jle
adc
movsb
mov
mov
push
cli
xor
sbb
xor
xor
es
mulb
and
scas
xor
and
push
nop
mov
sbb
pop
jg
mov
lret
ljmp
sub
data16
mov
cli
sbb
adc
clc
notl
add
cmp
jnp
loope
popf
inc
or
rcll
lahf
fists
frstor
push
inc
dec
cmp
sbb
int1
pop
xchg
mov
je
int1
inc
push
pop
or
shrl
imul
adc
cld
or
in
pop
iret
sbb
mov
adc
fstpt
inc
sbb
sub
faddl
stos
add
sub
daa
dec
dec
jmp
add
or
(bad)
pop
cmp
mov
dec
xor
outsb
or
daa
add
aas
int3
inc
sbb
cmp
ret
movsl
aaa
mov
push
int3
and
add
dec
sub
and
push
in
sub
iret
or
(bad)
aas
dec
je
cli
testl
cli
call
dec
cld
add
shl
fsubrp
fldl2e
xchg
add
int3
inc
int
(bad)
ljmp
and
fldt
add
cli
out
cs
sbb
ret
stc
gs
pop
leave
lock
cli
add
cmp
inc
cmp
sbb
lods
sbb
stc
cmp
repz
(bad)
outsb
inc
mov
imul
mov
pop
repz
cmc
or
fistpl
orb
add
cli
dec
sbb
add
shr
faddp
and
sti
sub
jmp
or
fwait
adc
or
loop
mov
in
(bad)
out
aad
adc
lahf
sti
aaa
in
iret
add
xchg
ret
xchg
sahf
ljmp
adc
push
add
test
sbb
mov
or
mov
jmp
leave
mov
or
pop
mov
mov
jbe
repz
int
stos
fisubrl
ret
xor
iret
cmpsl
addr16
cmp
add
ret
imul
sub
mov
ljmp
sbb
mov
xor
push
or
xchg
pop
dec
push
pop
(bad)
or
or
add
cmp
out
mov
int1
add
cmc
add
or
mov
stc
es
je
mov
jb
push
add
sub
inc
and
cmp
subb
inc
iret
repnz
or
and
in
adc
xor
mov
aaa
and
mov
(bad)
xor
add
and
jnp
mov
movsb
loop
data16
sbb
stc
sbb
adc
test
add
lahf
cmc
and
cld
add
stc
stc
lea
leave
adc
loope
and
dec
jecxz
ss
pop
dec
es
or
mov
add
cmp
mov
movsb
cld
cmpsb
jp
shrb
lods
js
sbb
pop
sbb
lret
adc
imul
pop
or
cmp
mov
es
mov
iret
(bad)
lock
cltd
(bad)
sti
or
fisttpl
adc
aam
scas
jle
push
les
popa
inc
cltd
shlb
loopne
sbb
push
mov
add
push
push
cli
jp
cwtl
xchg
mov
mov
faddp
and
fsubl
cld
rorb
fiadds
add
cltd
adc
xlat
jl
cmp
mov
cmp
daa
dec
cmp
pop
sub
(bad)
into
mov
mov
mov
mov
lock
movsl
mov
push
dec
add
jb
mov
add
fst
mov
push
negb
fildl
jns
sub
sub
pop
and
mov
in
stos
sub
mov
pop
sub
popf
loop
mov
jle
pop
cmc
in
sub
hlt
xor
cmp
mov
outsb
lods
shl
sub
sbb
sar
jae
lret
mov
cmp
cwtl
add
mov
sbb
bound
cmp
fcomps
sti
jae
mov
cmp
push
es
fst
jo
mov
clc
