sti
idiv
ljmp
jmp
bound
inc
sub
dec
dec
dec
dec
nop
jmp
mov
add
out
jg
push
call
mov
or
or
adc
fwait
sbb
addr16
pop
push
repz
jmp
in
repnz
loopnew
shlb
or
add
mov
das
ljmp
mov
je
cmpl
(bad)
and
aaa
push
mov
or
jne
std
push
push
push
aaa
in
mov
adc
push
adc
mov
jle
xchg
mov
sub
pop
jnp
sub
cmp
imul
ret
adc
pop
jg
(bad)
aas
mov
mov
ret
nop
push
add
push
inc
and
(bad)
in
aaa
clc
push
mov
mov
mov
cmp
fmuls
scas
cmp
movsl
mov
mov
arpl
fidivrs
cld
orl
pop
xchg
and
cmp
dec
mov
cltd
sbb
nop
push
mov
mov
mov
cmpb
fstpt
scas
stc
je
movb
adc
mov
jno
mov
mov
mov
jnp
mov
mov
cmp
mov
pusha
add
mov
cmp
aas
mov
sbb
adc
outsl
push
mov
mov
xor
sbb
add
push
mov
dec
sbb
adc
rorb
testb
out
ficomps
(bad)
jge
adc
adc
push
mov
incl
sti
std
daa
pop
pop
pop
sbb
push
and
clc
mov
nop
subl
(bad)
rcr
push
mov
inc
lcall
movw
in
sbb
fistpll
push
sbb
orl
addr16
push
dec
mov
addl
outsb
enter
aam
pop
adc
mov
clc
in
pop
jbe
and
inc
lock
dec
shrb
mov
add
jl
mov
lcall
aad
or
cmpl
add
sbb
lahf
cld
jle
fdivl
cmpsb
xchg
or
popa
pop
adc
mov
pop
ret
incl
mov
aaa
inc
js
gs
imul
and
add
add
xor
add
push
inc
add
push
fidivl
add
inc
dec
dec
dec
add
jae
(bad)
(bad)
push
cmp
inc
outsb
jae
push
je
imul
inc
outsw
add
js
loopne
mov
lahf
pop
jne
insb
jae
int
shll
add
adc
out
aam
daa
add
(bad)
aam
popa
adc
jl
loope
push
xlat
push
cld
mov
shl
pmuludq
es
ret
out
inc
jmp
rolb
jns
btr
sbb
dec
fcomps
xchg
or
mov
jb
outsb
sbb
ds
add
sarb
sub
push
dec
bound
arpl
xchg
pop
and
nop
sub
fdivrl
mov
mov
add
jl
add
in
ret
push
pop
push
test
sub
mov
clc
mov
pop
in
enter
test
xchg
xchg
add
mov
fistps
inc
or
add
add
fsubl
dec
mov
aas
mov
out
sbb
dec
sub
fsubs
stos
cmpb
or
leave
fsubl
adc
subl
mov
in
sar
in
cmp
shrl
sub
push
lds
or
dec
cltd
and
xchg
dec
leave
(bad)
sarb
cmpsl
shl
or
les
push
push
and
test
(bad)
mov
test
std
scas
sarl
pop
mov
popf
xchg
add
jbe
test
mov
lea
cmpl
push
idivb
sbb
push
jl
pop
or
push
push
lock
mov
sub
test
jne
mov
lock
push
dec
inc
and
ret
pop
xor
dec
les
pop
xchg
cltd
loopne
pop
push
cltd
fidivrs
shll
bound
lea
push
push
xor
sbb
lock
js
pop
sarl
lret
clc
daa
jns
psubb
rorb
sub
inc
inc
ret
sub
lods
jmp
push
mov
xlat
(bad)
cltd
es
cmp
loope
sti
xor
aaa
push
and
jl
and
cld
das
mov
push
jmp
daa
mov
js
adc
pop
fmull
cmp
add
popf
enter
loopne
insb
rorb
adc
mov
xor
int3
call
fwait
sbb
sahf
mov
sub
jae
inc
mov
out
stc
and
lea
jnp
(bad)
in
(bad)
and
sub
jg
push
(bad)
jno
pusha
ss
cmp
mov
sbb
sbb
cld
add
adc
or
dec
ficoms
testb
shr
sbbl
cmpsb
jbe
xchg
ret
ret
add
shl
and
push
hlt
clc
mov
test
je
jp
mov
mov
add
push
les
sub
sbb
dec
add
xchg
cmpsl
pop
pop
test
jns
shlb
addr16
test
sub
inc
cmpsb
or
jo
int3
jbe
imul
mov
inc
cwtl
jmp
or
cmp
jne
leave
mov
mov
add
xor
push
jne
pop
bound
inc
dec
mov
jmp
mov
sub
pop
pop
cwtl
in
dec
push
cmp
pop
cwtl
es
or
add
mov
push
mov
repz
decl
pop
add
sbb
jne
jle
je
lcall
les
xchg
subl
pop
pop
out
xchg
or
shrl
mov
push
enter
jp
jl
in
and
mov
jnp
push
sbb
push
cld
repnz
je
cmpl
scas
cld
mov
pop
add
jl
add
add
sbb
pop
sub
add
add
inc
je
shlb
pop
mov
clc
add
int
mov
(bad)
adc
pusha
int
jecxz
incb
dec
or
push
fmuls
scas
and
mov
das
mov
ret
ret
jecxz
jge
pop
fdivs
fadds
jne
out
in
add
pushf
insl
test
aam
fdivrs
mov
cmp
mov
jecxz
leave
mov
sbb
cwtl
lcall
aam
adc
xchg
or
hlt
pop
insb
mov
cltd
push
aad
out
inc
lahf
push
daa
dec
fcoml
or
add
xor
shlb
jle
mov
aam
aam
nop
stos
jg
imul
xchg
mov
test
xchg
enter
clc
pushf
cld
int1
(bad)
sub
dec
in
lea
in
std
mov
rclb
xor
loop
dec
addr16
fadds
rorb
movsl
push
jle
dec
mov
push
push
jnp
push
cs
or
cltd
pop
push
cmp
mov
clc
fld
xor
or
add
popa
test
pop
jmp
das
push
stos
scas
adc
call
cltd
es
inc
lret
daa
fs
cmp
les
je
daa
aam
adc
add
hlt
xor
cmp
cvtdq2ps
sbb
adc
aaa
and
nop
scas
cwtl
jl
mov
ror
enter
cmpsl
cltd
hlt
mov
movsb
stos
jge
or
mov
test
add
inc
push
jnp
arpl
setg
push
fs
pop
clc
push
loopne
and
cmp
or
aam
enter
shrl
sub
push
aad
cs
int
mov
int1
mov
inc
hlt
enter
hlt
push
hlt
push
mov
hlt
pushf
rol
sub
aas
jecxz
lods
cmp
mov
mov
mov
push
mov
rorb
sub
or
and
lock
repnz
xor
negl
fldcw
movsb
or
jnp
jge
add
rcrb
or
mov
push
call
fildl
sti
stos
add
inc
push
pop
adc
ljmp
push
(bad)
mov
mov
push
cwtl
cmc
bound
cs
in
movsb
in
imul
arpl
insl
dec
lcall
add
orl
jmp
dec
mov
lret
sub
enter
xchg
push
aam
cmp
and
enter
dec
pop
mov
add
sbb
add
adc
mov
sbb
dec
sbb
adc
out
call
mov
xchg
dec
inc
arpl
cmc
or
inc
sbb
mov
pop
sbb
(bad)
or
push
adc
lret
adc
ja
sbb
or
push
test
clc
ja
or
add
sbb
dec
or
xor
jmp
xchg
stc
