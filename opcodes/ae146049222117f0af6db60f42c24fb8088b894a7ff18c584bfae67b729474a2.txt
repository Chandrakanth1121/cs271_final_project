leave
in
ss
jae
loopne
push
jmp
bound
mov
incb
mov
sbb
add
mov
sbb
sti
lret
and
adc
ficoml
inc
and
rol
divb
fdivrl
pop
cmp
out
or
jo
incb
out
in
lods
rcl
sti
sub
int
lcall
mov
lret
fstpt
dec
push
xor
fiadds
ja
dec
add
jge
lock
test
addl
imul
cmp
or
and
pop
and
or
sub
dec
mov
push
xchg
inc
fsubrl
shrb
inc
jnp
sub
cld
add
int1
idivb
dec
xor
add
push
xor
out
or
mul
pop
pop
inc
arpl
jmp
or
daa
out
aas
jo
ds
jo
imul
sub
popa
ljmp
js
popa
call
sbb
jecxz
cmp
(bad)
insl
add
jno
or
dec
cmp
add
dec
loop
fimull
ret
mov
rcrb
xchg
shl
push
lret
fidivrs
lds
xor
movsb
inc
outsl
hlt
adc
and
sbb
push
imul
ja
push
out
mov
inc
sub
cmp
dec
repnz
lahf
test
dec
push
fistpll
bswap
shl
in
push
jno
lret
or
enter
adc
(bad)
call
pop
nop
(bad)
js
je
scas
iret
cwtl
das
adc
scas
sti
fcomps
add
pop
fidivs
lock
push
lret
loopne
roll
(bad)
shll
outsl
out
sub
fsubr
ljmp
test
add
(bad)
cwtl
pop
lret
add
addb
(bad)
push
div
das
add
xor
or
inc
adc
add
mov
dec
sbb
mov
repz
lds
lahf
frstor
idivb
pop
ljmp
fcoms
test
dec
cmp
mov
add
imul
sbb
pop
xor
ja
add
mov
mov
xchg
or
mov
jp
out
stos
insl
jle
aad
pop
adc
addr16
loopne
in
cmp
jp
jg
cmp
push
and
inc
call
mov
fs
mov
call
xor
xor
sub
mov
dec
push
inc
fwait
sbb
sbb
test
in
push
mov
jle
(bad)
out
inc
push
add
and
jecxz
data16
sub
in
fisttpl
out
cmp
sub
jno
and
negl
inc
call
xchg
loope
pop
jecxz
cmp
jmp
mov
sbb
mov
leave
outsl
pusha
incl
jbe
scas
notl
add
mov
push
inc
sub
sub
lock
push
xchg
xor
pop
xor
inc
jns
jns
push
xchg
bound
sbb
ss
pusha
cmp
and
or
jno
loopne
je
inc
jnp
(bad)
ds
push
fldenv
std
dec
mov
jl
xor
ja
imul
lock
scas
xchg
frstor
push
outsb
stos
push
jecxz
push
xor
in
sti
push
inc
(bad)
cld
pop
loope
mov
in
or
js
sub
dec
push
and
sbb
push
jnp
xor
push
test
mov
std
jmp
xchg
mov
roll
testl
(bad)
adc
enter
mov
daa
pop
jge
add
sub
adc
ret
fiadds
aaa
setge
jnp
add
push
dec
scas
movsb
adc
loopne
out
sbb
movb
inc
in
inc
jg
inc
and
sbb
out
adc
stos
in
out
sti
int
xor
inc
fstps
xchg
mov
movsb
xchg
xchg
xchg
test
imulb
push
push
pushf
mov
out
jno
orb
jne
mov
sti
pop
lret
ret
aam
mov
sbb
add
outsl
lods
push
mov
nop
sub
int
popa
testb
(bad)
mov
cs
xchg
aam
scas
sbb
push
adc
cmpsb
cmp
mov
mov
aaa
nop
sbb
push
call
sbb
scas
test
aaa
sahf
xchg
inc
inc
sub
xchg
add
bound
add
(bad)
pusha
call
js
loop
cmp
in
pop
arpl
lods
rorl
cmc
push
hlt
sbb
sbb
(bad)
int1
adc
cmc
jno
push
sub
test
inc
ficompl
imull
pop
stos
jne
andb
insb
in
inc
notl
fnstenv
addl
loopne
push
mov
push
stc
call
inc
fmull
cmp
sub
adc
in
aas
repnz
adcb
add
sbb
outsb
and
add
imul
popf
add
lahf
arpl
aaa
outsb
negl
(bad)
(bad)
(bad)
cmp
cmc
and
rcr
leave
inc
adc
ljmp
mov
inc
sbb
enter
(bad)
int1
mov
aad
mov
std
nop
fstps
pop
shlb
(bad)
lock
xlat
mov
mov
add
mov
mov
lcall
cmp
scas
jecxz
adc
int
std
and
test
loopne
xchg
cli
or
pop
or
mov
jbe
fsts
outsl
jge
loopne
scas
outsl
popf
add
or
push
(bad)
mov
mov
jp
jo
push
int1
sbb
stc
in
fwait
jecxz
mov
add
mov
cmpsb
leave
ds
xor
(bad)
in
fwait
rorb
and
outsb
into
or
std
int3
pop
push
outsb
es
or
and
(bad)
dec
dec
mov
(bad)
fistpl
fldt
inc
std
add
xor
pop
sbb
mov
test
sbb
pop
das
inc
mov
shrb
xor
sub
sub
pop
push
(bad)
push
pop
inc
and
out
inc
insl
in
in
sbb
arpl
adc
aas
jecxz
inc
sub
js
and
dec
out
ljmp
in
pop
notb
xlat
sbb
stos
mov
cmpsb
jmp
rol
dec
aad
iret
xor
dec
push
cli
dec
fistl
(bad)
in
pop
js
dec
cmp
inc
cmp
cmp
test
sub
inc
call
(bad)
bound
testb
dec
js
add
loopne
xchg
cltd
xchg
jecxz
jbe
or
and
xchg
mov
int1
filds
fidivs
outsb
aas
lret
mov
(bad)
adc
sahf
cmp
dec
out
mov
stc
rcrb
dec
into
sti
xor
cmp
out
adc
ret
call
aas
xchg
pop
or
xor
sub
mov
cwtl
gs
push
xchg
lcall
aas
in
xor
inc
cmp
dec
in
adc
adc
mov
lret
xor
or
push
add
mov
or
jle
and
idivb
loope
(bad)
mov
sbb
sti
dec
aaa
hlt
sbb
mov
lret
fnstenv
cmp
outsb
mov
jecxz
fsts
mov
jns
pop
movsb
add
cmp
jl
push
pop
inc
pop
ret
xchg
dec
xchg
xchg
or
std
add
mov
jle
out
fildll
out
push
push
leave
lods
inc
fbstp
fmuls
cs
loopne
sbb
add
inc
sbb
fwait
out
add
push
fidivs
fsub
cmp
inc
cmp
dec
imul
adc
scas
ljmp
in
xchg
incb
cmp
add
xor
sub
push
jno
pusha
sbb
das
cld
mul
je
ss
aad
pop
jne
inc
lods
stc
push
push
mov
cwtl
into
ss
inc
sbb
xor
dec
nop
add
insb
repnz
lcall
jae
jecxz
jp
ljmp
imul
jg
jecxz
sub
adc
sbb
push
xor
decb
mov
push
lret
loop
inc
pop
mov
push
or
add
jmp
xor
adc
scas
bound
popa
ds
jo
jmp
fs
cmp
call
leave
add
ljmp
jbe
xor
insl
loope
loopne
adc
notl
push
jg
cmp
inc
xchg
jmp
cmp
incl
and
xchg
sbb
sar
bound
and
insb
cmp
or
mov
in
(bad)
popa
and
xor
push
ret
lea
pop
adc
fisubrl
(bad)
out
cmp
xchg
jnp
sbb
or
pop
outsb
pushf
xor
shlb
cmp
add
