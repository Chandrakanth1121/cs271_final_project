aad
jne
or
mov
sub
add
push
jns
insl
jmp
insb
notb
jl
daa
xor
mov
rclb
rcrl
dec
add
rorl
(bad)
jle
mov
out
dec
addb
negl
cs
call
cmp
adcl
sbb
shll
jnp
roll
mov
xor
mov
sbb
clc
push
mov
lcall
or
xor
sub
fwait
mov
testl
mov
sbb
adc
movsl
push
xchg
jmp
mov
mov
inc
loopne
insl
es
ja
ljmp
add
inc
add
or
cld
xchg
push
in
iret
mov
jecxz
pop
cwtl
jne
addl
lock
arpl
lahf
jmp
mov
dec
and
pop
xchg
lret
push
enter
adc
es
cmpsl
add
xchg
pop
imul
lret
add
adc
and
xor
lahf
(bad)
sbb
test
(bad)
sbb
or
adc
out
mov
jno
fdivrp
fstpt
pop
and
sbb
inc
inc
sbb
pop
pop
cmpsl
orl
and
xchg
subb
lods
adc
pop
pop
adc
and
push
push
mov
cmc
jg
outsb
iret
cmp
cltd
ret
adc
add
or
sbb
xchg
add
xchg
fsubrs
fucomp
in
outsl
add
push
sbb
pop
mov
test
mov
or
dec
movsl
cltd
cmc
mov
(bad)
cmp
fst
pop
xlat
sub
or
popa
cmpsb
pop
inc
jne
sbb
shll
arpl
imul
aad
ret
lds
mov
lret
push
ljmp
sub
fnstenv
incl
lret
push
sbb
cs
push
add
jmp
ret
jnp
in
mov
lea
and
xchg
mov
jns
adc
fwait
jecxz
sti
cmp
cmc
mov
shl
sub
outsb
add
push
xchg
shr
or
xchg
arpl
pop
jb
mov
adc
daa
in
arpl
cs
push
add
dec
movd
jmp
xchg
sub
xchg
addr16
xchg
(bad)
fs
ja
leave
sub
pop
and
xorb
sbb
and
cli
lods
add
sub
xchg
sti
insl
int1
mov
int3
sbb
sbb
leave
xor
and
cmp
or
push
cmp
fwait
pop
stos
xchg
and
jecxz
cmp
lods
lahf
imul
sahf
push
mov
cmp
adc
fists
cmp
xor
mov
push
rolb
shll
push
jo
add
inc
jmp
lahf
call
jne
and
xor
int1
loop
lods
repz
sbb
push
fcomps
out
adc
scas
adc
hlt
loopne
mov
daa
xchg
imul
pop
(bad)
into
and
negl
fst
pusha
out
and
std
outsl
sub
xlat
sbb
aas
add
xchg
popw
pop
lahf
int1
mov
lcall
mov
sbb
push
cmpsl
lahf
mov
jg
hlt
lea
fs
pusha
inc
popa
push
(bad)
or
cmpsb
cltd
inc
cmp
hlt
mov
mov
inc
mov
movsl
xor
shr
test
push
aad
sarb
out
adc
adc
(bad)
mov
mov
mov
sbbl
test
cmovne
xor
fildl
andl
pop
pop
(bad)
popf
enter
mov
mov
jmp
shrl
and
jo
enter
cmpsl
mov
mov
pushf
das
imul
xchg
sbb
and
add
mov
jecxz
shll
xchg
test
mov
test
imul
out
dec
adc
lret
sub
inc
test
aas
dec
pop
outsb
jge
xchg
mov
cmp
jecxz
fimull
aam
add
test
movb
in
ror
adc
jne
cmp
shr
lods
in
int1
push
pop
mov
xchg
xchg
add
or
sub
sub
push
pop
pop
sahf
adc
(bad)
inc
out
lahf
lcall
imul
rolb
fdiv
cmc
xchg
push
mov
jp
adc
xor
(bad)
std
cli
dec
sbb
clc
sbb
add
test
pushw
in
add
jge
and
loop,pt
lahf
outsb
jbe
jns
pop
aaa
xchg
bound
sbb
cmp
or
fmuls
loop
aas
xor
lahf
inc
ffreep
hlt
ds
ficoms
or
push
popf
arpl
pmovmskb
sbb
add
mov
mov
rcrl
arpl
in
pop
into
adc
gs
aad
add
jo
add
jb
scas
or
shlb
shlb
cmpsl
lds
xor
lds
ret
call
or
inc
pushf
test
or
and
cld
and
cmpsl
loope
push
rclb
jl
xchg
cmpsb
outsl
sbb
xchg
sbb
sbb
shll
dec
mov
mov
adc
jg
mov
orb
cmp
add
sahf
(bad)
cwtl
and
test
pop
aad
add
dec
das
push
lret
adc
fcomp
je
popa
pop
repnz
or
into
jnp
sahf
adc
std
fildll
loopne
pop
outsb
xchg
in
dec
mov
loop
dec
jno
jns
jb
cmp
addr16
aad
cmp
ss
dec
cmp
(bad)
and
fwait
cld
xor
push
cld
aas
adc
out
mov
push
enter
add
sub
and
xchg
ror
clc
test
lcall
cmp
je
pop
loopne
addr16
test
jmp
iret
jno
mov
adc
sbb
outsb
jl
mov
into
pop
and
and
mov
push
enter
mov
out
daa
sbb
popf
das
jle
cli
and
leave
ret
add
clc
pop
sbb
cmp
push
sbb
outsb
insl
out
add
sbb
add
push
roll
jg
aas
sub
cli
xor
insb
rcrb
mov
inc
inc
mov
jns
setp
movsb
and
xchg
out
jbe
int1
aad
pop
out
or
lods
dec
mov
cmpsl
xchg
(bad)
sbb
outsb
aaa
sub
xlat
dec
dec
and
imul
in
add
stos
mov
cmpsb
mov
imul
sub
movsb
movsb
pop
fstpt
cmp
mov
mov
pmovmskb
lcall
roll
ja
sub
jae
xor
lret
imul
mov
adc
lds
cld
or
mov
add
dec
pop
in
rcll
or
and
pop
outsl
ficomps
cli
or
into
xchg
lcall
(bad)
fnstsw
inc
loop
ret
fidivl
add
mov
mov
jbe
in
repz
out
mov
xor
push
out
ljmp
(bad)
dec
add
daa
mov
fisubs
sub
or
int
test
test
xor
outsb
push
dec
fistpl
pop
stos
jg
sbb
scas
lock
int
push
adc
pop
xor
or
sbbl
pop
out
cmpsb
dec
(bad)
movsl
rorl
repnz
cmpsl
inc
cmp
adc
hlt
into
cli
das
jne
inc
pop
in
sarl
rcr
scas
pop
addb
or
into
std
popf
inc
lods
sarl
mov
std
sub
rcrb
fldcw
(bad)
shlb
xorb
add
das
jge
daa
lcall
push
and
iret
pop
ljmp
in
fwait
jae
test
jo
loope
lcall
sbb
test
xor
push
mov
xor
pusha
hlt
cmc
and
cwtl
mov
outsb
pop
js
add
push
jg
mov
movsb
test
syscall
pusha
lahf
pop
jo
xchg
mov
scas
(bad)
jle
lcall
pop
enter
pusha
mov
es
add
ds
jb
cmp
pushf
push
js
lcall
ret
int1
filds
pop
jle
pop
cmp
inc
adc
arpl
and
test
mov
add
and
loop
mov
dec
clc
pop
jbe
and
xchg
in
mov
xchg
xchg
loop
inc
sahf
int
mov
sbb
inc
mov
mov
jmp
inc
or
test
mov
adc
lcall
movsb
fnstenv
mov
and
mov
push
ret
aad
pop
rcrb
jno
jge
add
int3
jp
fwait
push
sbb
inc
add
ret
add
add
nop
iret
pop
hlt
test
push
jns
sahf
jmp
ljmp
