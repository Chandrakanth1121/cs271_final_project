shlb
add
add
add
add
add
add
add
test
add
add
add
push
loopne
add
clc
inc
or
pop
out
outsb
dec
mov
outsb
push
test
scas
jp
add
(bad)
xlat
pop
imul
dec
dec
in
ljmp
lcall
mov
int
outsl
sbb
es
shrl
movsb
mov
cltd
pop
jae
mov
push
sahf
lcall
push
sbb
repnz
cmp
test
inc
jns
mov
mov
enter
movsl
add
int1
dec
add
in
test
dec
jbe
push
imul
jb
mov
lds
cmp
xor
cli
inc
adc
lods
nop
push
jb
xlat
js
or
mov
sub
lods
outsl
sti
xor
std
jnp
gs
call
push
in
das
push
inc
ud1
jg
pop
movsl
aam
sti
push
and
(bad)
xchg
lahf
xchg
xlat
add
and
test
mov
mulb
jle
push
and
imul
cmc
movsl
push
push
jno
fdivrs
das
xor
lcall
mov
sub
pop
and
movsl
dec
js
or
imul
dec
leave
jecxz
mov
insb
adc
arpl
adc
dec
cld
adc
testl
pop
and
cmpsl
mov
imul
push
dec
stc
andb
nop
ret
mov
cmpsl
fists
movsl
stc
js
or
js
dec
cmpsl
pop
mov
xor
sbb
jnp
dec
test
sbb
or
mov
ds
sbb
inc
or
jnp
mov
pop
sahf
(bad)
mov
push
in
(bad)
out
imul
(bad)
iret
cmc
mov
jne
or
lods
fildll
fisttps
sub
dec
cltd
in
fst
and
ret
pop
int
int3
dec
fdivrl
inc
jno
pop
lea
mov
int3
cs
xchg
lods
mov
insb
mov
and
and
(bad)
cld
dec
jns
jge
in
lds
outsb
sub
dec
pop
in
fidivl
arpl
push
and
cmp
push
std
daa
pop
mov
push
mov
in
daa
and
stos
push
cltd
and
rorl
or
mov
aad
test
roll
and
cld
pop
sti
inc
sub
int3
cmc
inc
insb
das
jno
mov
insb
inc
fwait
aam
adc
out
test
fdivs
push
pop
adc
mov
jb
les
mov
ret
aam
(bad)
loopne
push
pop
or
push
push
rolb
nop
lea
push
push
scas
pop
xchg
pop
dec
or
and
push
mov
fldcw
mov
pop
adc
cmpsl
adcl
push
aad
stos
or
ss
int3
in
rclb
pop
xchg
orl
jle
pop
pusha
clc
mov
int3
sarb
sub
shll
loope
imul
int1
cltd
std
out
sbb
lods
or
dec
leave
dec
out
setle
inc
dec
xchg
jno
out
stos
and
and
dec
nop
pushf
divl
push
add
push
ret
push
mov
xchg
add
es
mov
jo
pop
add
sub
add
mov
fcomip
(bad)
push
div
sub
pop
int
daa
inc
jne
popa
(bad)
out
mov
jle
pop
inc
xchg
leave
out
out
add
jo
(bad)
jmp
xlat
stos
rorb
push
mov
mov
std
cld
jno
ret
ja
jbe
pop
push
shlb
movsb
loopne
jmp
sarb
jbe
cli
iret
sub
popa
cmpsl
outsb
dec
bound
mov
ffree
ss
dec
insl
inc
cmc
rol
pop
aas
out
xchg
mov
call
dec
outsb
mov
mov
loopne
mov
adc
mov
push
jno
lcall
adc
addr16
push
xchg
es
mov
ss
mov
ret
mul
adc
inc
cmp
inc
cmp
lahf
cltd
ret
mov
push
sbb
push
aaa
into
and
push
pop
mov
xchg
dec
iret
out
add
orb
inc
ret
out
add
ret
mov
mov
jb
subl
xor
and
loope
scas
lahf
out
repnz
or
insl
fs
sub
push
mov
ret
imul
adc
shrb
(bad)
xchg
push
and
pushf
dec
bound
ja
push
je
dec
dec
test
lods
add
(bad)
int
lea
cmp
imul
mov
push
mov
mov
adc
xchg
dec
mov
adc
lock
inc
mov
addr16
test
lcall
fbstp
mov
ret
mov
inc
ret
jp
out
add
sub
lea
lret
cmp
jle
scas
std
cmpsb
mov
addr16
jmp
das
sbb
rolb
stos
push
xor
cli
fdivs
mov
or
sahf
rcl
or
jg
push
pop
lods
fidivrl
movsb
add
cli
pop
sbb
in
ja
call
pop
mov
xor
fisttps
ljmp
mulb
mov
adc
pop
mov
xchg
iret
mov
adc
movsb
add
fidivs
fimuls
jle
xor
mov
(bad)
cmpsb
push
int
stos
cli
mov
dec
neg
(bad)
rolb
and
mov
faddl
in
inc
pusha
inc
int
daa
and
(bad)
xchg
pusha
inc
scas
ljmp
out
and
movsl
mov
popa
lds
aaa
popf
mov
pop
inc
mov
push
inc
rcl
mov
jae
shrl
out
ja
jns
lock
dec
push
cmp
and
inc
int1
iret
sub
lret
cltd
xchg
push
aad
lahf
cmc
cltd
dec
testl
es
call
aad
std
xor
mov
and
dec
and
(bad)
clc
cmp
stc
clc
pushf
jg
hlt
(bad)
aad
xchg
push
xchg
mov
mov
test
les
mov
dec
mov
in
in
shlb
mov
sub
pusha
in
cmp
jne
in
inc
sbb
repnz
pushf
in
mov
push
mov
xorl
dec
leave
arpl
std
(bad)
mov
fisubs
aas
xchg
adc
or
aad
out
or
out
int
xchg
int
xchg
out
sbb
inc
incb
pop
imul
jbe
bound
stos
cmpsb
adc
pop
lcall
jge
(bad)
lret
(bad)
mov
repnz
lea
xchg
pop
mov
mov
lcall
mov
pop
xor
aad
add
sbb
ficomps
mov
cwtl
mov
(bad)
sbb
inc
rcll
xor
adc
sub
adc
mov
cmp
xor
aam
cmp
cmp
xor
lret
(bad)
xchg
fildl
out
adcb
mov
je
and
in
inc
dec
add
fildl
mov
cmp
testl
jle
sub
pop
add
clc
push
fstpt
bound
dec
outsb
and
mov
dec
lcall
lcall
xor
(bad)
sbb
xchg
xor
jecxz
cmp
in
dec
sub
jecxz
add
int1
adc
daa
je
leave
nop
and
sarb
or
popf
cmpsb
(bad)
cmp
outsb
lods
xchg
mov
push
mov
xchg
lock
addr16
pop
popf
scas
cmpsb
jmp
xchg
pop
pop
enter
cmc
insb
sub
dec
xor
pop
jo
or
jle
mov
mov
sub
and
dec
dec
xchg
push
into
rcl
inc
jnp
jmp
pop
xor
cmp
dec
imul
lret
or
out
lock
sbb
sub
ret
jl
add
stos
int3
sbb
out
into
repz
dec
mov
sub
insl
int1
hlt
roll
lods
add
cwtl
adc
movsb
dec
inc
sub
pop
int3
dec
cmp
shr
imul
and
insl
pop
adc
or
adc
cmpsb
es
mov
push
je
push
cmpsb
int
fs
mov
jae
jg
pop
or
scas
stos
inc
dec
pusha
cs
jl
lock
add
jno
incb
fsts
mov
sarl
jmp
ja
push
sbb
(bad)
xchg
cmc
in
movlps
xchg
out
