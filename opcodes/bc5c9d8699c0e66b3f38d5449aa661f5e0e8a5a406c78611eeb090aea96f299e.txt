xor
xor
add
pop
and
leave
clc
imul
and
mov
mov
add
add
(bad)
(bad)
mov
cs
sub
mov
xor
fdivrs
leave
movl
sbb
int3
out
cmpl
movslq
add
(bad)
(bad)
jns
push
rex.rb
push
(bad)
mov
mov
test
je
mov
jg
call
movsb
mov
jl
sbb
adc
out
xchg
ret
(bad)
in
call
jge
sbbl
je
xor
xor
sub
nop
mov
mov
pop
movzwl
(bad)
cli
or
add
addl
(bad)
jbe
nop
clc
sbb
test
setne
jmp
adc
shr
jns
insl
mov
(bad)
mov
rex.r
rex
rex.wrx
lock
mov
jns
xchg
ja
(bad)
(bad)
cmp
(bad)
outsb
push
xchg
lea
outsb
lock
add
mov
clc
sub
rex.w
rex.wr
fwait
mov
call
sbb
mov
cmovno
push
push
stos
and
jnp
or
sbb
adc
adc
jo
jmp
outsl
cmp
je
add
(bad)
mov
lods
clc
lock
rex.w
rex.w
test
cmp
(bad)
cmp
rex.wrx
adc
out
clc
imul
(bad)
jg
fcoml
(bad)
test
(bad)
add
fdiv
ret
or
es
call
mov
mov
adc
adc
(bad)
in
std
sub
call
shl
movabs
sbb
shl
cmp
call
and
(bad)
out
jle
test
jle
or
fisttpl
or
call
fstpl
jle
mov
call
lock
sbb
sbb
rcll
(bad)
clc
fbstp
(bad)
out
(bad)
clc
std
loope
movl
cmpsb
call
in
mov
loopne
int3
add
mov
mov
(bad)
rex.wxb
cs
scas
sub
(bad)
mov
sbb
sarl
shlb
and
pop
pop
pop
sub
lock
fildll
test
pop
out
(bad)
or
mov
(bad)
fldz
sar
push
or
out
imul
cmp
xchg
jmp
xchg
adc
test
outsl
push
imul
cmpsb
leave
mov
fbld
cmp
(bad)
(bad)
sub
xchg
mov
jmp
sbb
jg
in
add
xchg
lret
add
movsl
add
sbb
rex.w
sbb
leave
cld
cs
add
or
(bad)
(bad)
cli
(bad)
outsl
int
cmp
push
and
sub
out
out
mov
andb
outsl
rcl
cs
mov
xor
call
add
mov
pop
hlt
cmp
mov
rex.rb
(bad)
(bad)
fisubrs
rex
and
repnz
rcll
scas
xor
je
jb
sub
jrcxz
or
add
lret
mov
(bad)
pop
xchg
repnz
add
rex.x
lcall
add
add
rex.w
data16
lock
push
(bad)
ja
pop
sarl
jl
nop
rex.wx
pop
ret
gs
ds
push
pop
(bad)
mov
mov
or
(bad)
jno
in
cmp
call
jle
add
jg
lods
and
movsxd
pop
ffree
ret
(bad)
(bad)
adc
andl
cmp
test
add
xchg
mov
pop
or
mov
pop
ret
int3
call
fsubrs
jle
(bad)
loopne
call
(bad)
test
ja
pop
xchg
xor
test
add
adc
sahf
lahf
cmpsb
jp
(bad)
xchg
lock
in
lods
call
mov
test
mov
(bad)
sub
mov
mul
push
rorb
mov
rex.wrb
mov
loopne
enter
out
(bad)
subl
rex.wrb
divl
movsb
xor
cltd
divl
or
imul
(bad)
(bad)
jns
mov
jo
(bad)
ja
(bad)
sbb
sub
int
movsxd
mov
pop
div
(bad)
and
shl
(bad)
movsl
shlb
ds
jnp
xchg
(bad)
nop
sub
jrcxz
fnstsw
mov
mov
adc
sbb
sarb
lea
rcl
popf
(bad)
(bad)
push
nop
sahf
jge
jnp
rex.rxb
(bad)
jno
in
fisubl
or
xlat
fcoml
test
stos
xchg
(bad)
fdivrl
rex.rx
rex.wrx
es
movsl
jae
out
(bad)
sbb
xor
and
in
cmp
repnz
rex.wrb
add
stc
insl
jg
(bad)
jnp
lock
sbb
cmpsl
popf
mov
test
je
fcomps
xlat
push
int3
xchg
(bad)
jmp
out
cltd
and
ficompl
sbb
adc
sub
mov
cli
xor
fistps
stos
xor
es
jo
xor
shlb
rex.wr
jbe
jge
lea
scas
call
sbb
adc
cmp
test
xchg
add
{rex2
fidivrl
cmp
rex.xb
push
cmp
lahf
push
sub
jl
add
test
std
ja
(bad)
clc
ja
adc
mov
sub
jmp
pop
rex.wx
imul
nop
add
pushf
or
or
bnd
push
add
std
mov
cmp
andb
jmp
rex.wrx
add
mov
add
loope
add
imul
cmp
mov
rex
(bad)
sub
rex
loop
fnstcw
scas
in
fnstcw
rorl
rex
fcoms
xor
cmp
repnz
cmpsl
loope
lea
push
(bad)
jb
in
rex.w
jb
iret
rex.wrxb
cmp
push
and
and
xor
int
out
test
je
movsl
jb
rex.wr
outsl
mov
mov
pop
ret
pop
cmp
ficoml
xor
rex.rx
es
push
jb
in
fucomp
push
mov
stc
jo,pn
lods
in
pop
mov
insb
ror
mov
mov
jl
fisubl
ret
rex.wrx
mov
cs
(bad)
push
rex.rx
rex.rx
ds
loopne
adc
cmp
jmp
jle
cld
jmp
or
xor
(bad)
or
stc
in
es
movsb
jb
(bad)
adc
mov
rex.wxb
movabs
(bad)
adc
(bad)
pop
xchg
test
sub
mov
outsl
test
mov
movsl
(bad)
(bad)
adc
add
(bad)
sarl
sub
(bad)
cmp
add
push
ficoml
movsb
(bad)
lods
push
(bad)
(bad)
jns
cwtl
(bad)
add
movabs
leave
xor
mov
(bad)
or
lods
or
scas
(bad)
(bad)
mov
jns
push
mov
add
ss
sbb
nop
rex.wb
jo
fsubr
and
(bad)
rcll
xchg
mov
rex.wb
sub
add
cmp
cmp
rex.rx
sub
and
(bad)
cltd
xchg
lock
(bad)
insl
(bad)
and
(bad)
ret
out
rex.w
adc
adc
lret
jnp
and
adc
cmp
(bad)
js
bnd
and
(bad)
jno
(bad)
mov
fadds
(bad)
mov
mov
(bad)
(bad)
xchg
(bad)
cmp
rex.wb
adc
(bad)
(bad)
sbb
mov
test
fs
imul
jmp
rcll
fimull
mov
fistpll
jne
lea
hlt
jb
js
movhps
shlw
mov
leave
cmp
mov
out
rex.xb
push
sti
xchg
data16
movsb
in
adc
movabs
rex.wrx
xchg
andl
out
cwtl
mov
xchg
test
rex.wrxb
rex.wxb
imul
movabs
addl
jns
clc
cmp
add
cmp
sub
divb
sbb
repnz
jnp
lret
rex.wrx
mov
ret
rex
(bad)
or
rex.rxb
and
(bad)
rex.wrx
sbb
(bad)
sbb
movabs
cmp
cmc
cmp
mov
(bad)
lret
iret
sbb
(bad)
jne
jmp
adc
hlt
jmp
fs
je
xor
or
xchg
rex.wb
rex.x
out
jb
xor
(bad)
sub
loop
jb
xchg
(bad)
lods
in
mov
adcb
jb
xchg
cmp
int1
adc
fcoms
(bad)
xor
ss
(bad)
mov
(bad)
and
fcomps
imul
rex.rb
xor
jne
(bad)
add
mov
movl
pop
cmc
xor
test
test
sti
lcall
(bad)
divl
sbb
loopne
ret
xchg
ret
or
sbbb
in
repnz
leave
sbb
(bad)
add
loope
roll
clc
clc
xchg
lret
rolb
xlat
(bad)
xor
in
rex
repnz
rex.x
orl
rex.x
push
ds
jb
jl
add
add
loop
cmpsl
sub
pushf
jae
mov
adc
clc
add
xor
rcrl
mov
fisubl
enter
fs
cmp
js
xlat
jo
notl
jmp
jbe
mov
jp
(bad)
(bad)
xlat
jne
(bad)
