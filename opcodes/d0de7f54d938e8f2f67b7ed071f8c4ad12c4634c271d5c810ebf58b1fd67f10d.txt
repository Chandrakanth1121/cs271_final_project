xor
xor
add
pop
and
jns
es
(bad)
je
add
xchg
mov
add
add
ret
data16
sub
mov
xor
fdivrs
leave
movl
sbb
int3
(bad)
cmpw
jne
movslq
add
(bad)
(bad)
jns
push
rex.rb
push
(bad)
mov
mov
test
je
mov
jg
call
mov
xor
fmuls
out
xchg
ret
(bad)
in
xlat
test
sbbl
je
xor
xor
sub
nop
mov
mov
pop
movzwl
(bad)
cli
or
add
addl
(bad)
jbe
nop
clc
sbb
test
setne
jmp
adc
shr
jns
insl
mov
(bad)
mov
rex.r
rex
rex.wrx
lock
mov
jns
xchg
ja
(bad)
(bad)
cmp
(bad)
rex.wrx
xchg
lea
outsb
lock
add
mov
clc
sub
rex.w
rex.wr
fwait
mov
call
sbb
mov
cmovno
push
push
stos
and
jnp
or
sbb
adc
adc
jo
jmp
outsl
cmp
je
add
(bad)
mov
lods
clc
lock
rex.w
rex.w
test
cmp
(bad)
cmp
rex.wrx
adc
out
clc
imul
(bad)
jg
fcoml
(bad)
test
(bad)
add
fdiv
ret
or
es
call
enter
xorl
add
std
sub
call
shl
mov
mov
rex.wrb
sbb
shl
cmp
call
and
(bad)
out
jle
test
jle
or
fisttpl
or
call
fstpl
jle
mov
call
lock
sbb
sbb
rcll
(bad)
clc
fbstp
(bad)
out
(bad)
clc
std
loope
movl
cmpsb
call
(bad)
rex.wxb
loopne
int3
add
mov
mov
(bad)
rex.wxb
add
sbb
scas
sub
(bad)
mov
sbb
sarl
shlb
and
pop
pop
pop
sub
lock
fildll
test
pop
out
(bad)
or
mov
(bad)
fldz
sar
push
or
out
jns
(bad)
jg
jbe
mov
rex
fwait
rolb
outsl
mov
sti
cmpsl
add
outsl
push
imul
cmpsb
leave
mov
fbld
cmp
(bad)
(bad)
sub
xchg
mov
jmp
sub
jg
rcrl
(bad)
rex.r
nop
ret
xchg
lret
add
movsl
add
sbb
rex.w
sbb
leave
cld
cs
add
or
(bad)
(bad)
cli
(bad)
outsl
int
cmp
push
and
sub
out
notb
clc
mov
rcl
ds
mov
xor
call
add
mov
pop
hlt
cmp
xchg
movl
data16
lods
or
(bad)
push
loopne
push
and
repnz
rcll
scas
xor
je
jb
sub
jrcxz
or
add
rcll
repnz
add
rex.x
lcall
add
add
rex.w
data16
lock
push
(bad)
ja
pop
sarl
jl
nop
rex.wx
pop
ret
gs
ds
push
pop
(bad)
xchg
(bad)
test
or
(bad)
add
in
rex.rb
rex.wrxb
pop
or
cwtl
sub
sbb
add
jg
lods
and
movsxd
clc
out
loop
(bad)
cli
(bad)
adc
addl
(bad)
cmp
test
rex.wxb
lods
add
popf
xorb
call
in
{rex2
rex.w
(bad)
loopne
call
(bad)
test
cmp
add
mov
adc
shr
xchg
nop
cwtl
jns
cmp
add
pop
adc
mov
(bad)
scas
imul
mul
push
rorb
mov
loopne
jg
movabs
ja
subl
rex.wrb
jnp
cmp
or
movzwl
subl
xchg
sbb
xor
sbb
adc
movsxd
mov
pop
div
(bad)
and
jo
(bad)
push
loopne
xchg
push
mov
xchg
(bad)
nop
rex.w
add
mov
(bad)
movsl
jg
mov
mov
sub
enter
mov
jmp
add
push
nop
sahf
jge
shll
cmp
jns
jbe
in
(bad)
and
lret
(bad)
push
xor
fsubrl
ja
xor
es
movsl
jae
out
(bad)
sbb
xor
and
loopne
cmp
repnz
rex.wrb
jmp
xchg
(bad)
push
push
(bad)
je
(bad)
push
ret
jle
shll
mov
mov
sbb
xchg
mov
rex.wx
cwtl
int3
out
sub
lret
sub
movsxd
rex.wr
lea
ret
(bad)
mov
mov
in
mov
xor
mov
(bad)
in
(bad)
(bad)
xor
adcb
cmp
fwait
cmpsl
jno
shr
jmp
(bad)
jle
cmpb
out
push
add
adc
jmp
(bad)
cwtl
rex
rex.wb
jno
out
jns
mov
ds
mov
int
(bad)
rex.wrb
rex.rx
pop
movsb
xchg
mul
in
movabs
mov
repnz
push
add
sbb
cmp
add
(bad)
mov
cmp
jb
(bad)
(bad)
adcl
or
(bad)
popf
add
imul
cmp
loop
adc
fcoms
sub
cmp
mov
xchg
push
jb
xchg
xchg
ret
jo
lea
mov
cmp
and
xlat
xor
jg
push
jge
test
fists
outsl
rol
rex.r
sub
scas
insl
mov
and
sbb
lret
leave
or
mov
mov
movabs
pop
xor
rex.rb
in
jp
push
push
and
jl
and
(bad)
sub
rcl
rex
ss
mov
sti
mov
cmp
cld
jmp
jge
shll
mov
popf
in
int3
xchg
out
cmpsl
(bad)
add
imul
fcoms
leave
in
(bad)
movsl
enter
loope
out
call
xchg
jle
and
nop
add
addl
fmull
outsl
(bad)
add
lods
mov
rex.r
ss
xchg
adc
(bad)
repnz
fisubrs
push
rex.wrb
or
pop
xor
or
outsb
sahf
mov
scas
imul
pushf
or
jge
add
xchg
jb
(bad)
xor
jno
gs
xchg
mov
xchg
data16
rex.wb
repnz
fisubrl
xchg
sub
nop
adc
sahf
loop
outsl
sbb
ret
rex.xb
sbb
ja
movabs
adc
vandnpd
rex
push
mov
ret
sub
xor
(bad)
nop
mov
mov
(bad)
es
(bad)
adc
fldt
movabs
leave
and
jmp
call
or
mov
sti
clc
out
cmp
lea
rex.wrx
fcompl
push
bsf
sbb
pop
rex.w
clc
outsl
cmp
rex
adc
and
test
sbb
lea
cs
(bad)
xchg
cmp
cmp
ss
movsb
push
lret
lock
jnp
xchg
test
out
loopne
in
and
or
rex.wrb
(bad)
fisubrs
cmp
mov
cmp
jrcxz
sub
mov
add
add
(bad)
mov
(bad)
sub
in
cmp
jbe
int
jmp
lret
rex.wrx
push
movsxd
lahf
adc
adc
lods
sub
(bad)
(bad)
(bad)
push
xchg
or
sub
rex.wrx
(bad)
sbb
ret
(bad)
fsubrs
cmp
out
mov
push
sbb
rex.wrb
jno
lret
(bad)
cmp
add
adc
jmp
mov
or
je
sbb
fwait
jb
(bad)
sbb
sub
sbb
cltd
xchg
and
jb
sahf
adc
rex.rb
pushf
nop
push
test
jb
xchg
rex.x
(bad)
pop
mov
rcr
(bad)
sub
sbb
rex.rb
(bad)
in
(bad)
and
adcb
repnz
movhps
add
cmc
mov
add
cmp
xor
test
vsubsd
test
sti
push
cwtl
and
xor
lea
ret
rex.wrx
adc
rcrb
jns
pushf
rex.w
jp
(bad)
or
outsl
and
push
ss
cmp
add
rex.rb
xor
repz
jo
pop
(bad)
cmp
mov
(bad)
mov
pop
and
pop
repnz
cmp
xor
jb
xchg
leave
mov
nop
add
clc
pop
in
rex.rx
sub
out
movsl
and
cmp
(bad)
sbb
nop
xchg
mov
(bad)
jmp
pop
loop
rcrb
rcll
rex.rxb
es
data16
xor
push
subb
sub
sub
rex
cmc
pop
sub
in
mov
cmc
sti
sub
sbb
or
and
(bad)
sti
mov
xchg
push
push
pop
jns
xor
cmp
rex
xchg
pop
sub
(bad)
out
add
add
mov
or
shll
pop
