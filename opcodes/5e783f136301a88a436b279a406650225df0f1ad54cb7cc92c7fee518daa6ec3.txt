sti
idiv
push
rol
push
mov
call
mov
mov
pop
ret
sub
sub
mov
das
sub
mov
jmp
out
test
mov
inc
test
je
sbb
mov
add
out
(bad)
call
xor
xor
add
test
je
mov
dec
es
je
and
fcmovnu
add
jo
push
je
jmp
lea
sub
ret
or
incl
out
std
cld
add
add
loopne
outsb
lock
(bad)
cmp
push
movl
or
push
imul
std
fildll
mov
add
dec
jne
push
es
add
mov
pop
lea
push
lea
rcr
push
or
ret
movsb
dec
cmp
pop
add
idiv
aaa
lea
add
sti
jmp
movb
inc
push
aad
pusha
jmp
mov
pop
push
sbb
or
cld
add
cmp
cmp
hlt
push
xor
popf
std
add
mov
sub
je
clc
addb
negl
mov
in
push
sub
lcall
push
lea
mov
sbb
in
pop
dec
pop
pop
sub
and
xchg
or
or
push
inc
fisubrl
or
xchg
clc
xor
rorb
pop
push
hlt
sbb
roll
add
push
push
jle
push
push
shlb
test
sbb
(bad)
xor
sbb
mov
mov
adc
inc
(bad)
rcl
pop
(bad)
jns
mov
or
sbb
inc
xchg
insb
gs
inc
add
mov
das
psubusb
add
sbb
adc
or
pop
outsl
xchg
lea
in
sbb
fidivs
mov
sbb
sbb
push
ret
loope
fdivl
cmpl
test
cltd
pop
jae
mov
jno
mov
out
clc
mov
push
push
push
cs
adc
in
ja
dec
fcomi
push
add
bound
mov
dec
rorl
hlt
add
or
lods
data16
add
or
bnd
loopne
add
cmp
rorb
push
imul
pop
or
hlt
mov
pop
xorl
call
movl
jbe
add
out
pop
in
pop
lcall
(bad)
xor
sub
test
jne
xor
test
je
loopne
(bad)
cmpb
je
dec
ret
adc
or
cmpb
inc
ret
test
lahf
aaa
mov
cmp
jne
or
je
cmp
and
cli
sbb
call
adc
inc
add
sub
add
add
ret
sbb
shl
movsl
mov
adc
add
jmp
push
jecxz
add
insb
lods
data16
pop
lods
aam
lret
dec
bnd
jmp
xchg
or
add
test
fcoms
aas
(bad)
inc
push
pop
pop
pop
mov
rep
push
cmp
xchg
aad
shll
mov
pop
aad
loopne
insb
hlt
cld
mov
rolb
std
enter
xchg
rorb
inc
subb
jge
xor
or
cs
dec
in
aad
lahf
movsb
pop
adc
stc
shlb
or
add
loopne
xor
mov
and
sbb
imul
push
inc
mov
cld
and
ret
xchg
and
lea
and
mov
sub
push
inc
jb
es
ror
xchg
and
push
sbb
scas
mov
or
aam
and
add
movsl
inc
jbe
mov
sbb
fsin
cmp
bnd
jb
ret
push
enter
or
pop
js
movsb
add
mov
adc
push
sti
and
mov
rep
pusha
jno
call
or
(bad)
hlt
jl
mov
push
hlt
outsl
add
fwait
add
loope
inc
cs
hlt
mov
hlt
lock
nop
mov
es
hlt
fistpll
inc
es
enter
cltd
out
loope
in
out
les
stc
or
push
add
push
shrl
pop
test
lock
push
dec
pop
movsl
dec
repnz
iret
sub
cmp
pop
test
xchg
cmp
fsubp
ret
xor
mov
ret
adc
dec
xor
mov
push
mov
pop
pusha
nop
mov
sub
popf
movsb
add
xor
mov
popf
jno
add
cs
rcrb
adc
sbb
and
mov
add
inc
sbb
mov
cmc
jne
fsubs
testl
pop
call
cmc
sbb
ret
popa
xor
pop
or
push
leave
test
inc
scas
mov
addb
cmp
push
pusha
push
fstps
sbb
pop
mov
lock
ja
push
aad
arpl
lret
leave
add
or
call
add
imul
mov
cld
cld
test
pop
or
push
jle
push
ret
adc
sbb
ret
sbb
insl
mov
mov
cmp
jge
mov
test
cli
movsl
mov
rolb
and
bound
std
rcll
stc
push
sbb
cs
in
dec
iret
cmp
add
inc
adc
lock
lods
loop
nop
mull
xchg
lcall
scas
call
inc
in
loopne
imul
mov
inc
lea
push
pusha
iret
mov
dec
fdivrs
mov
sahf
popa
dec
ror
int3
xor
nop
mull
in
cmp
popa
outsl
nop
data16
rol
mov
sahf
mov
sahf
inc
sahf
mov
mov
mov
cmp
cmp
add
add
dec
test
mov
popa
nop
or
mov
nop
or
rolb
xchg
add
enter
jb
aam
push
push
adc
cmp
adc
push
sbb
ja
cmp
pop
je
mov
inc
(bad)
insl
ss
dec
je
int
incl
cmc
mov
mov
(bad)
data16
push
(bad)
incb
fldcw
fistpll
insl
incb
mov
or
fidivl
das
scas
inc
test
push
sub
scas
int1
pop
movsl
push
adc
push
cli
add
adc
push
inc
mov
add
lea
inc
push
push
mov
push
cmp
xor
rorl
cwtl
dec
adc
push
hlt
and
daa
decb
pop
push
add
xchg
cmp
jl
add
fmuls
push
pop
mov
and
stos
enter
cld
out
out
cmpsb
loopne
push
and
push
mov
imul
loope
in
aad
testb
mov
fldl
in
(bad)
movsb
lahf
aad
imul
dec
cld
mov
into
negb
pop
jmp
je
ret
mov
pop
inc
add
rorb
adc
daa
push
stc
popa
sbb
mov
pop
clc
or
inc
xchg
pop
and
push
mov
aas
adc
stos
add
andl
xchg
sub
add
sbb
mov
inc
or
loope
sbb
(bad)
jmp
push
fcoml
add
enter
call
dec
rorl
fistpll
mov
pop
leave
inc
jo
or
fmuls
in
call
loopne
add
ja
fldl
sub
push
jp
(bad)
push
insb
mov
lret
dec
push
pop
cmp
xorb
sbb
fists
mov
(bad)
inc
mov
pop
or
test
inc
test
adc
lea
sub
sbb
aas
mov
add
mov
jecxz
nop
mov
mov
sti
add
(bad)
and
in
add
pusha
and
and
and
pop
dec
add
fcomip
(bad)
cwtl
sbb
call
lret
movsl
sbb
loopne
fsubs
and
and
mov
mov
or
jecxz
test
mov
out
loope
stos
xorb
orb
push
dec
ds
jg
int
xchg
in
test
jl
xor
lea
das
cmp
and
push
jb
mov
xchg
js
ljmp
add
enter
cmc
pop
mov
xorl
mov
or
inc
lods
add
popf
xor
and
push
test
and
ss
xorb
ds
test
inc
add
cmp
stos
or
cmp
xchg
add
loopne
inc
aam
call
sbb
jae
xor
pop
dec
pop
sbb
ret
mov
jb
push
ror
ret
movsl
and
mov
fs
and
test
xchg
dec
xchg
imul
aam
fdivrl
push
dec
inc
and
fsubrl
out
push
sti
push
pop
test
mov
inc
