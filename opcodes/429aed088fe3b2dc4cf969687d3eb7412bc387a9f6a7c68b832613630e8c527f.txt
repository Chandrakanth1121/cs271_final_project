adc
push
add
add
add
add
add
add
add
add
add
add
je
fistpl
jb
sbb
popf
mov
push
data16
test
pop
mov
pop
jmp
sbb
aaa
ja
outsb
mov
push
and
cmp
cmp
adc
mov
jp
(bad)
outsb
popa
dec
jne
dec
add
jns
scas
xor
std
or
cmp
daa
inc
cmpsl
sub
push
pop
(bad)
xchg
jle
mov
std
xchg
rol
les
or
xchg
popa
pop
imul
sti
jb
mov
or
cli
or
push
push
sarl
int3
ds
mov
sbb
rol
out
insb
imul
adc
jb
test
pop
cmp
in
arpl
movsb
mov
dec
jp
loopne
pop
int1
sbb
jnp
mov
out
or
jge
mov
fisubrl
sti
lcallw
aam
leave
call
jo
dec
imul
adc
add
xor
mov
or
jne
test
mov
xor
mov
xchg
jb
(bad)
(bad)
sbb
sub
or
jle
jne
outsl
adc
inc
out
andl
adc
int3
push
subb
iret
dec
or
pop
and
sbb
cmp
enter
xchg
lock
pop
stc
inc
mov
clc
and
(bad)
pusha
ja
sub
add
outsb
daa
stos
xchg
fldt
mov
lods
outsb
inc
stos
out
pop
adc
adc
inc
jmp
outsb
lock
popf
mov
out
je
test
leave
jo
cmp
cmpsb
pop
negb
nop
jl
ror
push
aad
rorb
rclb
lcall
xor
les
adc
loop
add
data16
aad
add
jge
add
or
popf
xor
testb
sbb
lock
out
aas
cli
sbb
movsb
std
sbb
xchg
mov
and
xor
pop
test
lret
scas
xchg
inc
sarb
mov
sbb
mov
mov
stc
aas
xor
fidivs
push
lods
sub
aad
(bad)
dec
in
sub
cld
xor
sbb
pop
fistpl
lret
dec
jns
(bad)
xchg
xor
mov
xchg
mov
fnsave
fnstsw
xchg
ret
xchg
int1
or
xor
shll
mov
mov
ljmp
repnz
ret
mov
mov
jecxz
adc
lods
leave
pop
push
jb
popa
iret
in
and
test
xor
leave
push
scas
dec
sbb
mov
movsl
stos
sti
sbb
imul
loope
sbb
mov
fistpll
scas
mov
xor
mov
and
orl
jp
lods
pop
xchg
adc
mov
out
jns
or
inc
ret
lahf
or
adc
nop
pop
daa
imul
and
jae
xor
mov
xor
(bad)
lret
jae
cmc
ret
mov
push
stos
test
int3
pusha
dec
adc
stc
incl
rcll
fsubl
jno
dec
test
jbe
dec
addr16
les
or
inc
les
shlb
popa
mov
mov
cld
xchg
xchg
imul
xchg
push
mov
cltd
and
inc
insb
pop
mov
mov
lods
jne
hlt
sbb
jg
push
push
aam
and
jbe
mov
inc
aaa
in
mov
push
or
xlat
jmp
sbb
xor
movsb
xorb
mov
jbe
std
or
jae
sub
push
ljmp
out
add
mov
xchg
push
loopne
lods
mulb
push
push
sub
jbe
mov
sub
mov
mov
cli
popf
mov
and
and
pop
std
mov
xchg
xchg
push
sbb
andl
inc
insl
jg
outsl
in
cmpsl
or
lcall
cmpl
into
inc
dec
lret
repz
(bad)
or
int
lcall
or
into
sarl
jl
sbb
call
(bad)
jne
push
xor
in
fmull
add
fdivl
arpl
lods
sti
sahf
push
adc
iret
sbb
jl
data16
(bad)
insb
mov
sbb
adc
stc
xchg
frstor
lock
inc
mov
cltd
mov
xlat
pop
out
push
inc
push
int1
mov
pop
lods
fcomip
rcrl
sbb
(bad)
into
loopne
loope
inc
jg
out
mov
mov
(bad)
clc
div
nop
(bad)
add
imull
lods
add
push
push
jmp
mov
(bad)
add
dec
lcall
or
hlt
rcll
jge
sbb
or
pop
adc
dec
pop
jecxz
sub
mov
mov
or
aam
mov
rorb
mov
popf
mov
or
fcompl
pop
push
(bad)
rcl
enter
mov
(bad)
insl
push
mov
mov
mov
fucomp
sbb
mov
add
dec
ret
shlb
cmp
cmp
fmuls
add
pop
and
test
jge
iret
repnz
or
pop
(bad)
mov
cwtl
sbb
ja
push
test
lret
cmc
dec
aad
rcl
or
inc
jns
push
cmp
pop
pop
es
cli
mov
dec
cmp
jecxz
fidivrl
or
data16
mov
std
cltd
arpl
rorl
jo
int1
adc
jecxz
or
dec
adc
loope
jbe
push
mov
mov
sub
clc
jle
jns
mov
cltd
(bad)
inc
xchg
cmpl
fcmovnbe
test
xchg
js
imulb
cmp
sub
pop
push
pop
mov
inc
addr16
lods
cmc
repnz
inc
pop
cld
pop
inc
fs
sub
lcall
subb
mov
cmp
or
jnp
push
clc
pop
add
lock
loop
push
lret
xor
add
mov
sub
mov
cmp
ljmp
rcrb
(bad)
aam
hlt
test
lock
(bad)
or
call
pop
sti
loope
adc
lahf
xor
fists
dec
inc
hlt
adc
aad
jp
out
loop
add
push
cmpb
rol
xchg
mov
pushf
sarl
xchg
xchg
sbb
dec
dec
ljmp
fnsave
xchg
dec
roll
scas
mov
mov
pop
lret
lahf
lods
mov
pop
int1
inc
enter
sar
bound
jae
pop
insl
aas
out
mov
mov
shll
cld
notb
xchg
(bad)
mov
push
xchg
inc
insl
lret
adc
mov
mov
push
stos
push
pop
inc
ficomps
roll
das
push
push
cld
and
jbe
rolb
xlat
dec
jo
mov
into
push
pop
int3
dec
dec
and
adc
mov
aas
push
or
out
iret
xor
mov
jne
aad
pop
and
add
push
sbb
sub
in
pop
shlb
cmp
mov
mov
movsb
outsl
inc
in
mov
je
mov
xor
pop
in
xchg
outsl
cvtps2pd
jp
int1
arpl
movsl
adc
sbb
adc
test
mov
pop
ja
xchg
mov
xor
pop
lret
mov
jnp
jle
mov
mov
add
inc
pushf
mov
sahf
ss
inc
xor
into
ljmp
jmp
mov
fucomi
jl
call
test
dec
and
(bad)
push
fcomps
imul
sbb
lods
sbb
xchg
out
addr16
dec
sub
in
sub
add
xor
rcr
jp
das
aam
mov
dec
mov
arpl
int3
add
popf
popf
iret
out
mov
out
dec
sub
add
push
lret
aaa
int3
or
mov
les
jo
in
data16
cwtl
or
inc
jo
xchg
mov
jb
mov
pop
mulb
int1
in
lahf
xchg
push
or
int
js
lcall
inc
inc
xchg
inc
clc
mov
push
fidivl
cmovbe
popf
jge
out
test
push
(bad)
test
sbb
(bad)
mov
add
push
mov
iret
ret
lret
stos
push
std
push
jge
push
mov
fisttpll
das
pop
out
adc
mov
add
in
lahf
lahf
add
arpl
data16
bound
std
or
xor
inc
lds
aas
nop
xchg
and
sub
fmuls
out
push
mov
jnp
inc
lea
aam
iret
(bad)
xchg
data16
