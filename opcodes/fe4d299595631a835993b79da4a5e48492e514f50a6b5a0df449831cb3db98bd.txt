lods
idivb
addr16
mov
rdtsc
xchg
(bad)
jecxz
popf
loop
jp
jge
cli
movsb
push
xchg
inc
mov
mov
xchg
and
arpl
scas
pop
cli
or
xor
mull
mov
mov
(bad)
add
(bad)
(bad)
(bad)
jecxz
popf
nop
enter
jmp
movsb
push
xchg
fs
mov
xchg
mov
iret
inc
xchg
mov
loop
ja
mov
es
pop
stos
lods
or
shrb
idivl
das
popa
inc
sbb
out
pop
jecxz
cmpsl
nop
mov
sti
enter
test
jae
dec
or
rcrl
nop
and
pushf
(bad)
inc
je
clc
xchg
jae
loop
mov
lahf
into
mov
ljmp
sub
xchg
(bad)
(bad)
(bad)
(bad)
jecxz
lahf
nop
test
andb
cli
jae
push
xchg
inc
sahf
loop
jae
pop
mov
xchg
mov
popa
inc
and
jge
mov
popa
push
sbb
push
pushf
inc
loopne
jae
in
aaa
imull
lds
repz
push
mov
imul
les
or
mulb
jge
mov
cmp
scas
ljmp
cmp
popa
inc
and
jge
mov
popa
push
sbb
push
pushf
inc
test
jae
in
aaa
imull
lea
repz
add
subb
les
or
mulb
jge
mov
cmp
scas
inc
mov
fwait
and
pop
popa
mov
divl
in
push
cwtl
jl,pn
andb
stc
jae
sub
subb
mov
popa
fwait
cmp
cmp
scas
pop
popa
inc
and
sahf
(bad)
inc
je
enter
loop
mov
lahf
into
mov
ljmp
add
mov
lods
(bad)
(bad)
(bad)
(bad)
jecxz
lahf
nop
test
cli
movsb
push
xchg
inc
mov
mov
cwtl
jl,pn
andb
stc
jae
sub
mov
pop
mov
addr16
jbe
xchg
divl
fbstp
push
jge
mov
movb
fbstp
push
jge
mov
arpl
mov
rclb
inc
xchg
jae
loop
mov
lahf
jp
lods
(bad)
(bad)
loope,pn
out
popf
call
jp
mov
gs
jae
loope
fcomps
pop
ja
mov
in
daa
in
mov
stc
imul
cli
jae
mov
sti
dec
in
psubw
pop
cmp
xchg
pop
inc
loop
pop
repz
cs
clc
jae
fbstp
push
jge
mov
(bad)
and
cmp
and
mul
pop
repz
push
rclb
pop
cli
mulb
jge
mov
cmp
scas
test
push
jae
pop
popa
incl
imul
lahf
into
ja
rcrl
mov
andb
cmpsl
pop
repz
insb
push
jle
lods
pop
cli
adc
pop
popa
mov
adc
xchg
(bad)
(bad)
(bad)
popa
cmpsl
sub
imul
repz
lahf
jecxz
mov
xor
add
(bad)
(bad)
(bad)
jecxz
cmpsl
nop
mov
cli
(bad)
push
xchg
inc
mov
mov
add
(bad)
(bad)
ja
subb
jns
mov
pminub
popa
lret
mov
pop
cli
jae
sub
psrlw
out
clc
arpl
std
imulb
popa
dec
and
popa
mov
push
mov
shl
pop
fs
jae
in
push
cwtl
ljmp
jae
rcrl
mov
(bad)
(bad)
jecxz
cmpsl
loop
jp
ja
andb
repz
seta
loop
jb
pop
mov
or
add
clc
dec
repz
adc
add
or
mov
cmp
gs
jae
lahf
jecxz
shll
and
nop
and
lahf
into
mov
and
lods
and
and
mov
lahf
adc
xchg
pop
jp
cmp
push
sbb
(bad)
(bad)
popa
cmpsl
sub
imul
cli
jae
lahf
jecxz
lea
sbb
add
(bad)
(bad)
(bad)
mov
adc
jbe
jge
idiv
addb
enter
push
hlt
xor
cli
jae
(bad)
jecxz
movsl
loop
jp
jl
cli
(bad)
push
xchg
dec
mov
mov
add
(bad)
(bad)
popa
ja
in
pop
push
roll
out
imul
jae
lahf
jecxz
add
cli
jae
xor
add
(bad)
(bad)
jecxz
cmpsl
nop
mov
cli
(bad)
push
xchg
dec
mov
mov
add
(bad)
(bad)
ja
subb
ljmp
xchg
mov
mov
mov
in
mov
jae
pop
cli
push
fistpl
pop
movl
in
and
ljmp
lahf
mov
lds
jp
mov
add
(bad)
(bad)
(bad)
(bad)
jecxz
cmpsl
loop
jp
ja
andb
hlt
jae
seta
sahf
loop
subl
sti
push
nop
scas
repz
mov
push
insb
jecxz
cli
jae
mov
loop
xchg
jae
mov
push
adc
jae
ror
shlb
sub
sbb
jnp
jae
fistpl
nop
inc
jecxz
jae
push
es
pop
stos
lods
push
mov
loop
ss
push
cmpsl
call
lods
ja
shl
clc
push
repz
mulb
aas
js
mov
loopne
xlat
arpl
mov
ja
mov
loop
lahf
and
inc
sub
cmpsb
mov
jae
sub
jae
pop
cli
dec
out
cli
jae
pop
cmp
pop
cli
jae
sub
adc
jnp
jl
repnz
out
jge
mov
pop
jecxz
iret
inc
or
arpl
and
jno
dec
bound
clc
dec
jb
pop
inc
(bad)
adc
mulb
aam
mov
cli
jae
stos
pop
iret
andb
and
testb
jge
clc
testl
pop
stos
es
pop
stos
stos
leave
sbb
push
nop
jge
jge
mov
ja
pushf
push
adc
ss
movaps
ljmp
imul
pop
cli
mulb
jge
mov
pop
jmp
inc
xor
outsb
mov
mov
ja
jns
or
out
add
cli
jae
sub
cwtl
loopne
scas
xchg
xchg
call
jmp
jae
mov
cmp
gs
mov
scas
pop
cli
add
pop
(bad)
in
in
repnz
movb
jae
loop
mov
lahf
into
subl
filds
push
aas
ja
lahf
popa
bound
push
test
clc
add
sub
xchg
xchg
call
mov
xchg
sahf
in
loop
jno
pop
mov
add
(bad)
arpl
mov
add
or
sbb
(bad)
popa
sbbb
push
lods
sbb
push
xor
popa
(bad)
into
cmp
sar
or
add
mov
lahf
mov
push
divb
shl
or
(bad)
scas
or
inc
and
or
(bad)
mov
lahf
in
jbe
pop
popa
cmpsl
sub
imul
jae
lahf
jecxz
(bad)
(bad)
sbb
adc
fs
xchg
push
jnp
clc
xlat
mov
inc
ja
adcb
out
ljmp
inc
in
aas
divb
jae
sbb
push
test
and
add
(bad)
(bad)
(bad)
stc
imul
dec
lods
iret
test
jae
mov
cmpsb
je
in
mov
or
add
or
scas
pop
push
sbb
nop
test
xor
(bad)
loop
jbe
push
jge
cltd
add
lods
in
out
xchg
lahf
mov
ja
mov
bound
lods
pop
repz
loope
ljmp
dec
dec
subl
imul
lock
bound
inc
and
jae
cmpsb
testl
inc
xor
mov
pop
leave
cmp
(bad)
cmpsb
mov
shlb
fldenv
push
nop
gs
mov
mov
jle
dec
loope
out
scas
and
andb
clc
jae
push
mov
xchg
arpl
mov
loope
out
ja
leave
cmp
jmp
and
mov
add
sub
and
andb
clc
jae
push
mov
imul
loope
cld
inc
scas
(bad)
cmp
sub
in
cmp
imul
dec
scas
in
mov
xchg
fldenv
push
mov
push
jnp
lods
pop
cli
xor
std
or
fistpll
inc
sub
in
and
bound
