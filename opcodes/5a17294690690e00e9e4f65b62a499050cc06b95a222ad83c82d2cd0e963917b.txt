jmp
ja
or
lea
fdivl
sarb
add
sub
inc
repnz
rcrl
sub
mov
aas
ja
jmp
pusha
sub
(bad)
loopne
jmp
insb
inc
out
je
incl
shlb
mov
adc
pop
xchg
push
cli
shll
cld
jbe
cmpsb
(bad)
cmpsb
cld
jnp
call
jmp
lock
pop
aad
xor
leave
loop
stc
jecxz
pop
or
lret
adc
xchg
push
pop
rclb
addr16
int3
xchg
xor
jns
shr
and
inc
adc
mov
xor
sub
decl
fistl
mov
cmp
aad
and
fbstp
popf
jl
mov
rorl
loope
push
sbb
pusha
cmp
mov
aam
and
cmp
jecxz
insb
movsl
push
leave
fldz
insb
imul
xor
shlb
fadds
mov
jbe
xor
in
jns
and
xchg
inc
lds
mov
out
dec
dec
or
mov
adc
ljmp
sbb
ret
mov
adc
mov
int3
jne
lret
mov
mov
sub
jb
xor
cmpsb
(bad)
insb
in
cmp
(bad)
mov
add
sub
or
jae
xor
aad
add
push
stc
int
mov
sub
shlb
ret
sub
mov
cmp
mov
or
loopne
int3
insb
inc
push
into
mov
loope
and
mov
les
shll
xchg
int3
dec
jns
mov
jno
xchg
mov
dec
push
ds
addr16
call
inc
mov
outsb
lock
and
jns
adc
int1
mov
fldcw
les
add
pop
sbb
inc
call
cs
push
mov
data16
push
mov
and
lret
inc
call
lret
out
or
xchg
test
push
aas
push
jne
mov
outsb
cmp
out
std
mov
or
(bad)
test
jne
int
jae
jecxz
test
xchg
daa
fmuls
push
add
pop
ljmp
push
sub
xlat
popw
ja
push
in
pop
stos
jbe
movsl
int
test
loope
adc
shl
loopne
rcr
fucomip
adc
lods
jae
or
inc
leave
das
imull
test
leave
or
fistps
popf
inc
pop
pop
jg
lret
add
nop
jmp
gs
stos
mov
(bad)
stos
aad
loope
ret
pusha
pminub
iret
jge
fstp
pop
push
cs
inc
sbb
repz
push
enter
sti
pop
movsl
stos
cmpl
jns
adc
mov
push
sahf
pop
insb
rcr
loope
adc
sbb
fldcw
repnz
loope
rorb
jmp
outsb
cli
out
cmp
(bad)
xchg
and
add
cmp
subl
push
and
pop
mov
push
movsl
sahf
ss
sub
mov
clc
les
inc
mov
int3
daa
rorb
jp
cli
add
(bad)
cmc
sarb
add
sbb
jne
shrb
xchg
aad
mov
lea
inc
xchg
insb
mov
int
cmp
add
mov
sub
dec
xchg
mov
add
ret
idivb
loopne
adc
inc
xor
sub
dec
and
cmpsb
call
jnp
test
ljmp
cmp
stos
inc
(bad)
mov
(bad)
loope
adcb
and
or
sub
addr16
insl
pop
push
xor
movsb
or
mov
add
pushw
xchg
pop
test
xchg
lret
mov
movsb
mov
pop
cmp
fmul
scas
push
mov
movsb
and
push
and
or
sbb
mov
in
test
and
adc
int3
test
pop
aad
sub
repz
dec
cmp
or
stos
stos
ja
add
add
xorb
test
or
sbb
stos
or
addb
out
aad
(bad)
test
cmp
push
test
popf
movsb
imul
pop
les
cmpsb
dec
je
mov
insl
repz
sbb
dec
aas
inc
fwait
(bad)
dec
xchg
inc
movw
cmc
xor
mov
call
imul
pop
lods
repnz
and
loopne
lret
rorl
mov
subb
loope
cmp
shrl
sub
lods
mov
je
mov
ss
sub
pop
dec
hlt
jno
sbb
mov
imul
fisubs
sub
idivb
das
push
(bad)
in
xchg
dec
shll
inc
movsl
mov
sub
lret
cmp
mov
insl
cmc
push
mov
out
push
fwait
pusha
(bad)
cmp
mov
adc
repnz
sarl
insb
pop
push
adc
mov
int1
cmpsb
xchg
or
cli
cmc
push
xor
push
test
xor
sub
or
xchg
cwtl
jnp
or
out
sbb
movsb
and
pusha
mov
mov
mov
arpl
inc
jp
xchg
mov
inc
bound
outsb
xor
jbe
jp
bnd
pop
adc
lea
rcrl
aad
mov
shrb
enter
test
xchg
je
cmp
or
dec
stc
addr16
sbb
or
dec
adc
out
fsubrl
pushf
idiv
stc
movsb
inc
in
stos
movb
add
sbb
cmc
jno
cltd
mov
(bad)
outsb
loop
mov
mov
ljmp
fisttpl
sbb
cltd
call
jnp
lds
outsb
jge
push
lds
bswap
mov
mov
iret
fidivrs
cld
ljmp
or
out
cmp
int1
pop
in
adc
rcrb
mulb
mov
jns
daa
insl
xor
sbb
out
(bad)
in
and
push
xchg
push
fs
enter
aaa
insl
pop
(bad)
jge
cmp
lods
dec
push
insb
dec
cltd
pop
push
inc
cmc
xchg
lods
shrb
and
mov
ljmp
push
bound
lds
iret
insl
sub
jge
mov
rorb
aad
xor
xchg
out
dec
outsl
outsl
leave
pop
leave
mov
cwtl
jb
and
rorl
dec
lock
jns
arpl
les
push
mov
mov
sbb
mov
shrl
call
adc
lods
mov
push
dec
dec
jbe
or
mov
mov
and
or
clc
insl
or
adc
xor
out
ret
push
inc
ds
dec
lea
fcmove
pop
sub
mov
repz
stos
or
xor
mov
ss
mov
mov
push
enter
imul
cltd
xlat
add
add
xor
(bad)
lahf
xchg
scas
pop
jg
and
insl
movsb
mov
out
cmp
sbb
int3
adc
mov
outsb
ss
ja
jbe
jp
xor
ss
push
mulb
jp
push
movsl
outsl
xlat
dec
(bad)
out
dec
nop
mov
xchg
imul
mov
mov
push
mov
cmp
iret
ja
xor
js
cmpsl
testl
xchg
mov
roll
cmp
lret
out
xchg
fmull
test
xlat
jmp
cmc
push
mov
outsl
testl
xchg
lods
add
mov
inc
iret
inc
and
jge
std
pop
add
mov
cs
int3
mov
dec
mov
outsb
stc
iret
in
push
out
mov
sub
lds
leave
cmp
sbb
jo
xlat
inc
sub
adc
sbb
rorl
dec
jne
mov
cmp
push
xchg
lea
pop
dec
pop
mov
lret
sbb
lret
dec
mov
push
sarl
out
leave
ret
(bad)
mov
push
fnstenv
in
(bad)
dec
into
xor
mov
add
mov
push
js
dec
imull
je
jnp
xor
pop
inc
mov
add
dec
mov
inc
call
mov
xchg
dec
sarl
xchg
cmc
pop
rcrb
or
(bad)
inc
add
sub
mov
add
stc
imul
loope
sbb
push
xchg
nop
sub
stc
out
push
aas
mov
adc
adc
and
and
mov
mov
cmp
fwait
push
jge
in
jmp
or
and
mov
mov
pop
movsb
xchg
test
mov
mov
mov
inc
add
mov
movsl
or
aad
push
adc
das
push
rorl
dec
fcomps
insl
inc
mov
out
mov
dec
imul
mov
ljmp
mov
nop
mov
mov
