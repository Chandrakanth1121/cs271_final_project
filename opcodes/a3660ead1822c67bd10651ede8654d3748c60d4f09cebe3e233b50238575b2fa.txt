mov
ljmp
sbb
add
lods
lahf
shl
fsubl
test
iret
dec
push
cmp
mov
inc
je
ljmp
sbb
addl
pop
inc
inc
adc
cltd
pop
dec
adc
adc
jmp
call
xlat
gs
jg
push
sbb
mov
jmp
lea
jle
lock
add
fwait
ljmp
or
and
insl
pop
xchg
xchg
rorl
nop
fcomps
shl
test
add
(bad)
mov
aam
inc
jns
jg
ret
(bad)
pop
mov
popa
inc
faddp
les
xlat
push
jle
adc
jg
sbb
popf
outsl
es
in
jo
jns
outsb
mov
mov
pushf
popfw
or
mov
xchg
pop
inc
mov
pop
loope
xchg
sub
mull
xor
and
rcr
nop
fwait
pop
cld
mov
cmp
popa
incl
adc
add
push
dec
cli
ja
adc
mov
loop
cmpsb
repz
jbe
xor
pop
pop
mov
(bad)
fwait
mov
adc
in
push
in
lahf
dec
iret
adc
daa
adc
lret
stos
and
sti
int3
cmp
adcb
or
int3
sub
cli
test
subl
xchg
adc
loop
ljmp
std
jno
push
cltd
lea
fdivl
pop
or
adc
dec
push
outsb
inc
es
daa
rcrl
xchg
in
aaa
cmpsl
push
sub
xlat
leave
xor
jg
pushf
imul
cmp
fisubrl
add
pop
adc
mov
mov
dec
cld
xor
insb
pop
sarb
imul
shlb
loope
lahf
push
xchg
data16
stc
in
(bad)
arpl
loope
fists
mov
cmpsb
imul
or
(bad)
pop
loope
cmc
mov
pop
arpl
ljmp
rol
sub
les
das
adc
lret
test
aad
and
pop
(bad)
push
or
out
cltd
pop
jecxz
xlat
leave
mov
lcall
sub
cmpsl
xor
mov
adc
stos
or
cmp
repnz
scas
inc
pop
sbbl
clc
shlb
repz
add
imul
push
das
nop
stos
pop
cmp
fsubs
mov
data16
cmp
lcall
inc
mov
and
mov
imul
out
aad
insl
mov
mov
leave
sti
mov
lcall
pop
daa
stos
jmp
mov
daa
jge
mov
clc
or
xchg
xor
xor
call
mov
testl
lcall
fnstenv
call
mulb
xor
pop
(bad)
and
hlt
int
xchg
xchg
inc
push
adc
daa
hlt
mov
sbb
mov
lret
sbb
imull
in
jns
popf
jmp
cmpsl
mov
cmc
sbb
lods
or
aas
int
out
jb
or
jno
mov
jge
cwtl
xchg
out
stos
pop
or
cmp
mov
add
lahf
popa
add
lret
movsl
addr16
je
push
mov
pushf
mov
rcr
cmc
push
fisttps
rcrl
cmpsb
xor
xchg
or
stos
sbb
pop
xlat
lds
movzwl
pop
pushf
psubusb
movsb
inc
orl
or
shrl
inc
adc
mov
xchg
stos
call
jb
stos
push
push
es
aas
pop
pop
add
sub
enter
mov
ljmp
and
cmpsb
pop
adcl
and
jo
push
popf
lret
dec
xchg
aad
cwtl
push
add
xchg
rol
jae
sbb
cld
fwait
int1
adc
mov
push
cli
dec
int3
push
mov
mov
cld
jbe
aaa
inc
leave
dec
inc
(bad)
in
adc
push
sbb
idivb
jne
cltd
xchg
out
adc
fwait
lcall
pop
addr16
push
adc
jns
movsl
int1
out
out
cmp
xchg
test
(bad)
popa
repz
mov
mov
dec
add
jne
mov
jg
cltd
int
dec
fs
add
(bad)
and
add
jg
rcr
sub
sbb
sbb
add
cli
in
mov
stos
incl
ret
mov
jnp
mov
loopne
popf
sbb
into
cmc
into
xchg
mov
shrb
shr
push
or
xchg
popa
stc
iret
mov
push
mov
add
add
repz
test
out
in
dec
push
push
jl
pop
pop
imul
shl
fcomip
lods
push
xor
mov
aaa
mov
lret
into
pop
clc
jmp
sbb
and
or
mov
dec
mov
popa
push
push
les
inc
sub
xchg
jmp
cmp
lret
stc
inc
inc
xor
pop
(bad)
out
aad
cmpsb
(bad)
aaa
inc
jo
enter
fwait
pop
cmc
stos
xchg
inc
jl
shlb
lcall
loop
stos
int1
leave
jl
mov
adc
adc
(bad)
das
lds
jg
(bad)
xchg
mov
lret
add
and
mov
mov
mov
mov
push
pop
bnd
sbb
inc
js
(bad)
testl
popa
int3
test
inc
daa
(bad)
ljmp
or
iret
adc
fnstenv
int1
sbb
in
in
stos
stc
shr
sbb
add
sbb
repnz
(bad)
lods
mov
inc
negb
iret
test
ss
jb
aam
test
jle
xchg
loop
mov
mov
add
rorb
sbbb
into
cmp
mov
int3
test
jmp
inc
shrl
pop
std
test
inc
stos
pop
or
push
iret
inc
je
mov
dec
sbb
add
and
std
addr16
lret
push
std
mov
leave
leave
mov
lds
lcall
mov
por
and
push
in
mov
int
cmp
ljmp
mov
out
mov
push
mov
pop
mov
dec
js
stc
jmp
xchg
mov
in
mov
xor
mov
int3
inc
push
es
add
push
mov
nop
xor
neg
add
jg
add
or
lds
add
pop
mov
sbb
out
xor
sbb
pop
imul
sbb
sub
xchg
inc
fwait
sarl
lea
mov
cmp
jne
cmpsl
jl
mov
fstpl
jle
dec
(bad)
mov
xor
or
or
imul
mov
mov
sub
sbb
jle
sbb
xor
dec
or
and
aad
dec
loop
mov
dec
cmpsl
xchg
jl
lock
inc
lods
cmc
mov
pop
es
mov
imul
xor
in
mov
pop
add
adc
cmp
jnp
cmp
mov
mov
push
add
loop
pusha
pop
leave
hlt
mov
mov
fistpll
jne
jge
test
mov
rcrb
dec
in
push
movsb
adc
jl
shll
pand
inc
ljmp
test
xor
test
adc
fs
sbb
jne
bswap
ror
aas
push
jmp
mov
mov
jmp
ds
xor
ljmp
jecxz
pop
mov
jmp
pop
shlb
push
int1
or
in
mov
fstps
cmp
cmpsb
stos
mov
cli
idivb
mov
ljmp
adc
rcpps
fs
mov
jge
ret
sub
push
fisttpl
cmp
int
xchg
xchg
xor
addr16
int3
shrl
or
ljmp
mov
or
xchg
cli
jb
sbb
sub
add
stos
pop
xor
inc
pop
jmp
mov
insl
pop
out
jp
add
test
xchg
repz
push
and
and
ret
bound
dec
call
add
dec
cmp
cmp
xchg
cmpsb
leave
xor
xchg
(bad)
loop
int1
sub
dec
(bad)
inc
lret
ss
int1
xchg
inc
imul
xchg
adc
xchg
dec
into
je
add
fisubs
out
lret
xor
or
fwait
jb
fldcw
loope
outsl
aas
pop
pop
pop
adc
int
mov
popa
mov
pop
push
adc
inc
cmpsb
fcmove
imul
jp
pop
mov
rclb
out
scas
arpl
adc
xchg
pusha
in
idiv
push
or
bound
fisubs
scas
jmp
(bad)
cmpsl
vaddsd
int1
(bad)
enter
cmp
in
sub
or
movsl
jns
sbb
out
or
jecxz
