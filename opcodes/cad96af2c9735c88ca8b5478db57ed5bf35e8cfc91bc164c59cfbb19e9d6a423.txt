jl
push
int
mov
movsb
xor
mov
sub
(bad)
jmp
(bad)
shlb
ret
push
and
ja
pop
sub
push
dec
xor
leave
lods
lret
mov
jecxz
loopne
mov
sub
pop
(bad)
(bad)
fdivrs
repz
and
push
stos
adc
test
fdivrl
in
and
xor
jle
lds
pop
adc
out
stos
sbb
shlb
cmpsl
popa
jno
rorl
mov
or
int3
nop
lret
cli
sbb
enter
movsb
lods
cmpsl
int
or
aad
das
mov
pop
and
popa
cmp
xchg
jnp
add
lods
inc
js
mov
ljmp
or
sahf
add
gs
push
sub
imul
jg
fcompl
mov
mov
mov
sub
pop
imul
mov
int3
push
imul
jge
outsb
pop
mov
push
or
push
int3
test
mov
cmp
adc
and
xchg
inc
es
mov
out
and
push
jnp
aam
insl
fildll
mov
or
and
popa
je
stos
outsl
shrb
push
(bad)
in
mov
andnps
loope
xchg
aas
sub
pop
xor
jnp
(bad)
dec
sub
iret
frstor
push
mov
mov
inc
or
inc
pop
sub
stos
and
pop
cmpsb
imul
or
mov
mov
fwait
roll
xor
cmp
sbbb
and
arpl
mov
scas
mov
cmpsl
daa
inc
pushf
jb
bound
arpl
or
pop
mov
jmp
insb
cs
xor
mov
adc
mov
xchg
xor
xor
pop
jae
mov
nop
sub
mov
les
out
xor
pop
fcoms
pop
add
lret
pop
xor
stos
mov
mov
xor
test
jecxz
insl
xor
mov
in
fldenv
fdivr
(bad)
jns
movsl
push
test
leave
mov
int1
shrl
insl
leave
pop
stc
add
xchg
gs
and
dec
jno
xchg
pop
inc
bound
rolb
int3
sbb
mov
add
cmp
ss
adcb
lds
mov
mov
cmp
and
xor
outsl
or
ljmp
fmul
enter
movsb
add
lods
outsb
adc
ds
mov
outsl
cmp
fucom
xor
lea
imul
sub
mov
ljmp
mov
aam
pop
and
in
jb
ds
pop
mov
lods
aad
fwait
cwtl
mov
or
sarb
in
movsb
mov
fidivs
jp
ljmp
(bad)
pop
dec
push
pop
xor
jmp
rorl
aas
lods
shlb
cs
lcall
jmp
ja
ja
add
and
popf
sub
ret
or
(bad)
xor
pop
fmul
push
cmpsb
out
ficomps
test
sar
les
pop
ss
aaa
xor
(bad)
std
pop
and
jno
scas
mov
pop
mov
cmp
sarl
inc
filds
xorb
and
jns
out
jmp
les
adc
push
(bad)
jbe
insb
xchg
sub
mov
pop
int3
imul
and
arpl
jbe
and
mov
(bad)
mov
and
mov
loop
mov
pop
or
fsts
outsl
jae
scas
stos
cs
dec
cmp
std
fdivs
addr16
scas
cmp
or
push
(bad)
imul
dec
stos
and
rclb
adc
xchg
loope
jno
shr
cwtl
inc
adc
lret
pop
sbb
push
fdiv
sub
add
sub
sub
sarb
gs
and
ret
aad
or
cmp
nop
(bad)
aas
insb
or
xor
test
sahf
jbe
ficompl
mov
sbb
cltd
testb
enter
hlt
jmp
loop
repnz
push
fimuls
mov
pop
das
insb
rcr
xchg
mov
mov
nop
loope
movsl
pop
loopne
test
fsubr
or
mov
lret
ss
jl
dec
push
sbb
xor
push
add
fcomps
jecxz
mov
push
xorl
out
shrb
les
lods
cmp
test
(bad)
mov
and
iret
mov
xor
mull
pop
cmp
mov
mov
xlat
push
sbb
(bad)
push
xor
jo
imul
les
das
adc
dec
and
movsb
outsb
faddl
scas
adc
test
std
pop
mov
aas
popa
loop
mov
mov
mov
sahf
push
or
daa
mov
or
sub
lock
sub
sub
les
or
sub
sti
xor
xor
pusha
loopne
repnz
lock
shlb
jle
push
and
push
sub
adc
sub
push
shrl
les
es
push
cli
mov
dec
cld
cs
xor
scas
iret
lret
ja
mulb
cmp
(bad)
and
repz
jmp
leave
(bad)
pop
loopne
and
stos
adc
out
dec
mov
out
xor
push
sub
pop
imul
or
mov
shlb
fldl
cld
ljmp
inc
mov
push
sub
mov
jbe
add
ret
xor
pop
outsl
add
insl
je
sub
enter
imul
and
and
aas
and
xor
mov
cmp
in
mov
mov
(bad)
pop
xchg
push
pop
mov
fadds
pop
sub
stos
das
pop
jo
les
jne
or
js
fsubr
pop
pop
cmc
fst
gs
ret
in
mov
mov
ja
add
ss
ljmp
mull
loopne
jmp
shr
gs
sbb
fwait
mov
out
lret
pop
sub
and
loop
sub
xchg
inc
pop
(bad)
xchg
shll
mov
xor
insl
(bad)
sbb
outsb
out
ret
mov
shlb
or
js
xor
cs
test
mov
cmp
out
(bad)
jno
sub
std
clc
clc
leave
out
fsubrs
xor
scas
mov
(bad)
je
cmpsl
addr16
lcall
test
push
int1
jnp
cmp
fs
adc
in
pop
addr16
rorb
jg
(bad)
sub
jo
and
adc
cs
ret
mov
lret
add
pop
(bad)
pushf
and
sti
fldl
lret
push
xor
nop
call
test
adc
cmc
sbb
negl
xchg
cmp
bound
syscall
inc
iret
out
aad
cmc
mov
push
sbb
es
ss
xor
mov
movsb
jno
pop
jecxz
mov
int3
dec
cmp
out
rcr
test
pop
mov
and
mov
das
mov
dec
pop
out
xor
sbb
or
and
cmp
sbbl
(bad)
movsl
xor
ret
out
sti
mov
je
pop
xor
xor
repz
inc
lcall
push
and
sbb
xchg
xchg
adc
pop
add
xor
out
test
and
push
out
xchg
(bad)
and
inc
jbe
pop
out
add
and
lods
in
dec
add
push
and
cmpsl
fwait
int1
jmp
test
les
and
test
pushf
and
nop
add
sub
cmp
(bad)
inc
pop
dec
push
loope
flds
(bad)
cmpsl
hlt
push
iret
imul
and
pop
insb
imul
add
out
fcompl
add
aad
xor
pop
pop
sti
adc
sbb
sub
cs
add
xor
addl
dec
pop
sub
hlt
add
cld
xchg
or
hlt
scas
aam
cli
iret
cmp
nop
sub
inc
ja
test
fidivs
jecxz
jge
(bad)
lock
std
inc
mov
fcoms
test
das
popa
cli
or
ds
mov
dec
mov
xor
loopne
(bad)
xor
push
shll
in
rcrb
mov
xor
cmpb
ja
dec
rol
popf
sub
cli
(bad)
pop
sbb
cltd
cs
add
sbb
lret
loope
leave
daa
int1
lock
pop
lods
push
rorl
or
sub
and
sbb
out
in
mov
xor
aad
into
xchg
repnz
xlat
pop
loopne
enter
cltd
pop
and
pop
roll
sub
outsb
push
stos
cs
enter
jmp
stos
jb
daa
rorb
fsubrs
subl
push
lds
dec
loop
mov
shll
(bad)
cmp
sub
das
xchg
inc
addr16
