add
mov
mov
je
ljmp
(bad)
test
subl
imul
ljmp
in
xchg
pop
cmp
pushf
push
iret
pop
fiadds
push
insb
imul
sbb
cltd
popf
fwait
xchg
fcoms
jg
and
(bad)
out
jmp
repz
jecxz
xor
cmp
jae
mov
out
inc
dec
loop
fsubs
pop
in
dec
mov
sub
mov
mov
mul
shl
loop
jne
cli
(bad)
and
and
fsubrp
cmp
arpl
inc
outsb
imul
sub
ffreep
(bad)
ljmp
push
sub
je
sbb
(bad)
cmp
loope
sub
push
fsubs
jg
shrl
push
loop
push
xchg
into
mov
enter
jle
pusha
push
jecxz
out
data16
dec
cmpl
inc
adc
cmp
jbe
push
pop
mov
push
clc
(bad)
movsb
pop
insl
adc
push
ljmp
add
lret
or
mov
pop
mov
mov
bound
filds
cmp
adc
imull
dec
aaa
pop
inc
mov
jecxz
bound
lds
data16
mov
imul
mov
arpl
add
jns
js
push
in
inc
and
mov
jae
mov
popa
lock
sub
arpl
push
jb
hlt
sbb
out
lret
test
adc
mov
adc
xchg
stc
les
cs
pusha
clc
neg
int3
sub
add
and
xor
jmp
inc
push
dec
xchg
jne
stos
xchg
xchg
mov
out
mov
clc
outsl
mov
fmulp
push
lock
jg
sub
jae
sub
dec
inc
xor
and
std
fimuls
pop
(bad)
(bad)
mov
lcallw
ljmp
jle
xor
insl
sbb
movsb
inc
jl
out
out
aas
shlb
repnz
cld
out
inc
js
push
jbe
clc
imul
mov
mov
jmp
xor
les
lahf
mov
lcall
xor
das
mov
and
pop
mov
xchg
mov
(bad)
cwtl
and
(bad)
push
inc
jbe
jl
mov
fsubl
xor
push
cmp
and
jne
arpl
mov
adc
daa
test
out
ds
inc
in
mov
jne
xor
pop
cwtl
or
(bad)
lret
test
lret
xor
outsl
jecxz
add
jbe
xchg
into
lret
mov
mov
or
movsb
mov
fbstp
add
fisttpll
pop
mov
sarb
or
mov
jge
adc
movsl
repnz
mov
outsb
pop
jle
jbe
dec
pop
fdivrs
addr16
out
xchg
or
jo
roll
faddp
mov
push
je
sub
lret
jb
insb
imul
push
fidivs
in
fisubrl
ljmp
inc
pusha
(bad)
aad
scas
mov
mov
cwtl
and
dec
test
popf
pop
xchg
sub
xorb
repz
lods
lahf
jmp
imul
jno
test
repz
mov
pop
jb
cmpsl
pop
adc
das
or
sarb
stc
scas
inc
jns
jns
std
inc
cmp
xchg
xchg
cmc
pop
jmp
(bad)
lcall
test
je
neg
ret
outsb
fistps
jns
and
pop
mov
xor
lods
into
shrb
jo
mov
cmp
sub
sub
mov
lret
push
fsts
add
fmul
out
and
cmc
ja
push
sub
inc
in
movsb
sbb
cli
cmpsb
jno
lret
xchg
test
push
push
or
add
pushf
dec
call
mov
push
add
xchg
inc
popf
mov
cli
adc
mov
sahf
call
mov
pop
xor
mov
inc
jecxz
int
lahf
push
push
fdivrl
push
fcomip
mov
jle
(bad)
lcall
imul
push
aad
popf
outsl
mov
mov
pop
pop
and
loop
inc
sub
adc
mov
gs
cmp
jmp
add
jno
repnz
ret
jle
outsb
jno
lock
mov
iret
filds
fisubrs
xchg
jl
or
stc
push
mov
outsb
int3
xlat
xchg
imul
add
ss
and
add
push
xchg
fs
pop
lea
push
mov
movsb
jle
jle
adc
push
and
xor
add
adc
lcall
push
push
xchg
pop
(bad)
jmp
mov
lea
jecxz
push
decl
pop
(bad)
pushf
ja
lcall
nop
dec
push
mov
push
stc
adc
ljmp
je
cmc
xor
jns
lock
movb
sub
mov
hlt
adc
scas
data16
into
inc
cmc
imulb
data16
arpl
out
sbb
jmp
bound
out
adc
std
inc
test
ljmp
mov
sbb
test
stos
scas
sub
jb
pop
std
jne
jns
inc
lret
add
fcmovbe
orb
imul
dec
popa
test
mov
mov
imul
sub
mov
or
xchg
lret
inc
pushf
mov
insb
add
and
out
ss
dec
lret
pusha
pop
ljmp
push
dec
repz
push
pop
ljmp
mov
(bad)
push
inc
dec
cli
mov
jb
inc
pop
imul
iret
jmp
in
in
imulb
insl
mov
xchg
notb
int1
ja
popa
in
test
push
push
lea
adc
das
data16
test
add
push
imul
push
mov
inc
dec
mov
sub
insb
inc
cmc
shrb
mov
fisubl
push
pop
hlt
int1
ja
movsl
repnz
jne
popf
sub
adc
inc
data16
mov
outsl
mov
mov
mov
jae
push
jmp
cmp
lret
(bad)
sbb
out
data16
stc
fists
dec
jae
sub
adc
sarl
cltd
imul
loope
push
push
mov
pop
js
outsl
movsb
fdivs
iret
imul
pop
mov
js
adc
imul
adc
and
xchg
push
jle
jnp
shlb
inc
jns
das
sub
aaa
pop
je
cmpsb
dec
xchg
js
jne
and
and
jge
mov
(bad)
idivb
out
inc
lods
loope
psllq
mov
push
sub
and
xchg
add
pandn
mov
mov
(bad)
out
mov
mov
jg
cmpsl
sub
mov
pop
aam
outsb
xor
popa
inc
ljmp
outsb
scas
movsb
clc
and
push
push
sbb
sarb
unpcklps
push
popf
insl
popf
add
cs
and
out
aad
bound
sub
mov
jle
or
ja
rcr
add
jnp
inc
lret
gs
sbb
pop
cmp
cmp
insb
adc
sbb
outsb
out
cmp
data16
into
out
mov
dec
pushf
mov
pop
xchg
xlat
cmpsb
mov
jbe
ficoms
xchg
adc
andl
mov
jge
ljmp
mov
lahf
je
push
int3
xor
lret
out
outsb
jg
sub
(bad)
jg
sbb
popa
and
pusha
mov
inc
lods
mov
pop
test
mov
ja
and
xchg
pop
xlat
(bad)
out
lret
xchg
sbb
(bad)
mov
dec
lds
(bad)
mov
sbb
add
and
stos
aas
adc
cwtl
fstps
ljmp
ljmp
cwtl
push
arpl
push
cwtl
add
pop
cmp
movsl
inc
inc
arpl
in
mov
add
xor
jge
push
pushf
stos
inc
inc
add
fxam
repz
outsb
xchg
fsubrp
hlt
adc
inc
jle
mov
mov
out
cmc
inc
sbb
jle
out
or
enter
cmp
popa
or
aad
lock
xchg
fisubl
jno
aad
xor
jns
mov
ljmp
cld
xor
cmp
cmp
repnz
fs
jg
fwait
add
jl
xor
pop
dec
lock
jle
iret
inc
in
ds
mov
pop
jmp
jb
daa
add
mov
js
mov
sbb
pop
ret
cmp
repz
pop
sbb
dec
leave
insl
cwtl
cwtl
jmp
loop
sub
xchg
push
insb
pusha
ret
sahf
fdivrs
xorl
shrb
mov
sub
das
inc
xor
dec
popf
mov
and
andl
dec
loope
gs
