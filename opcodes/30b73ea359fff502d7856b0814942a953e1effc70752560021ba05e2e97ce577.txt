add
pop
loop
imul
mov
popa
mov
dec
mov
stos
sbb
jno
or
pop
mov
imul
dec
jge
adc
imul
cmp
insl
dec
push
cmp
pop
inc
(bad)
adc
popa
mov
(bad)
sbb
cmp
push
ret
xor
inc
inc
aaa
outsb
mov
push
dec
ds
daa
sbb
xor
dec
out
cmp
dec
inc
imul
test
in
mov
push
dec
ds
movb
adc
mov
push
mov
xor
imul
mov
sub
les
fstp
sub
push
in
inc
inc
xchg
adc
leave
mov
xor
into
gs
dec
insl
adc
sbb
mov
jge
sub
dec
mov
loop
dec
mov
aas
bound
jge
dec
sbb
or
sub
nopl
cmc
nop
or
sub
sbb
xor
inc
fstps
dec
inc
dec
sbbl
mov
cmp
mov
xchg
lret
popa
mov
ret
cmp
bound
inc
outsl
loop
ret
lret
pop
cmc
cmpsb
push
add
push
int1
cld
lret
mov
ljmp
or
xor
xchg
lods
imul
dec
fisubrs
pop
imul
dec
sbb
int1
inc
adc
xor
into
loope
inc
addr16
xchg
add
sub
dec
lcall
nopl
mov
sbb
imul
inc
stos
mov
xor
sbb
cmc
sbb
dec
repnz
mov
and
mov
cmp
test
xchg
pop
push
fldcw
xor
dec
dec
or
xor
push
dec
ds
jno
lfs
imul
mov
add
imul
test
orl
sub
nopl
xor
nopl
mov
add
les
movsl
mov
xor
out
sbb
dec
fisubrl
(bad)
cld
ljmp
insb
mov
rcrl
ficoml
xor
into
jl
xor
mov
call
xor
nopl
cmpsb
es
mov
xchg
mov
dec
sbb
pop
daa
push
in
sbb
mov
out
mov
sbb
mov
sub
cmp
xchg
jo
xchg
sub
je
popf
inc
dec
xchg
sub
cmpsb
and
in
dec
shl
or
sub
mov
scas
inc
cld
out
int
pop
popa
mov
or
insb
nop
or
loope
mov
out
xor
mov
inc
aaa
outsb
test
cmp
test
jns
dec
sbb
sbb
inc
inc
xchg
xor
mov
jle
loop,pn
mov
xchg
lret
pop
test
out
xor
fldcw
xor
mov
push
xor
insb
nop
or
outsl
pusha
repz
mov
cmpb
andb
loope
(bad)
popa
mov
dec
sbb
mov
push
ljmp
xchg
lret
xchg
lret
loopne
mov
mov
loopne
mov
pushf
xchg
lret
loopne
fs
imul
dec
sbb
cwtl
mov
xchg
lret
imul
sbb
cmp
xchg
xor
mov
sub
in
and
pop
ret
cmpsb
aas
cmpl
adc
out
jnp
fs
fcomps
hlt
mov
inc
inc
leave
xor
or
adc
xor
les
or
loop
inc
fildll
dec
inc
aaa
outsb
test
cmp
test
test
push
dec
ds
mov
dec
js
mov
sahf
push
mov
sub
les
mov
stos
imul
sbb
test
cmpsl
fcoms
sbb
nop
mov
imull
jge
or
mov
fwait
xchg
sub
(bad)
fldt
les
dec
lea
cmp
cmc
data16
les
or
imul
stos
pusha
(bad)
cld
cmp
dec
ds
pop
fisubrs
clc
jle
push
int3
je
je
sbb
dec
lea
ficoms
sub
inc
cmpsl
insl
or
(bad)
push
gs
or
insb
add
pop
andb
and
pop
dec
sbb
int
pop
xchg
add
inc
aaa
outsb
test
cmp
test
cmp
dec
loop
inc
cmpsb
add
ret
imul
inc
jno
(bad)
nopl
fnsave
xchg
lret
xchg
mov
and
dec
sbbl
push
dec
cmp
mov
sahf
rol
pop
xchg
mov
test
cmp
test
aas
(bad)
std
push
in
int3
testb
sbb
lcall
add
dec
dec
aas
lret
add
loop
imul
nop
cltd
push
inc
xor
sbb
loop
inc
cmpsb
movsb
dec
fdivrs
pop
popa
imul
inc
mov
cmp
(bad)
pop
insl
lret
loop
mov
popa
mov
mov
jno
push
adc
push
inc
xor
sbb
cmp
xchg
sbb
repnz
sub
and
scas
mov
sbb
int
loope
repnz
jg
xor
out
imul
movsl
jmp
xor
mov
xchg
mov
xchg
push
cmc
cmc
les
lea
and
jae
pop
dec
xchg
sub
sbb
sbb
idivb
out
inc
test
cmc
cmp
loopne
into
fldcw
and
xchg
outsl
lret
jns
pop
or
xor
cmc
mov
xor
or
loopne
jl
pusha
out
inc
test
cmc
cmp
cmc
or
jg
xor
xchg
nop
scas
arpl
inc
pop
cmc
adc
cld
mov
cmc
sub
dec
int1
je
dec
sbb
arpl
mov
call
xor
dec
and
inc
popf
pop
xor
sbb
jo
mov
loopne
fs
into
and
cmc
nopl
push
mov
cmp
into
cmp
cmc
nopl
xchg
xor
lret
in
lods
out
lret
sbb
movsl
out
xor
jp
sub
mov
cmp
jle
xchg
lret
or
adc
sub
dec
sbb
in
jl
loopne
rcrb
pop
popa
mov
jne
ds
pop
xchg
mov
in
imul
dec
lcall
dec
sbb
sub
imul
mov
xor
xchg
nop
stos
push
mov
dec
xchg
sub
les
or
cmp
pop
nop
mov
mov
push
xor
xchg
push
lret
loopne
mov
mov
scas
nop
in
in
mov
xchg
mov
dec
insb
cmp
fldcw
xor
dec
xchg
sub
sbb
and
xor
mov
test
ret
in
loope
out
mov
mov
xchg
gs
fldcw
or
dec
sbb
jo
adc
cmp
lret
sbb
in
(bad)
(bad)
or
insl
bound
xchg
pop
lret
xchg
jo
xchg
sub
je
xchg
cmp
and
cmc
lea
xor
les
notb
inc
xor
mov
sbb
cmp
cmpsb
or
xor
inc
imul
mov
pop
dec
jae
pop
dec
jae
pop
dec
sbb
mov
popa
ffree
mov
xor
daa
sbb
xor
dec
sbb
jo
nop
test
test
sub
mov
stos
pop
dec
xchg
cmp
pop
dec
xchg
inc
inc
dec
adcl
dec
jae
mov
dec
jno
(bad)
nopl
fisttpll
imul
push
shrb
lea
imul
push
dec
mov
jne
jo
repnz
enter
mov
add
jbe
imul
mov
xchg
lret
cmpsl
leave
mov
xor
sbb
xchg
xor
fucomp
mov
xor
dec
nop
in
stc
mov
xchg
rcrb
sub
xchg
lret
gs
jne
xor
lea
xor
adc
imul
mov
xchg
mov
mov
xchg
gs
fldcw
or
or
pusha
cmc
cmp
loopne
std
out
lret
in
xchg
out
lret
int
nop
mov
out
lret
push
lret
imul
enter
dec
nop
mov
scas
nop
in
cltd
mov
xchg
mov
mov
gs
fldcw
or
or
pusha
cmc
inc
pushf
into
xor
add
clc
fsts
into
mov
ljmp
movsb
xchg
lret
loop
and
leave
ja
cwtl
orb
sbb
enter
mov
enter
imul
nop
sub
inc
fldenv
adc
imul
inc
popf
pop
xor
sbb
mov
push
in
ja
sbb
dec
jno
(bad)
nop
mov
out
lret
insb
int
