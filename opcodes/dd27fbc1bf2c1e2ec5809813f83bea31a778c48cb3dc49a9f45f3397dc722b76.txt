ret
mov
arpl
(bad)
pop
iret
cli
jb
fs
shr
gs
sub
ret
out
out
mov
jns
lahf
repz
movsb
repnz
adc
and
sahf
jb
push
xchg
les
sar
in
iret
jno
ds
cltd
cmp
int
mov
bound
mov
lock
and
push
in
xor
mov
dec
adc
jns
mov
gs
jb
mov
or
xlat
push
rcll
fbld
dec
adc
int
push
cmp
fwait
xchg
data16
shl
sub
pop
push
inc
hlt
xchg
lcall
int1
xchg
addb
les
enter
stos
jp
into
loop
loopne
ret
mov
lea
fsubs
dec
cltd
fidivrl
shl
xchg
cs
xor
aad
fidivrl
jl
pop
bound
or
mov
shrl
test
jbe
lds
add
test
out
(bad)
enter
or
lret
fs
enter
and
jae
or
fwait
jge
mov
rcl
(bad)
in
stc
pushf
jp
scas
sub
xlat
jae
adc
popa
cld
jne
fs
sub
stc
mov
cmp
int1
push
xchg
lds
(bad)
push
daa
mov
jnp
aam
mov
notl
shrl
mov
pop
(bad)
in
or
lea
push
mov
xchg
and
mov
pop
or
sbb
mov
mov
jae
shr
in
leave
push
mov
pusha
gs
add
insl
sbbb
mov
add
jae
cltd
dec
push
mov
mov
fadds
adc
inc
inc
(bad)
stos
jge
jb
or
mov
cmp
inc
push
loop
mov
cltd
and
and
add
jnp
jb
lds
push
(bad)
mov
sbb
pop
repnz
out
pop
aad
out
pop
fdivl
mov
mov
jns
fisubl
bound
xchg
fisttps
sub
adc
mov
ljmp
into
les
out
or
ss
daa
lds
(bad)
flds
enter
fs
mov
sub
ja
xchg
dec
rorb
ljmp
nop
in
dec
jne
jo
mov
lea
add
cltd
imul
jbe
std
lahf
lcall
pushf
lret
mov
jae
pop
clc
cmovl
rcll
int1
mov
jge
cmp
test
addr16
je
bound
insb
enter
int3
jne
movsb
cld
add
jns
int1
xchg
enter
arpl
sbb
clc
gs
cmc
mov
adc
imul
pop
adc
inc
test
out
mov
lret
mov
dec
mov
xchg
xor
stos
pop
xor
pop
xor
outsb
adcl
adc
js
lret
sbb
xchg
int3
mov
les
stc
push
std
out
jp,pn
jne
int
inc
sub
pop
aas
xor
jl
sub
out
cs
cmp
xchg
out
es
stc
test
fisttpl
ja
mov
mov
mov
xchg
jp
cmp
fimuls
mov
scas
repz
jge
xor
inc
adc
imulb
adc
repnz
push
std
cwtl
sub
or
cmpsl
mov
fstl
imul
and
hlt
jb
leave
out
xchg
(bad)
mov
xor
pushf
cmovle
test
loop
ja
dec
dec
not
add
aam
ds
or
shll
in
push
pushf
(bad)
dec
cmp
and
add
hlt
sbb
jb
adc
add
loopne
or
pop
in
jnp
mov
outsl
inc
(bad)
jmp
fsubp
stos
pop
xlat
mov
add
cmp
lock
xchg
add
pop
sub
dec
fdivrl
lods
fcom
push
test
mov
aad
faddl
adc
jbe
out
int3
je
xor
adc
enter
xchg
out
fistps
ret
aas
or
lds
mov
jno
out
(bad)
rorb
popa
jo
jg
imul
push
sahf
cltd
aaa
push
out
dec
rcrl
test
outsl
mov
sbb
int
es
std
and
mov
lret
ljmp
lea
enter
popf
xchg
out
lret
cmc
dec
xlat
mov
xorl
sbb
pusha
imul
mov
cmpsb
pop
fcompl
rolb
jne
add
loop
add
movsb
rep
insl
mov
ljmp
in
cmp
pop
mov
int
unpcklps
jbe
lea
loop
dec
popa
enter
dec
mov
mov
or
mov
aas
add
fs
ljmp
push
xchg
cmc
loope
jno
pop
adc
and
lods
push
pop
or
pop
je
sub
repz
xor
mov
lahf
jbe
mov
ds
imul
mov
jns
insl
mov
popf
scas
or
push
scas
cmp
data16
outsl
mov
lcall
ret
push
sub
add
mov
enterw
inc
jo
or
or
enter
repnz
or
xlat
xchg
sarl
sub
int1
in
and
jbe
stos
lods
dec
mov
mov
dec
sbb
or
sub
mov
mov
or
pop
in
cs
jb
out
test
sbb
mov
fiadds
push
sbb
jno
mov
scas
iret
jp
mov
and
stos
sarl
or
aas
mov
jmp
inc
sub
xchg
fiaddl
lea
inc
xchg
je
ds
mov
xor
push
cmp
cltd
mov
orl
daa
and
and
cltd
mov
add
push
jl
cli
sbbb
test
add
sahf
aas
jne
push
xor
fisubl
aad
xchg
and
loopne
push
mov
cltd
xorl
xlat
(bad)
or
iret
lahf
and
mov
repz
imul
mov
jecxz
fdivrl
mov
sti
cmpsb
nop
cmc
in
inc
adc
in
lahf
repz
xchg
push
xor
jle
(bad)
popf
mov
lret
jg
fstl
movsb
ret
and
jae
add
lret
push
andb
xor
inc
pop
cmp
jns
je
fldt
pop
mov
and
outsl
mov
in
mov
xor
mov
jmp
flds
sbb
push
dec
clc
movsl
jecxz
cwtl
and
pushf
push
inc
cld
test
jno
inc
mov
mov
or
xchg
incl
rcl
mov
jle
aaa
loop
aad
lcall
adc
(bad)
(bad)
pop
cld
ret
xchg
cltd
mov
pop
fldt
jp
in
mov
jae
mov
fisttps
mov
inc
and
mov
xor
cs
mov
cmp
gs
jns
inc
ret
cmp
mov
pop
inc
push
aad
stos
and
js
fs
jge
jbe
test
pop
int3
mov
dec
add
loopne
add
inc
repnz
jae
dec
jge
pop
mov
daa
mov
xchg
or
(bad)
cmpsl
cmp
lcall
push
je
mov
jp
insb
mov
out
gs
xor
movsb
test
xor
not
popa
lahf
sub
push
jle
outsb
lea
(bad)
and
in
jmp
pusha
or
je
and
xchg
mov
cmpb
xor
notb
insl
out
pushf
insb
sub
jo
in
stos
pop
iret
push
mov
mov
popa
cld
jns
es
loope
mov
adc
notl
sub
in
in
mov
xchg
fimuls
push
cmp
pop
mov
out
loopne
(bad)
outsl
mov
loope
aam
and
daa
cmpsl
je
lods
and
gs
cmp
and
cmp
xchg
mov
adc
stc
xchg
pop
daa
out
test
insl
mov
aas
mov
ret
(bad)
stc
popf
xor
pushf
test
mov
subl
sub
ss
aad
lods
outsl
jmp
ret
imul
pop
aaa
sarb
gs
test
jmp
adc
aas
adc
push
cld
mov
int1
(bad)
mov
inc
xchg
inc
or
dec
cwtl
mov
int1
jle
xchg
jno
jle
mov
sub
and
pusha
mov
sbb
cli
jb
jg
mov
es
mov
mov
adc
into
jl
lock
jnp
hlt
and
popf
pop
jne
hlt
xchg
pop
xchg
jb
std
lds
cmp
lret
and
sbb
popf
jp
int3
in
(bad)
xchg
arpl
cs
