ret
mov
js
mov
push
xchg
out
scas
adc
push
dec
nop
pop
add
jp
loop
mov
dec
pop
les
mov
mov
lea
mov
fs
imul
mov
adc
insb
pop
leave
push
lock
xchg
fnstsw
mov
(bad)
pushf
mov
or
and
push
fldenv
adc
in
pop
aas
xor
out
mull
lods
pop
xchg
push
mov
adcb
stc
xchg
jmp
mov
das
add
mov
mov
sqrtps
test
imul
pop
sub
in
and
outsl
push
cltd
xchg
(bad)
clc
cs
pop
mov
sbb
emms
clc
sbb
sbb
fs
push
and
sub
cmpsb
insb
mov
and
push
jns
out
inc
clc
stc
xchg
xor
or
or
adc
mov
call
imul
jl
scas
xchg
lret
mov
inc
out
shl
pop
xor
js
push
pop
faddp
adc
(bad)
imul
outsb
and
xchg
xchg
ja
jl
inc
mov
in
outsl
mov
ja
xchg
in
xor
cld
jg
pop
inc
jns
sahf
adc
fwait
(bad)
push
aas
jmp
lea
cmpsb
(bad)
lahf
loopne
sub
out
jbe
pop
cmp
sarb
loopne
imul
loop
stos
int1
in
xchg
add
or
push
dec
mov
mov
and
pop
andb
dec
inc
imul
mov
mov
fs
jecxz
mov
shlb
(bad)
and
and
fiadds
xchg
(bad)
fcomi
in
xchg
fdivl
dec
popa
push
xor
dec
popa
jns
movsb
xor
pop
rclb
push
add
(bad)
popf
fildl
pusha
insl
ds
mov
mov
sub
xor
cmpsb
sahf
push
xchg
popf
mov
mov
fsub
pop
sbb
xor
hlt
aaa
outsb
pop
xor
adc
iret
jl
scas
cmp
xchg
pop
(bad)
fistl
cmp
mov
pop
push
pusha
or
in
push
dec
inc
cwtl
adc
ret
or
xchg
test
sahf
into
data16
mov
enter
outsl
dec
arpl
xor
push
sbb
rol
cmp
cli
push
adc
shll
jae
ficomps
jo
lock
pop
mov
lahf
rol
fs
mov
stos
(bad)
decb
mov
inc
cmpsl
mov
lods
je
pop
test
fcoml
(bad)
int1
xchg
push
nop
xorb
sti
test
pop
test
sbb
enter
test
inc
(bad)
mov
jmp
mov
push
pop
sahf
dec
test
sub
lods
cmp
mov
ret
cmp
fmuls
push
mov
jb
dec
in
lret
cmp
fwait
aad
test
pushf
xor
cmpsb
push
gs
jg
out
mov
das
fisttpll
(bad)
push
sub
mov
insb
scas
stc
jnp
sub
xchg
add
fbld
mov
inc
adc
push
xlat
iret
mov
hlt
scas
dec
mov
dec
iret
dec
mov
mov
and
mov
sbb
xlat
pop
adc
and
and
xchg
fadd
imul
dec
jl
cltd
aaa
(bad)
shll
nop
mov
fistl
dec
cmpsb
pop
mov
jno
cmpsl
leave
push
or
ljmp
mov
push
or
lret
(bad)
mov
int1
lds
jle
adc
js
lds
nop
cld
jl
sub
jp
lcall
testl
adc
in
mov
and
(bad)
loop
inc
idivb
jbe
or
mov
pop
xchg
lret
loope
in
push
mov
test
ja
lods
pop
out
cmpsb
scas
outsl
push
enter
mov
fmulp
jne
mov
cli
push
push
sbb
(bad)
sbb
sub
loope
xor
inc
in
jo
or
and
insl
xor
or
(bad)
mov
inc
fisubs
enter
push
nop
or
mov
adcl
pop
out
iret
mov
cmp
repz
cmpsb
mov
xchg
mov
mov
shrb
test
movsb
mov
xlat
and
int
or
in
insb
jnp
mov
ret
imul
pusha
xor
fninit
jmp
jg
sbb
push
pusha
jns
sahf
mov
add
(bad)
mov
mov
cmp
repnz
and
sbb
push
mov
xor
call
jg
or
add
movsl
xchg
cmp
cmp
ret
sub
push
into
inc
hlt
add
int1
mov
shrl
cltd
andl
cmp
push
test
dec
push
insl
jle
js
(bad)
dec
mov
in
hlt
cmp
es
aas
jecxz
int
mov
in
jg
push
and
sahf
jb
adc
pusha
cld
js
fndisi(8087
adc
and
jne
and
aad
mov
cli
cwtl
cmpsb
dec
(bad)
pop
sbb
and
adc
fadds
data16
dec
cmp
aad
mov
mov
fstps
pop
(bad)
(bad)
lret
aad
lods
adc
sbb
dec
ret
add
xchg
js
stos
fistps
or
mov
jle
cmp
mov
ret
es
adc
add
ret
mov
inc
inc
push
inc
xchg
pop
sub
xlat
lret
sarb
mov
xchg
push
inc
sub
int
mov
fsubrs
(bad)
and
addr16
dec
pusha
dec
loope
iret
push
mov
in
adc
jae
ficoms
nop
(bad)
jl
sbb
sub
mov
xchg
(bad)
jne
mov
and
adcb
testb
loop
insl
sbb
adc
sarb
jge
enter
enter
adc
xor
dec
scas
ljmp
out
scas
sbb
ja
push
jecxz
inc
js
lods
mov
jle
shl
lret
movsb
pop
(bad)
pop
repz
dec
mov
lds
xor
gs
ficoml
sbb
lea
rcl
cmp
cmp
fisttpll
out
pop
iret
sub
xchg
xchg
repz
ljmp
push
xchg
dec
xchg
adc
pusha
pop
or
adc
pop
clc
jae
pop
mov
das
mov
call
test
mov
xchg
push
rcrb
loope
sbb
mov
xchg
test
mov
push
in
xchg
mov
push
js
xor
(bad)
stos
jnp
(bad)
ja
into
mov
mov
xor
ja
mov
xchg
aas
pop
and
xchg
test
jecxz
in
int3
adc
sbb
mov
xor
lahf
jecxz
push
shrb
mov
jno
into
xor
cmp
(bad)
subl
mov
inc
gs
sbb
imul
pop
loope
inc
sahf
movsl
stc
movsb
aad
jmp
int1
sub
jg
in
(bad)
and
shl
push
mov
andl
and
pop
test
dec
mov
push
jo
sub
mov
vhaddpd
int
lods
mov
fsub
js
pop
adc
or
lret
aam
mov
cli
aam
mov
fbld
imul
imul
mov
adc
xor
mov
jnp
call
mov
sub
arpl
flds
adc
sarl
xor
sti
jp
add
imul
call
or
push
jp
mov
outsb
dec
jge
out
int
in
and
jp
or
in
scas
xor
aaa
insl
xchg
sub
cltd
dec
subl
pop
test
scas
mov
in
mov
shrb
push
pop
push
movsl
fs
mov
clc
stc
add
jne
push
fistpll
sub
or
mov
fmull
in
add
cmp
rorl
out
mov
sub
bound
add
out
std
movsb
shll
or
xchg
(bad)
adc
in
cmpsl
pushf
sub
stos
hlt
mov
arpl
cmpsb
adc
int
rolb
(bad)
jns
jb
(bad)
daa
out
out
adc
rcll
and
sub
pop
mov
pop
cmp
iret
data16
(bad)
sbb
cmp
pop
notb
sub
sbb
pop
nop
pop
xor
aad
rcrb
pop
ja
and
jp
and
in
loop
pop
ret
gs
(bad)
stos
cli
movsb
mov
lahf
frstor
gs
or
pop
mov
ret
ja
dec
and
cmpsb
xchg
xor
