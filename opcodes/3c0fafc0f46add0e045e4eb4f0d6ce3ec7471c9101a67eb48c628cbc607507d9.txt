cmp
mov
push
pop
jo
repnz
hlt
loope
xchg
dec
adc
mov
mov
adc
fstpt
xlat
arpl
lock
mov
push
decb
jne
mov
enter
test
call
arpl
mov
push
jb
pushf
(bad)
dec
ret
or
fistps
xor
lcall
pop
js
pop
ds
xchg
int
add
push
push
popa
push
adc
notb
or
sub
and
int1
cmpb
lea
cmpsb
(bad)
mov
(bad)
lock
mov
adc
jae
lcall
scas
push
addb
loope
jbe
enter
imul
enter
jno
jo
xor
sub
lcall
decl
push
xor
cs
jbe
outsl
sbb
dec
or
aaa
xor
xchg
bound
scas
xchg
sub
mov
jmp
scas
leave
dec
cmp
pop
aas
cmp
xor
jns
cld
cmc
js
mov
inc
inc
cmp
jg
add
(bad)
sarl
inc
and
outsb
push
pusha
int1
adc
cmp
cli
scas
sbb
pop
into
mov
lock
push
mov
hlt
les
mov
stc
cmp
dec
test
mov
hlt
test
mov
add
push
int
fidivl
add
int1
add
and
jno
test
repnz
push
daa
inc
jne
or
push
jnp
adc
flds
mov
mov
into
jmp
adc
out
aaa
iret
lcall
xchg
(bad)
enter
push
(bad)
dec
pop
cmp
pop
es
mov
jmp
imul
add
divb
add
jg
mov
jne
dec
pop
mov
idivb
add
mov
push
sub
shr
mov
jnp
adc
sbb
dec
lds
dec
dec
mov
mov
cs
cmp
xor
shll
sub
pop
fsts
cld
fwait
lods
ss
mov
repnz
pop
xor
push
mov
insb
popf
jge
fcoml
mov
in
out
mov
xchg
mov
mov
jnp
nop
pop
imul
xlat
xor
add
popf
clc
add
push
lcall
inc
fwait
cmp
xchg
mov
jno
jmp
pusha
fisttpl
mov
sarb
sbb
pusha
push
cltd
cmp
loope
mov
cmpsb
jg
lcall
cltd
(bad)
pop
or
roll
adc
xchg
into
cmp
jecxz
or
mov
jmp
adcl
xchg
jns
push
jno
out
lret
insb
in
jns
xchg
addl
orl
test
stos
scas
add
daa
cmp
lahf
ds
fucomi
arpl
fnstcw
adc
aas
(bad)
mov
add
shlb
sub
lret
push
test
adc
rclb
cmp
imull
xor
scas
ja
scas
sbbb
sbb
cld
inc
lret
mov
sbb
pop
cwtl
test
pop
inc
js
cmp
shlb
sub
insb
dec
pop
movsb
fisttpl
xchg
loope
popf
push
jl
dec
xchg
cs
pop
out
pop
insb
mov
fsubrp
lods
popf
daa
sarb
xor
push
mov
inc
lcall
in
fs
mov
sar
lret
aaa
push
loope
adc
pushf
mov
fildl
in
xlat
add
mov
loope
outsl
inc
outsb
sbbb
adc
xor
mov
cs
scas
mov
xor
jmp
not
fcomi
divl
test
and
dec
gs
dec
pop
jg
jb
pop
mov
mov
aam
fs
lods
shrb
and
fwait
lret
sarb
popf
mov
sub
mov
xor
(bad)
cmpsb
jge
mov
xchg
loopne
les
mov
lret
adc
push
cmp
repz
fwait
outsl
and
fstl
out
test
aas
in
xchg
or
xor
cwtl
inc
push
imul
jnp
stos
in
fsubrl
mov
cld
jbe
aam
sbb
pop
jae
rolb
mov
negl
mov
xor
cmpb
mov
push
xor
or
stc
dec
push
lods
aad
hlt
out
fwait
mov
inc
cli
rcrb
jecxz
adc
std
pushf
dec
mov
push
in
push
ss
(bad)
les
test
inc
dec
mov
fdivrs
scas
shl
aas
xchg
cwtl
pushf
pop
sub
xchg
dec
push
js
inc
push
mov
mov
cld
call
jb
addr16
dec
dec
hlt
fimuls
data16
cmp
mov
pop
sarl
cmp
push
loop
mov
push
cmpsl
jnp
xchg
dec
pop
pop
pusha
pop
aas
mov
dec
adc
ret
or
xor
sub
inc
sahf
inc
ljmp
and
inc
xchg
xchg
mov
aaa
cmp
xchg
cmp
fdivrs
aas
(bad)
lods
jno
test
test
mov
add
cmp
daa
sub
mov
xor
inc
(bad)
push
loopne
scas
dec
add
inc
ja
out
pop
loop
btc
shrb
mov
cmp
daa
mov
cmp
jnp
jae
ljmp
xor
add
mov
mov
int1
imul
xchg
aad
xor
cmp
add
add
mov
pop
mov
outsl
push
xor
popf
push
pop
(bad)
repz
or
lea
orb
and
stos
lret
push
xor
sbb
outsb
jns
pop
popf
fidivrl
jo
cmpsb
jbe
lcall
push
addr16
inc
gs
mov
or
cmp
mov
cltd
pop
xchg
jbe
cmp
lret
clc
hlt
inc
inc
mov
dec
mov
mov
call
mull
fcompl
or
or
xchg
adc
cli
movsb
sbb
xor
pop
pop
dec
mov
cs
and
add
rorb
xlat
cmpsl
jo
repnz
adc
inc
mov
and
jbe
pop
inc
mov
subl
lahf
mov
pop
lret
out
jp
fsts
dec
mov
add
aas
mov
sbb
push
mov
sub
push
push
andb
out
bound
xchg
cmpsb
or
orl
psubq
push
mov
enter
sbb
jae
add
dec
and
ror
dec
repz
movsl
test
xor
outsl
push
pop
and
lods
mov
dec
mov
sub
clc
jno
xchg
xchg
aas
xor
sar
xor
lahf
jg
roll
cmp
call
arpl
push
push
pushf
(bad)
add
sub
loopne
fisubs
scas
outsl
cmp
jae
add
jae
lea
jmp
je
push
fldl
jo
push
mov
inc
or
pop
cmovo
popf
aad
add
loopne
jo
cmp
data16
pop
sbbb
mov
adc
leave
inc
movsb
int
scas
sbbb
aaa
mov
cmpb
mov
xchg
inc
sbbl
push
cmp
push
pop
aas
xchg
test
jmp
xchg
in
or
or
pushf
gs
xor
psadbw
lods
fistpll
push
test
xor
call
test
fcmovu
push
push
arpl
orl
cmp
adc
xchg
cmp
or
in
mov
xor
push
mov
dec
cli
or
hlt
mov
push
les
jmp
mov
adc
rcrl
fldt
je
dec
pop
movsl
fdiv
xor
imul
mov
or
push
xor
sti
xchg
xchg
cmp
idiv
jae
pop
lret
movsl
xchg
mov
stc
sbb
xchg
and
test
rcrb
movsl
movsl
push
cmp
pop
addr16
mov
jecxz
pop
gs
or
xor
dec
ljmp
xchg
out
addr16
lcall
cmp
jno
mov
jg
outsb
into
sub
je
and
cmovnp
loope
nop
jb
inc
add
out
aaa
sub
jno
dec
xchg
psubb
sub
mov
inc
push
pop
xchg
iret
in
and
push
aaa
cltd
outsl
pop
stos
cmp
mov
fidivrs
js
xchg
adc
addr16
outsl
es
add
adc
leave
push
and
cmpsb
push
jb
jbe
jae
or
mov
cmc
jne
xor
mov
js
jnp
mov
into
shrl
push
push
repnz
movsb
inc
adcl
into
lcall
lock
jns
lock
mov
or
sbb
pop
and
outsb
inc
add
inc
sub
sub
pop
in
