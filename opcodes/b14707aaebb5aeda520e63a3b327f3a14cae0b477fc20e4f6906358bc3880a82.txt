xor
xchg
push
test
popf
dec
arpl
sub
push
(bad)
pop
int
idivl
add
mov
out
fadds
sbb
jg
and
xor
pushf
arpl
xchg
dec
out
mov
jecxz
mov
push
pop
ficompl
mov
je
pop
mov
inc
lock
pop
lcall
jbe
loopne,pn
add
lods
xchg
dec
jae
inc
movsl
cmp
push
das
pop
dec
cld
xchg
and
push
mov
cmp
psubsb
into
add
ljmp
sub
(bad)
or
mov
and
pop
scas
jno
rcll
sbb
pop
jae
pop
popa
mov
push
imul
add
lcall
inc
out
bound
push
sbb
mov
flds
jp
into
aam
mov
int
push
jno
(bad)
mov
loope
dec
mov
jbe
mov
mov
mov
pop
(bad)
aam
stos
(bad)
mov
sub
into
jl
into
stos
adc
sbb
mov
clc
les
(bad)
outsl
rol
call
outsb
ja
pop
ret
xchg
outsb
mov
scas
les
adc
cli
xorb
add
and
repz
stc
sbb
es
pop
adc
out
sbb
fwait
ljmp
jecxz
out
mov
pop
in
jg
mov
mulb
(bad)
nop
stos
mov
sbb
xchg
(bad)
xor
add
lods
stos
mov
popa
ret
pop
pop
lds
loope
(bad)
sbb
hlt
in
stc
cs
xlat
jge
fistps
leave
xor
mov
test
test
and
cmp
push
sbb
jmp
scas
(bad)
xchg
pop
jnp
xchg
scas
jae
aas
mov
(bad)
dec
mov
inc
add
sarl
negb
into
pop
xchg
pop
sub
mov
aam
movsl
xor
adc
jno
xor
sub
and
cmc
add
dec
mov
cs
inc
xchg
sub
in
int1
pushf
mov
or
jnp
insb
test
ss
pop
cmp
imul
loope
jle
cltd
cmp
in
fs
mov
pop
iret
or
sbb
popf
lahf
jno
dec
jg
push
pusha
push
push
mov
imul
sbb
cmp
add
lcall
imul
fildll
bound
xchg
mov
inc
push
aad
jns
jnp
shl
mov
bound
call
int1
dec
jno
push
enter
fiaddl
fwait
sqrtps
int1
mov
incl
out
(bad)
add
(bad)
inc
cwtl
sbb
inc
call
shlb
lds
out
jne
sub
cmpl
cmp
xchg
and
pop
faddl
movsb
sbb
lods
je
data16
jl
pusha
jmp
fsubrs
scas
sbb
aam
pop
sbb
xchg
enter
sbb
and
fstpl
push
arpl
and
imul
and
imul
push
jns
dec
sti
or
xor
add
lret
jle
sub
(bad)
xchg
repnz
adc
popf
test
add
adc
jg
and
sbb
pop
xor
sbb
cwtl
jl
(bad)
aaa
dec
mov
push
jl
mov
inc
add
dec
cld
sub
xor
(bad)
mov
sti
xchg
roll
(bad)
cwtl
inc
lret
imul
push
outsl
inc
mov
jb
stc
mov
mov
pop
cli
sbb
push
mov
mov
dec
xchg
imul
pop
xchg
daa
nop
rolb
or
xchg
sub
adc
out
rcll
push
test
in
jbe
dec
jno
inc
push
movsb
xor
scas
shlb
cmp
adc
and
stc
add
adc
push
pop
cmp
cmp
sbb
cmpsl
cld
mov
jnp
add
mov
jp
or
jae
scas
cmp
jb
add
in
ficomps
mov
sbb
outsl
and
(bad)
stos
pop
dec
fsubl
and
ret
xor
mov
mov
jge
nop
lea
push
mov
pop
sarb
cmp
jo
mov
push
call
cmp
mov
cmp
clc
incl
cmpsb
inc
sbb
mov
sub
arpl
mov
push
xchg
call
pop
js
mov
dec
cmp
mov
add
pop
add
jns
adc
dec
mov
xor
xor
xchg
int1
shrb
inc
push
xchg
into
sarb
xchg
mov
adcl
jno
ss
(bad)
mov
add
fiaddl
repz
cmc
jb
lret
inc
push
sbb
inc
push
xchg
xor
popa
mov
ss
ja
filds
cmc
sub
(bad)
rclb
add
stos
fwait
stc
lcall
sbb
pop
cwtl
mov
and
(bad)
sub
shrb
jg
(bad)
in
and
fistpl
loope
or
(bad)
test
xchg
fisttpl
sarb
inc
out
sub
jmp
lahf
sub
lods
lcall
gs
pop
cwtl
gs
pop
mov
or
jb
dec
scas
and
cmpsl
dec
out
cmpl
negb
out
mov
and
pop
mov
xchg
push
(bad)
adc
rol
dec
aaa
negl
ffreep
es
enter
ljmp
or
nop
dec
inc
xor
int
mov
xchg
push
sbb
inc
sbbl
mov
xor
adc
mov
in
fisubs
mov
push
dec
mov
adc
push
inc
dec
bound
loopne
push
neg
pop
movsl
fildl
jb
xor
sar
pop
dec
(bad)
js
scas
repz
push
lock
lock
sub
fsts
xchg
dec
xchg
sbb
scas
push
outsl
cmp
xchg
orb
push
inc
sub
push
filds
xchg
or
shlb
addl
inc
fmulp
lcall
add
test
mov
sbb
test
shrl
data16
lods
pop
popa
mov
incb
jl
(bad)
sbb
call
dec
dec
inc
mov
ja
popa
mov
jne
fdivrs
cmp
int1
xor
xchg
add
push
push
add
inc
std
mov
cs
clc
addl
lret
xor
rol
mov
addb
add
add
or
add
sti
testl
mov
or
sub
cli
orl
xchg
mov
sub
cmp
pop
inc
rcrb
ja
rcl
nop
adc
call
xor
xchg
cmp
imul
sub
andl
(bad)
in
xor
cmc
std
jl
cmp
scas
sub
stc
cld
stos
push
jp
in
daa
fcom
aad
pop
cmp
adc
fcmovnu
sub
fistpll
xor
lcall
(bad)
mov
fisubs
mov
aas
std
cs
mov
aas
sbb
pop
push
xchg
push
fistpl
test
insb
gs
xor
nop
sbb
mov
out
lea
nop
sbb
lods
push
(bad)
dec
testl
fmuls
push
or
mov
dec
or
pusha
ret
not
xor
push
mov
or
cld
inc
insb
and
lds
dec
jle
or
mov
mov
je
jge
movl
dec
fldt
repnz
inc
adc
pop
mov
cmp
sbb
sub
imul
repnz
gs
push
or
inc
xchg
movsl
(bad)
in
mov
fsubrl
sub
pop
mov
xor
jns
repz
push
jns
popa
(bad)
push
jns
cmp
inc
movsb
imul
int
jns
movsl
mov
pop
jnp
stos
or
lods
sub
push
(bad)
cld
dec
lahf
lahf
or
in
lcall
jg
jne
fwait
dec
cmp
jbe
sub
daa
or
jle
dec
pop
(bad)
push
push
pop
mov
adc
sbbb
mov
mov
lcall
dec
xchg
xchg
cli
jo
daa
ret
inc
out
js
roll
insl
dec
movsl
sbb
push
das
imul
test
es
mov
lcall
movsb
mov
mov
mov
mov
mov
xchg
push
mov
popa
push
imul
xlat
xor
lods
shll
pop
jecxz
lea
loopne
pop
sub
out
or
mov
lea
movsb
sbb
push
rorb
pop
lgs
or
clc
aad
fbld
das
adc
into
cmc
bound
out
fcmovbe
sbb
inc
jne
sub
into
pop
dec
push
aad
(bad)
add
and
outsb
add
shll
