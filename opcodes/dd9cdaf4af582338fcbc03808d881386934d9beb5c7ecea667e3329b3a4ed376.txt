pop
cltd
jbe
and
ss
scas
mov
xchg
inc
into
and
data16
jmp
dec
mov
scas
push
push
jb
or
test
in
push
arpl
out
jl
and
(bad)
jl
push
mov
push
ret
sbb
jmp
mov
push
mov
xor
jno,pt
pop
jae
and
sub
xchg
push
cmp
cmp
jns
aad
jae
lea
ret
pop
outsl
cmc
jnp
data16
add
mov
stc
scas
cmpsb
jne
sbb
lods
gs
out
push
test
push
iret
push
mov
fdivrs
aaa
push
(bad)
mov
mov
pop
inc
xchg
xchg
xchg
adc
fnstcw
aam
mov
cli
data16
bnd
cmp
or
dec
std
cmp
cmovnp
jne
jp
in
xor
sub
ss
dec
xchg
dec
je
push
jecxz
cmp
mov
out
mov
push
sbb
cmp
dec
aas
(bad)
test
fwait
cwtl
mov
clc
xor
add
test
add
out
xor
mov
push
call
dec
xor
mov
incb
inc
sub
ret
mov
inc
stc
insb
sbbl
nop
lock
cltd
sbb
mov
fisttps
inc
pop
ret
shlb
cmp
loop
sbb
cmp
fisttpll
pop
daa
sti
dec
dec
and
sub
lret
or
jb
loope
cmp
mov
dec
cltd
bound
fmul
hlt
mov
gs
in
push
xchg
incb
or
xchg
jp
pop
push
xor
(bad)
testb
or
dec
ret
fadd
inc
les
xchg
adc
xor
addr16
rclb
enter
xor
mov
mov
in
push
call
in
(bad)
hlt
pop
or
mov
pop
jae
mov
sub
mov
cmp
int3
or
fwait
lock
mov
cltd
sub
cs
adc
int1
popf
scas
out
and
lret
loopne
inc
jmp
and
sahf
leave
mov
cltd
fbstp
and
push
inc
lods
mov
jge
popa
mov
(bad)
rcrl
stc
rcr
pop
jo
js
pop
ret
rol
pop
insl
mov
mov
in
int1
daa
xor
push
fildl
jp
nop
jo
in
sub
jno
push
mov
mov
pushf
call
inc
sub
mov
push
loopne
sbb
imul
pop
dec
and
xchg
mov
cmc
loop
test
leave
and
mov
cwtl
dec
push
sub
mov
stc
out
fdivr
cmp
cmp
loop
mov
clc
aaa
ret
out
cltd
dec
(bad)
rcrb
movswl
pop
scas
cmp
mov
push
add
hlt
and
xchg
xchg
dec
aaa
stos
mov
cmpsb
fcomps
je
or
pop
adc
sub
shlb
dec
jle
aas
mov
dec
and
ret
or
call
test
lcall
repnz
mov
dec
fistpl
fimull
mov
xchg
and
cmp
imul
xlat
imul
sbb
movsb
push
mov
ja
je
rorb
rorl
jbe
out
push
pop
popf
iret
in
call
or
dec
jmp
mov
cli
movsl
push
mov
xor
notb
push
mov
mov
fcoml
idiv
adc
and
enter
test
arpl
mov
(bad)
inc
(bad)
scas
out
mov
jno
fadds
mov
mov
imul
stos
out
addl
stos
xchg
xor
fcomi
daa
cltd
(bad)
aad
lret
lahf
movsl
xor
in
or
lret
mov
les
mov
das
pop
shlb
mov
mov
xchg
gs
lods
jmp
mov
stos
rcrb
mov
inc
jmp
hlt
in
cmpsl
xor
jmp
lock
lds
es
mov
test
mov
test
mov
and
test
mov
sahf
mov
leave
dec
push
add
sub
dec
mov
jle
pusha
push
sbb
pop
inc
aad
das
stc
stos
cmpsb
mov
imul
bound
push
jmp
cli
popf
mov
in
or
sbb
fistpll
push
subl
test
push
insl
mov
roll
xchg
lcall
sub
and
xlat
jmp
cmp
movsl
out
ja
and
push
enter
jo
test
imul
mov
and
sahf
leave
cld
gs
aaa
into
mov
jle
sbb
xor
repnz
xchg
jbe
mov
mov
mov
jo
and
cmpsl
iret
popf
adc
dec
pop
mov
into
mov
or
sub
pop
ljmp
notw
cs
jae
arpl
cmp
leave
int3
fwait
jae
jge
add
scas
xchg
pop
sbb
in
movsl
gs
in
aam
mov
mov
cwtl
jge
movsl
xchg
pop
rorb
in
pop
mov
(bad)
xor
cwtl
inc
xrelease
sbb
jp
subl
dec
pop
or
lods
incl
inc
imul
cld
pop
mov
outsl
or
xor
fstps
lods
das
int
jb
xor
(bad)
and
testl
sub
iret
push
out
dec
sub
jge
xor
dec
inc
fisubl
mov
cli
je
xchg
jle
dec
cmpl
out
xor
xor
iret
add
popf
mov
outsb
int1
dec
push
rclb
ljmp
lea
insb
je
push
cmc
out
fmuls
jne
push
push
pop
orb
jae
sbb
test
psubw
lahf
inc
mov
mov
std
xlat
shrb
fisubrs
fsubrl
sbb
mov
lds
mov
lods
dec
cli
inc
jae
ljmp
fcmove
repnz
lock
stos
outsb
out
fwait
push
sub
pop
hlt
hlt
push
push
and
sbb
push
mov
out
inc
jne
adc
pop
daa
adc
aas
dec
jp
in
pop
les
cmp
push
dec
sub
fisttps
lret
imul
clc
mov
push
mov
orb
out
not
jle
and
inc
mov
push
add
rclb
je
or
xchg
push
push
mov
mov
xchg
cmp
daa
dec
or
(bad)
mov
cmp
daa
loope
lret
or
fwait
pusha
fst
mov
or
dec
push
test
incb
cmpsb
scas
inc
daa
adc
jae
dec
std
push
sarb
cltd
pop
pop
dec
je
sub
or
pop
cld
(bad)
cmp
and
hlt
jno
lcall
rolb
inc
mov
pusha
adc
pushf
mov
enter
std
jo
dec
sub
es
inc
mov
pop
dec
sbb
sti
pusha
test
push
sub
inc
ds
mov
bound
dec
test
loop
inc
xchg
bound
testl
cmp
into
repz
pop
les
pop
movsl
mov
pop
pop
outsb
int3
push
and
cld
inc
cmp
roll
stc
pushf
xlat
add
cmpl
cltd
pop
insl
decl
dec
push
dec
mov
mov
ret
lods
xchg
pop
sub
mov
lret
int
xor
incb
fidivrs
sub
mov
inc
adc
jmp
xor
lods
aam
mov
mov
js
outsb
mov
stos
out
push
int1
sarl
(bad)
mov
cmp
fdivl
aam
cmpsb
push
sub
mov
cwtl
js
inc
add
mov
jbe
and
push
jb
and
sub
adc
mov
js
or
xlat
ja
cmp
nop
addr16
mov
dec
popf
jl
pop
clc
int
imull
adc
aaa
aas
mov
pop
sub
loope
arpl
or
divl
push
imul
cmp
pop
push
nop
push
jecxz
addl
xchg
push
aaa
and
inc
xor
mov
xchg
cmpb
ja
dec
cltd
jnp
scas
sbb
inc
into
cmp
sbb
andb
cvttps2pi
mov
mov
stos
dec
aas
pop
xchg
sbb
loopne
test
out
adc
xchg
inc
xchg
rol
pushf
jecxz
xor
pop
test
or
stos
add
(bad)
mov
jbe
cmpsb
mov
jecxz
mov
cmc
xchg
push
pop
call
mov
xchg
