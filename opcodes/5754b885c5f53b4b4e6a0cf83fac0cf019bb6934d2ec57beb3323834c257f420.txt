mov
scas
ds
mov
sbb
mov
push
rex.wb
lock
jl
repnz
mov
adc
xchg
fnstenv
test
mov
(bad)
mov
imul
rex.rxb
test
je
scas
pop
mov
std
mov
rex.wrxb
lret
movabs
pop
cli
cs
popf
jle
push
{rex2
lahf
sbb
(bad)
shrb
rorl
adc
movsxd
mov
rcl
nop
push
sub
xchg
scas
lock
add
mov
iret
rex.r
cli
fisubs
lea
out
cmpsb
(bad)
rex.wx
(bad)
negb
bnd
divb
fld
fs
(bad)
mov
jle
mov
loope
fdiv
mov
pop
jbe
(bad)
jno
sub
xchg
lret
jno
shr
addr32
mov
ds
jrcxz
sti
ret
cmp
sbb
out
xchg
push
push
or
movabs
rorb
addr32
cmp
and
je
out
ret
sbb
call
lock
movabs
scas
rcll
jl
mov
push
jb
rex.wrxb
push
scas
jae
(bad)
clc
lret
movsb
ret
adc
mov
outsl
or
(bad)
movabs
xchg
xor
shld
pop
ja
test
(bad)
jg
and
rorl
movsxd
movabs
jbe
cmp
xchg
xor
(bad)
sbb
es
cmp
call
push
(bad)
mov
(bad)
(bad)
push
lock
outsb
data16
lods
mov
(bad)
fnstcw
rcrl
rex.b
and
test
sbb
add
jp
in
(bad)
divb
shrb
and
jge
lods
int3
fs
mov
sahf
and
out
rex.wx
rex.wb
fimull
mov
sbb
stos
xchg
rorb
xor
and
mov
in
sbb
mov
mulb
in
rex.wxb
rex.wx
sub
lret
nop
cmp
jl
lock
(bad)
enter
(bad)
data16
sub
(bad)
pop
jnp
stos
in
lea
test
mov
rex
movabs
sub
jo
cmpsl
push
mov
xchg
popf
rex.x
(bad)
rex.wb
imul
add
mov
(bad)
movsb
(bad)
fisttpll
scas
add
rex.wrb
shrb
data16
xchg
xor
(bad)
loopne
jrcxz
(bad)
(bad)
(bad)
test
pop
cltd
fstps
(bad)
shrb
pop
lret
insl
js
and
cwtl
js
or
movabs
cmpsl
std
(bad)
(bad)
fldt
(bad)
(bad)
(bad)
(bad)
or
rex.r
rex.xb
test
sahf
rex.wr
(bad)
hlt
cmp
add
xor
outsb
push
pop
int
mov
lods
(bad)
adc
(bad)
out
cmp
sub
fsts
cmp
xchg
or
xchg
rex.wrx
loop
rex.b
(bad)
test
(bad)
jle
ss
pop
add
shrl
movabs
shrl
xor
(bad)
mov
adc
(bad)
cmp
rex.w
add
(bad)
or
rex.wrb
mov
push
stc
cmp
jrcxz
loop
or
ret
rcl
mov
mov
sahf
push
in
(bad)
outsb
(bad)
mov
je
push
adc
mov
(bad)
and
lock
cmp
lahf
out
mov
mov
cmpsb
and
sbb
rex
int
shl
mov
repz
pop
leave
mov
movsl
(bad)
std
push
(bad)
int1
or
adc
rex.wrx
rex.wb
pop
int
out
and
sbb
pop
adc
out
rex.r
cs
testl
xchg
(bad)
lahf
jle
sub
out
movabs
adc
mov
loop
in
mov
imul
addr32
movsl
cmp
es
jge
jge
push
ja
stos
test
push
and
std
fstps
add
cwtl
pop
(bad)
jno
or
(bad)
mov
imul
adc
(bad)
cltd
(bad)
jl
mov
sbb
shr
pop
(bad)
rex.wrxb
scas
add
mov
test
xor
mov
outsb
movsxd
xchg
or
lods
push
and
sbb
call
int3
xchg
push
mov
repz
shl
ja
adc
mov
push
fwait
xor
rex
jnp
cmp
vhaddpd
xchg
imull
clc
pop
(bad)
push
{rex2
mov
fwait
jle
out
out
or
sub
test
jmp
movabs
or
mov
cmp
int
sbb
mov
add
push
(bad)
jl
or
sti
insl
adc
in
cmp
test
movabs
movsb
and
movabs
imul
in
xchg
cmp
movabs
and
(bad)
(bad)
xchg
out
pop
xor
mov
mov
repz
or
enter
mov
xor
cmp
(bad)
xchg
(bad)
rex.wrx
call
push
(bad)
push
rex.rb
movabs
jmp
push
out
out
jg
add
mov
sbb
(bad)
(bad)
scas
xchg
xor
ja
rex.x
or
(bad)
and
enter
xchg
sti
(bad)
jle
xor
out
repz
leave
test
movabs
lret
xor
xchg
jg
loop
jg
or
popf
data16
sbb
scas
jge
fcoml
cmpsb
xor
scas
mov
ret
(bad)
incl
pop
mov
xchg
jbe
leave
adc
mov
jne
scas
(bad)
adc
mov
sbb
imul
jbe
rolb
jns
adc
mov
call
push
fs
rex
mov
(bad)
or
jg
jmp
(bad)
cmp
int
sub
call
jle
lahf
insb
sar
sbb
movabs
(bad)
rex.wb
rex.rx
nop
cmp
push
repnz
hlt
(bad)
mov
rcrl
(bad)
(bad)
jmp
outsl
and
push
adc
mov
sti
rex
or
rex.rx
and
jae
sbbl
adc
rex.r
rex.wrb
jne
push
sbb
mov
enter
loopne
loop
out
test
int3
data16
subl
decl
es
cmp
lret
jrcxz
push
jnp
mov
setbe
test
popf
nop
rex.rx
jb
(bad)
push
iret
xor
push
adc
xchg
scas
test
push
rex.wx
mov
scas
adc
mov
rex.wx
and
movsl
cmp
pop
jrcxz
enter
jns
mov
(bad)
js
cmp
xor
and
clc
and
cmpsl
movsxd
cmp
(bad)
ja
outsb
sub
cmpsb
pop
fsubrs
fildll
(bad)
adc
jle
mov
(bad)
(bad)
fnstenv
jge
and
mov
leavew
in
pop
lods
push
(bad)
adc
and
pop
(bad)
or
ja
(bad)
sub
rex.wrx
jle
jae
movabs
pushf
sti
cli
sub
pop
movsxd
movabs
mov
lahf
lock
mov
orb
rex.wb
movabs
(bad)
push
sub
or
rex.wx
movabs
(bad)
adc
outsb
cmp
(bad)
mov
cmp
sub
fisubl
pop
jb
repz
in
(bad)
mov
jp
clc
movabs
(bad)
(bad)
es
(bad)
fidivrl
leave
rex.x
sub
mov
and
add
subl
xor
push
pop
mov
movabs
(bad)
rex.w
(bad)
sub
fs
cmpb
cmp
(bad)
sahf
adcb
insl
loopne
ret
(bad)
jg
adc
mov
hlt
mov
cmpsb
shll
and
pop
sbb
movabs
cld
out
mov
xchg
pop
(bad)
mov
nop
pop
rex.wx
sub
cld
repz
loopne
jo
pop
(bad)
shrb
rex.xb
push
test
movabs
cmp
imul
mov
mov
adc
cmp
lods
pop
adc
(bad)
(bad)
mov
{rex2
stos
jns
mov
fimuls
mov
push
sub
test
lods
cwtl
stos
(bad)
push
sbb
(bad)
std
(bad)
stc
int
cmp
rex.wx
xor
scas
rcl
(bad)
cmp
scas
cmpl
fdivrp
mov
mov
cmp
pop
and
adc
mov
mov
jo
rcr
out
rex.wxb
jge
xchg
mov
and
lcall
fucomip
test
xchg
mov
xor
sahf
mov
mov
mov
mov
sub
rex.b
leave
xlat
rex.wrxb
push
and
mov
rex.wx
rex.wb
push
mov
loop
scas
mov
add
cmp
adc
jmp
insl
stos
mov
data16
mov
(bad)
push
test
(bad)
push
cmp
pop
mov
popf
ds
rex.r
{rex2
rex.wrxb
idivl
imul
(bad)
adc
rex.rxb
mov
rex.w
(bad)
jmp
lahf
rex.wrx
xchg
cmp
or
rol
cmp
sti
sub
fiaddl
(bad)
lret
mov
mov
mov
shll
jbe
mov
pop
lea
jnp
xchg
xchg
in
push
or
xor
fidivl
mov
xchg
jno
