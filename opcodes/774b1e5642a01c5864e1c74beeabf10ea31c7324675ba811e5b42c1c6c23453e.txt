lahf
or
lods
cld
cmp
pop
pop
inc
in
mov
clc
cmp
pop
aaa
inc
and
int1
and
ret
fbstp
out
sarl
pushf
(bad)
mov
ljmp
shrl
mov
xorl
cld
in
js
add
mov
pop
cmpsb
test
inc
fstpt
mov
cmp
mov
mov
les
and
lcall
iret
push
xchg
cs
rclb
push
dec
(bad)
mov
imul
idivb
popa
add
mov
idivl
fcmovnu
add
xchg
xchg
rcrb
push
ja
mov
jmp
mov
inc
repz
jg
adc
push
pusha
or
mov
popf
std
jmp
pop
inc
insl
in
clc
cmpl
jg
repnz
and
inc
push
mov
lahf
dec
cltd
cld
cmp
aam
fcomip
(bad)
arpl
insl
dec
mov
jb
xlat
popa
std
sbb
inc
pop
mov
test
ret
add
outsb
mov
or
out
scas
sahf
jg
push
aam
xor
bound
xor
sarl
stos
mov
pop
xchg
lds
clc
mov
pop
mov
mov
shll
pslld
outsl
pop
mov
enter
mov
testl
sbb
cli
mov
cmpsb
mov
test
cmp
or
cmp
pop
jbe
mov
inc
arpl
cmpsb
xor
mov
cmp
into
inc
mov
jecxz
xchg
adc
adc
xor
push
push
cmp
fldl
pop
push
sub
loopne
lahf
dec
ja
xchg
jae
pop
dec
sub
mov
pop
adc
int
daa
jne
adc
in
and
jo
mov
push
lahf
stos
ljmp
or
dec
scas
popf
adc
push
mov
das
gs
jle
xchg
pop
rclb
push
scas
in
inc
rol
out
push
push
rclb
or
shlb
out
imul
cmp
mov
mov
stc
(bad)
(bad)
jge
popf
clc
lcall
mov
into
xor
inc
mov
cmp
sbb
adc
mov
xchg
mov
jmp
mov
shll
xchg
lret
in
(bad)
xchg
dec
clc
jo
lahf
inc
xor
cli
cmp
and
adc
cs
pop
xor
andb
mov
sub
outsl
rcl
mov
mov
push
push
call
divl
jmp
lret
mov
leave
sarb
iret
jle
mov
imul
jg
mov
add
lcall
rcrb
sbb
pop
jecxz
pop
mov
aaa
fisttpl
fisubl
ja
in
lods
push
mov
xchg
cmp
cmp
inc
mov
cmpsl
xor
sbb
sti
cmpb
out
daa
sbb
mov
jge
inc
outsl
inc
mov
into
xchg
in
dec
jb
push
jle
fstpl
push
in
pop
mov
jno
fnstenv
or
cwtl
add
push
mov
ds
push
loope
insb
mov
mov
cmpsl
dec
jecxz
sub
jle
or
fwait
bound
ret
cmpsb
xor
ret
mov
imul
jb
jno
pop
stos
divl
sahf
push
pop
lahf
adcb
arpl
adc
add
scas
ljmp
sbb
testl
xchg
fwait
cmpsb
cltd
mov
xchg
ja
(bad)
mov
sti
je
inc
(bad)
jnp
dec
jge
xor
out
les
pushf
shll
scas
roll
movsl
pusha
inc
mov
inc
cmpb
das
sub
popf
in
mov
cltd
aam
ljmp
pop
xchg
sub
xchg
scas
aas
stos
das
fcmovnbe
cmp
push
lock
or
dec
ret
out
sahf
add
cmpsb
ret
pop
out
inc
mov
(bad)
(bad)
stos
jae
and
(bad)
dec
imul
and
rcrl
lods
add
scas
movsl
lds
popf
arpl
or
sti
sbb
in
out
add
bound
movsl
and
jle
loopne
push
sbb
shrb
and
dec
outsb
leave
test
loop
push
out
mov
cmc
dec
sub
adc
dec
and
dec
mov
bound
roll
es
jl
pop
movb
adc
mov
jbe
mov
loop
and
xlat
test
ljmp
dec
mov
dec
js
shlb
pop
xlat
iret
js
cmpsl
inc
(bad)
mov
into
mov
mov
adcl
aaa
xor
xchg
out
pop
cmpsb
pusha
dec
mov
mov
andl
loop
sub
xchg
mov
cmp
mov
rorl
data16
lods
mov
call
jbe
insl
daa
dec
adc
das
pop
pop
cmpsb
mov
loopne
mov
xor
int1
stos
add
jge
jo,pt
pop
outsl
insl
inc
mov
xchg
(bad)
lcall
sahf
inc
call
jg
insb
xlat
imul
pop
sub
mov
push
and
dec
or
loopne
test
add
mov
out
adc
cwtl
add
sbb
and
cmp
mov
mov
nop
jecxz
decl
adc
loop
test
dec
rsm
loopne
int
out
ret
fcmovb
xor
sti
lods
mov
out
scas
dec
addl
shl
mov
mov
je
pop
jle
cmp
movsb
(bad)
mov
fwait
add
push
xchg
mov
scas
jp
aas
xor
pop
das
lret
jecxz
lods
sub
jp
addr16
iret
test
ljmp
lahf
stc
sub
jp
repnz
mov
add
insl
xchg
jnp
lcall
xor
or
lret
jmp
pop
sbb
pop
dec
mov
sub
xor
xchg
xlat
mov
xchg
mov
and
stos
xor
mov
jns
push
int1
stos
les
mov
sbb
xchg
jne
rolb
cmp
sub
sub
rcll
test
dec
sbb
xlat
scas
cmp
movsl
add
dec
pop
(bad)
in
mov
(bad)
jp
notl
lahf
dec
xchg
jae
cmp
movsb
sbb
xor
mov
les
and
shrb
scas
xchg
jg
aas
lods
sarb
bound
add
js
es
and
xchg
fnstenv
cmpsb
cmc
stos
or
lret
fstl
mov
hlt
xchg
ret
movsb
mov
push
rcrl
repz
mov
dec
push
jl
dec
adc
and
fcoms
stos
xor
jl
pop
movsl
mov
pop
inc
jecxz
pop
sub
jp
sbb
cmpb
pop
adc
gs
in
xor
int3
sub
movsb
pusha
movsl
pop
(bad)
mov
js
lret
adc
inc
leave
sarl
aas
adc
ja
cmp
int3
les
push
push
ja
cmpsb
mov
xor
(bad)
leave
aas
push
mov
cmp
jg
pop
(bad)
adc
stos
js
inc
jp
adc
(bad)
insb
scas
or
and
fisttpl
sbb
add
(bad)
outsl
pop
mov
pop
shlb
lret
sub
popa
jno
inc
scas
add
pop
lods
in
hlt
jle
stos
push
in
cs
pusha
es
nop
cmp
inc
push
or
xlat
push
ja
jl
xchg
jle
push
popw
xor
sbb
mov
mov
and
outsb
ret
inc
add
mov
ja
sbb
add
cmpsb
jnp
out
add
mov
push
or
push
sub
xor
cs
or
scas
jnp
sub
mov
cwtl
add
pop
loopne
xchg
xor
movsl
xor
cmpsb
and
out
daa
inc
iret
jmp
imul
lahf
divb
loopne
in
xor
inc
fdivl
fldl
add
sub
mov
push
sub
mov
inc
jle
lods
addl
adc
push
mov
pop
lods
inc
out
push
push
lds
lahf
aam
add
dec
outsb
pop
cmp
inc
pop
ret
loop
jno
out
jbe
setbe
mov
cld
scas
addb
js
mov
sbb
cwtl
pop
xchg
or
lret
sub
das
(bad)
adc
cltd
and
mov
dec
out
pop
and
jge
mov
andb
out
sti
push
add
mov
pop
push
cwtl
mov
pop
sbb
push
xchg
mov
add
pop
inc
mov
loop
