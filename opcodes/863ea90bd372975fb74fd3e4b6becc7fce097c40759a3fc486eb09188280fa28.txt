(bad)
(bad)
call
in
push
mov
push
call
test
jne
mov
push
push
push
call
add
(bad)
jo
shlb
or
jne
mov
pop
pop
ret
xor
jmp
je
(bad)
cld
push
push
add
rclb
jne
imul
mov
lcall
fcomps
sar
leave
ret
dec
sub
push
lret
mov
mov
mov
add
fisttpl
mov
mov
(bad)
dec
cld
clc
ret
mov
adc
xchg
pop
sub
subl
mov
mov
xor
rcr
push
fmull
or
or
pop
mov
lea
aaa
in
lock
ja
add
mov
std
dec
jle
ja
lahf
mov
push
lea
iret
and
test
test
mov
ja
mov
xor
inc
mov
fdivrs
ret
sbb
jb
mov
mov
push
add
in
xlat
fiaddl
les
stos
in
movsl
pop
pop
insb
pop
xor
and
int3
jmp
leave
dec
lock
jae
scas
sti
in
add
and
mov
rcll
mov
cmp
iret
or
adc
iret
sti
jg
pop
cmc
int
fsubl
out
inc
and
mov
rcl
sub
xor
andb
xor
inc
adc
sbb
in
loopne
pusha
test
or
and
xor
add
(bad)
fisubrs
xor
adc
lods
idiv
je
pop
shlb
push
arpl
pop
and
sahf
xor
pop
mov
push
rcpps
add
mov
les
mov
cmpl
andl
cwtl
adc
out
(bad)
jns
adc
fists
les
andl
cmpsl
adc
out
push
(bad)
push
sbb
repz
or
cmp
adc
dec
pop
jmp
cmp
(bad)
mov
dec
inc
xor
leave
movsl
repz
lds
shll
je
mov
inc
mov
dec
add
and
je
add
sub
sub
int1
xor
into
cmp
call
jbe
mov
or
int3
add
mov
add
aam
inc
iret
ret
int3
or
inc
mov
mov
push
sbb
jb
jbe
add
imul
xlat
push
mov
add
inc
pop
push
or
mov
or
incl
mov
mov
push
adc
adc
or
sbb
jne
dec
ja
push
jbe
cld
pusha
xchg
jno
xor
mov
sete
pop
test
sbbl
or
enter
into
xor
call
or
xchg
pop
into
into
inc
fs
push
dec
and
jno
sub
inc
xor
nop
loope
xor
add
call
mov
and
xor
fstp
idivl
sbb
or
mov
sbb
out
data16
in
decb
sbb
arpl
fcmovnu
inc
fmul
push
(bad)
sahf
fimull
mov
sbb
push
cmp
or
test
repnz
sahf
xchg
pop
sub
jmp
paddsb
outsl
mov
shl
or
mov
out
fbld
sbb
and
sub
fstps
push
(bad)
and
push
ja
sub
daa
mov
scas
mov
xor
cwtl
add
and
jmp
or
pop
cmp
roll
inc
push
or
sub
or
imulb
pusha
daa
insl
les
test
inc
xor
sub
sbb
sub
push
mov
hlt
cmp
insl
push
pop
ljmp
jmp
mov
and
mov
and
xchg
jb
adc
movsl
sbb
push
add
and
jo
and
jo
adc
sbb
in
jp
pusha
or
cmp
add
std
(bad)
imul
push
pusha
mov
and
out
iret
add
rolb
ds
sti
movsl
loopne
cltd
dec
or
inc
sub
iret
mov
sub
mov
push
pop
in
or
push
iret
jnp
sub
jo
je
in
mov
es
rolb
sub
adc
or
je
sbb
fiadds
mov
xchg
mov
xor
mov
shlb
fsubrp
adc
or
mov
in
push
int3
jl
sbb
inc
mov
fsubrl
in
jle
add
int3
(bad)
loope
in
push
lock
mov
xor
repnz
lret
in
in
sbb
add
cs
xchg
lret
cwtl
add
cld
add
mov
clc
xchg
sub
cld
add
lods
insb
mov
int1
cmc
mov
dec
jbe
pop
inc
adc
and
rorl
insb
in
xor
inc
sub
or
enter
or
lods
clc
and
sbb
or
adc
addr16
jns
sbb
sub
sahf
xchg
xor
cmp
inc
enter
mov
dec
mov
iret
fcoms
ret
pop
hlt
jns
out
sbb
pop
and
adc
fmulp
enter
push
xchg
aaa
repnz
inc
lret
sub
mov
mov
jns
sahf
xchg
pushf
aam
in
(bad)
enter
or
mov
inc
in
add
cmpsl
jge
pop
bound
cmp
push
shll
mov
cmpl
mov
and
sub
lock
out
pop
jg
das
je
dec
cmp
fistpl
ljmp
lds
lea
sar
mov
imul
sbb
pop
pop
addb
xchg
add
mov
lret
fldcw
lea
cmp
jle
jmp
(bad)
and
add
enter
sub
clc
sti
fistps
subl
inc
xor
mov
cmp
out
fldl
jecxz
push
lea
mov
(bad)
loopne
add
xchg
and
pop
xor
add
cltd
sbb
xor
xlat
push
popa
rcrl
xchg
add
cmp
push
pusha
mov
int3
fmuls
jg
sub
adc
dec
xor
(bad)
fisubrl
or
incb
mov
in
mov
clc
pop
cvtps2pi
mov
jbe
sub
dec
cmp
inc
sbb
adc
xchg
shrb
cmp
stos
es
test
adc
outsl
sti
pop
adc
sbb
imul
out
lea
setbe
jmp
xchg
push
xchg
(bad)
push
pop
vmread
fiaddl
cltd
test
dec
push
fists
js
push
hlt
push
mov
movl
int1
mov
test
je
push
sbb
push
int1
(bad)
loop
push
int3
cmp
mov
push
and
or
fcomip
(bad)
adc
sub
dec
je
dec
sub
je
aas
loop
xor
or
add
lcall
sub
add
add
lea
mov
into
(bad)
mov
jmp
xchg
jne
mov
imul
mov
mov
pop
aam
data16
lea
ret
mov
test
dec
adc
(bad)
decl
add
add
dec
in
stos
inc
inc
inc
ds
mov
add
loope
pusha
pop
sarb
add
out
jg
pop
or
mov
sbb
mov
or
xlat
and
pop
pop
or
mov
sbb
pusha
push
mov
jno
push
sbb
cwtl
jo
fs
ja
push
and
pop
jb
lea
(bad)
dec
pushf
xchg
js
inc
dec
mov
cmp
mov
clc
aas
nop
inc
cmp
jge
cltd
iret
mov
insb
clc
adc
or
addb
shrl
lock
out
push
(bad)
sub
push
push
push
mov
divl
mov
dec
jno
push
pop
fmull
jne
lock
and
add
and
fcoms
pop
mov
jge
shl
push
sbb
lea
mov
jge
push
fistpl
in
dec
dec
xlat
dec
stos
cld
push
int1
push
mov
cmpsb
mov
mov
inc
je
or
sbb
movsl
je
lods
mov
adc
daa
mov
inc
or
loope
sbb
sbb
ficoms
and
adc
in
lock
mov
mov
mov
loopne
pop
dec
or
call
xchg
fs
mov
push
jns
xchg
dec
pop
adc
ficoms
movsb
dec
pop
and
push
push
cmp
and
push
fdivrs
inc
mov
in
notb
push
cld
add
cmp
test
sbb
in
mov
or
enter
mov
sbb
mov
push
adc
pop
cmp
dec
data16
mov
sub
dec
cli
ror
push
ficompl
pop
cmp
or
pop
nop
