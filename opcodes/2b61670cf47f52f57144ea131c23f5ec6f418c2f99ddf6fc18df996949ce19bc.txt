movabs
call
es
sbb
push
mov
movabs
sub
or
cmpb
xor
lahf
cmp
sub
movabs
xchg
scas
xor
or
adc
imulb
insl
test
(bad)
sbb
and
sub
outsb
jrcxz
(bad)
cmpsb
adc
cmp
fisubl
(bad)
push
addb
mov
out
rex.wrxb
xchg
sub
testl
rex.x
cmpsb
xlat
sub
rorl
cmp
scas
pop
xchg
(bad)
rex.xb
movsl
mov
add
rex.wr
or
int3
xor
pop
je
fsubr
rex.w
pop
ret
or
push
je
sub
in
xor
lods
pop
(bad)
stos
pop
lods
pop
adc
jo
pop
rcr
call
or
push
push
stos
{rex2
fmull
rex.xb
vpunpckldq
xchg
(bad)
mov
(bad)
filds
mov
(bad)
(bad)
and
jbe
push
or
and
js
fimuls
jbe
xchg
xchg
cmp
lea
imul
push
cmpsl
loope
sbb
addr32
push
mov
loopne
(bad)
(bad)
(bad)
adc
subl
add
xchg
rex
movsxd
cmp
lret
xchg
rex.wxb
imul
add
in
push
jmp
push
push
jmp
int1
loopne
sarb
jno
mov
movabs
hlt
fwait
sub
xchg
nop
and
in
int3
sbb
push
in
fistpl
rex.r
rex.wxb
sbb
movabs
jmp
sub
int3
pop
jne
mov
out
mov
(bad)
cmp
cwtl
cmpsb
loope
in
cmp
(bad)
mov
test
push
in
rex
xor
cmc
xchg
sub
in
rex.rxb
(bad)
and
(bad)
ss
(bad)
movsl
jmp
mov
xorl
out
adc
jg
(bad)
{rex2
ja
iret
movabs
sub
(bad)
int1
scas
xor
clc
add
mov
and
push
lret
add
and
rex.wrxb
ficompl
fwait
or
mov
movabs
xor
and
fdiv
andl
test
(bad)
xor
(bad)
fisubrl
and
add
(bad)
jmp
lret
(bad)
jne
out
jo
mov
andl
std
push
clc
jmp
jns
xor
movabs
{rex2
outsb
scas
incl
jle
jg
add
xchg
push
lret
and
(bad)
mov
rex.rx
xor
and
pop
fisubrl
push
or
(bad)
loope
sub
addl
je
in
xchg
dec
cmp
jrcxz
es
pop
repnz
lea
(bad)
mov
out
in
cs
loope
sbb
xchg
adc
sbb
adc
(bad)
movabs
push
movabs
push
(bad)
shll
enter
and
(bad)
int
rcll
(bad)
add
{rex2
jnp
shlb
testw
mov
sub
rol
cmpsl
pop
stc
mov
movabs
mov
out
{rex2
and
(bad)
push
insb
repz
fwait
clc
and
adc
cmpsl
cmpsl
jne
std
xor
(bad)
mov
add
ficomps
imul
in
jmp
jmp
jne
and
nop
jg
(bad)
and
outsl
movabs
jge
stc
push
addr32
fsubl
(bad)
mov
cmpsl
(bad)
rex.wrb
rex.xb
rcrb
jmp
push
pop
insl
sub
rep
out
cld
addr32
rex.wrb
pop
(bad)
jge
movabs
push
loopne
movsxd
and
cmpsl
cmpsl
int
xor
ss
sub
outsl
outsl
stos
out
mov
cmp
jns
cmp
cmp
unpcklps
mov
lret
movsl
xor
sub
data16
repnz
movabs
sbb
ss
test
scas
gs
imulb
iret
out
xchg
rex.wrx
fwait
add
(bad)
mov
(bad)
xchg
rcll
repz
sbb
jne
cmp
add
pushf
loope
clc
push
xlat
mov
popf
sbb
sbb
add
call
(bad)
xor
clc
cmc
fsubs
or
jrcxz
(bad)
mov
rex.wrx
push
scas
sbb
jb
{rex2
rex.wrb
rcrb
pop
test
(bad)
movsl
movabs
jmp
test
push
push
cmp
loop
fldt
cld
rex.wrx
int3
push
cmpsl
jmp
adc
fldt
rex.r
test
mov
fsub
pop
cmp
jmp
(bad)
loopne
xor
jl
(bad)
test
pop
out
mov
jne
sub
ds
rex.x
cld
(bad)
adc
in
add
pop
(bad)
test
test
(bad)
lret
rex.wb
mov
movabs
cbtw
push
(bad)
and
sti
sahf
sub
jo
es
sahf
out
rcrl
mov
and
mov
imul
pushf
add
out
mov
movabs
addr32
outsl
movsl
lods
mov
mov
xchg
jmp
add
test
sbb
lret
adc
(bad)
xor
jrcxz
mov
rcrl
push
cltd
mov
push
movabs
cmp
pop
xchg
(bad)
(bad)
loopne
jmp
movsl
xchg
out
int1
movsb
repz
sbb
sbb
jrcxz
xchg
gs
or
xchg
sub
xlat
nop
(bad)
pop
jl
loop
std
fists
jbe
leave
or
in
cs
(bad)
and
rex.wrx
sub
enter
mov
push
cmp
rex.rx
and
(bad)
ss
jl
(bad)
fwait
{rex2
fisttpl
jbe
cs
loop
(bad)
and
adc
loope
out
negl
mov
(bad)
adc
cmp
shr
lods
shld
and
je
in
movabs
cmp
sub
insl
std
xor
movabs
(bad)
and
enter
pop
jns
(bad)
mov
and
repz
nop
mov
(bad)
xchg
push
add
jnp
outsb
scas
pop
mov
cmpsb
faddl
sbb
adc
ret
fs
mov
(bad)
jbe
stc
(bad)
jae
(bad)
mov
imul
mov
and
adc
jl
in
mov
scas
mov
enter
mov
(bad)
lret
(bad)
and
hlt
loop
lea
xchg
adc
mov
(bad)
rex.rx
fcoms
frstor
fdivl
or
mov
(bad)
ss
addr32
adc
jrcxz
and
(bad)
cmp
imul
jg
sar
jae
or
out
sbb
jbe
jns
dec
rex.wb
jb
mov
(bad)
movabs
outsb
xchg
(bad)
and
pop
movabs
push
and
push
clc
add
lcall
(bad)
lods
jmp
mov
sub
mov
(bad)
pop
movabs
xor
outsb
pop
lret
pushf
lea
loop
jg
xlat
mov
adc
decb
cs
int
ss
(bad)
shll
cmovg
add
sub
push
adc
call
xchg
xor
lahf
add
pop
(bad)
rex.wx
fidivrl
test
dec
xchg
sbb
scas
test
add
mov
sbb
pop
xor
call
mov
rex.wrx
(bad)
(bad)
add
adcl
pop
fwait
ret
lods
sbb
jmp
pop
in
(bad)
xchg
or
movabs
in
cmc
(bad)
and
mov
lock
push
push
rex.wrx
rex.wrx
shl
loopne
sbb
sbb
rex.wx
imulb
sti
lret
(bad)
(bad)
in
rclb
(bad)
frstor
cmpsb
push
or
orl
sbb
rcrl
ds
jg
jb
movsl
adc
lea
or
sub
and
mov
fstpl
cmc
addr32
lahf
popf
loope
mov
out
insl
sbb
pop
in
cmpsb
fwait
iret
(bad)
call
loope
(bad)
ss
cs
(bad)
insb
mov
rex.rxb
rex.wrxb
lods
cli
testl
(bad)
and
in
pop
cmp
rex.b
add
shrb
sahf
cmp
shlb
setg
in
(bad)
(bad)
loop
fisttpll
and
sti
adc
rex.wrb
insb
add
lods
add
je
xchg
cmp
movsl
movabs
neg
xchg
iret
add
movsxd
push
out
stc
shll
(bad)
repnz
fwait
or
or
out
mov
in
adc
test
rex.wrb
xchg
call
leave
in
rcr
push
jle
(bad)
push
(bad)
xor
jg
(bad)
adc
mov
(bad)
fs
(bad)
(bad)
loop
xor
repz
jmp
movabs
(bad)
jge,pn
cld
(bad)
es
lahf
and
push
rex.wxb
popf
xor
mov
(bad)
sbb
xchg
test
rex.wxb
(bad)
sub
out
(bad)
mov
(bad)
jmp
or
xchg
xchg
(bad)
xchg
sbb
clc
movabs
(bad)
(bad)
sub
scas
adc
rex
loop
xor
mov
rex
push
subl
(bad)
mov
js
call
jo
and
repz
or
