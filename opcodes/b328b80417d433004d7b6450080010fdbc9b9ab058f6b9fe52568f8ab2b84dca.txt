shl
in
aad
repz
test
add
mov
mov
pop
xchg
jns
xabort
clc
in
notb
xchg
pop
sub
mov
cmp
mov
loope
mov
or
lods
add
out
xchg
lock
hlt
rolb
decl
or
mov
adc
mov
(bad)
pop
adc
out
mov
test
nop
jecxz
cwtl
inc
lret
mov
rcll
mov
cmp
jmp
in
push
inc
(bad)
and
push
std
clc
xchg
test
ret
and
clc
pop
sub
mov
in
mov
test
mov
mov
inc
ror
fiaddl
aaa
push
mov
mov
dec
mov
cli
mov
iret
sbb
dec
and
xor
mov
fcmove
nop
push
fcom
pop
lds
rorb
mov
pop
popf
in
cwtl
sub
jecxz
pop
ret
int3
cltd
out
jae
pop
lret
int3
test
jl
lea
aad
inc
pop
imull
popf
in
adc
or
mov
je
lock
adc
xor
mov
dec
mull
lret
hlt
sub
mov
add
in
ss
and
test
mov
into
int1
lret
repz
adc
sahf
int
popa
repz
shll
mov
pop
insb
push
ds
xor
mov
roll
xor
sti
es
mov
pop
dec
xor
daa
pop
(bad)
mov
fnsave
scas
sarl
pop
lret
cli
loop
pop
jg
add
add
sub
scas
imul
cmpsl
add
gs
out
popf
mov
rorb
mov
and
xor
lret
mov
mov
pop
cmp
xor
bound
test
mov
add
(bad)
clc
mov
shll
xchg
imul
dec
clc
and
int
dec
lock
(bad)
mov
lret
or
lds
bound
xor
filds
push
(bad)
and
push
test
(bad)
push
or
jmp
nop
adc
pop
mov
mov
inc
sbb
and
testl
dec
jo
mov
fdivrs
sbb
push
(bad)
cmp
out
negb
adc
pop
xchg
dec
xlat
jle
aam
sub
cltd
das
adc
mov
mov
or
mov
inc
loop
out
arpl
arpl
inc
add
pop
mov
ja
jmp
aaa
jnp
arpl
enter
mov
nop
leave
or
(bad)
dec
jge
push
mov
dec
imul
push
mov
or
pusha
roll
idiv
xor
mov
sub
inc
jecxz
add
xchg
lea
cli
out
mov
test
xor
lds
dec
jmp
xor
mov
popf
mov
in
inc
into
std
insl
aam
push
mov
inc
push
dec
cmp
mov
cld
iret
inc
pop
testb
sbb
xchg
sbb
int3
xchg
mov
adc
mov
loope
int
add
jp
xchg
divb
pop
cmpsb
push
or
add
shrl
(bad)
jns
xor
out
outsb
push
out
ror
sbb
push
mov
fsubrl
enter
aaa
repnz
loopne
pop
push
mov
and
loope
push
mov
fstpl
add
shll
test
insl
cli
sub
sub
add
pop
hlt
xlat
stc
dec
stc
int3
mov
jp
cmp
call
mov
int
or
sub
xchg
and
mov
pop
test
int3
xor
(bad)
adc
test
mov
out
sti
lcall
es
lods
fadds
cmp
lret
loopne
imul
mov
stc
sbb
lret
ss
xchg
rcr
outsb
es
into
cmp
or
lea
int
sub
rcrb
je
insb
movsl
push
mov
out
enter
push
lcall
lret
cs
or
stos
test
pop
lods
in
cs
lods
cmp
xchg
mov
jns
or
movlps
mov
rcrb
and
pop
int1
out
push
sbb
dec
out
xor
sbb
adc
(bad)
xor
inc
out
movsl
ret
pop
fsubl
in
mov
xchg
shrb
lock
cmp
ret
test
enter
inc
adc
xchg
stc
add
push
or
mov
sbb
dec
divb
pop
inc
cmpsl
js
ss
int1
sbb
inc
or
add
push
pop
mov
jg
xchg
std
jae
(bad)
imul
inc
cltd
add
loope
adc
xor
mov
jmp
fistps
pop
pop
popa
fstpt
aas
dec
xlat
mov
cltd
(bad)
mov
fwait
into
mov
mov
fdivs
dec
inc
ljmp
sarl
popf
data16
or
sbb
fistpll
add
lds
loope
jns
xchg
test
push
rcr
ror
jg
or
clc
add
xor
aas
movsl
xor
dec
enter
pop
cmc
test
in
xor
adc
in
int
lods
or
sbb
pop
sub
xor
out
out
loopne
loopne
popf
or
hlt
pop
out
les
(bad)
int3
clc
push
and
or
xchg
or
aam
(bad)
or
sbb
and
push
sarb
jno
mov
fsubrs
xor
sti
int1
add
ja
mov
int
cltd
pushf
push
je
jb
jge
dec
or
mov
adc
pop
pop
mov
inc
sbb
jge
iret
out
mov
shll
push
mov
jnp
push
negl
lret
dec
inc
or
adc
push
add
pop
lods
cmp
adc
jl
rol
or
xor
mov
loop,pt
cmpsl
and
or
pop
cld
lret
cmc
pusha
pop
xchg
(bad)
mov
adc
jmp
mov
jns
sarl
xor
or
xchg
mov
fcompl
jecxz
sbb
gs
rolb
pop
add
push
cmp
jecxz
or
cwtl
clc
hlt
add
fcom
rolb
xorb
inc
cld
mov
addr16
je
adc
cmp
(bad)
lret
out
sub
jmp
xor
jo
shl
jp
adc
lods
iret
mov
mov
add
test
and
lcall
shrb
imulb
pop
cmpl
mov
or
stos
cld
mov
iret
(bad)
jno
pop
lea
loope
test
lcall
mov
sahf
test
mov
add
or
loope
jg
in
pop
and
lret
mov
int3
adc
in
adc
mov
int3
mov
or
nop
dec
hlt
mov
jmp
dec
repnz
mov
xchg
int
lret
mov
loopew
lock
adcl
insl
xor
lock
cmc
shll
(bad)
lods
jecxz
dec
cld
dec
(bad)
or
popa
jo
inc
lahf
inc
inc
std
push
pop
mov
mov
sub
imul
adcb
out
cltd
lods
sbb
push
add
adc
fcomps
lods
dec
and
mov
push
scas
int3
add
jns
mov
mov
cmpsb
rcl
lock
push
ret
push
loopne
sub
cmpsb
inc
and
(bad)
inc
mov
(bad)
lret
(bad)
jbe
stos
std
cmpsb
js
loope
dec
outsb
xchg
add
sahf
sbb
sahf
mov
xor
add
sbb
enter
mov
pop
(bad)
jns
mov
ja
fs
push
es
aaa
insb
loope
(bad)
jge
push
fstpt
mov
nop
mov
je
jge
push
imul
ljmp
xchg
movsl
push
or
adc
enter
nop
decl
push
(bad)
jne
out
mov
add
ss
inc
cmp
push
ret
rorb
push
add
shl
insl
pop
mov
mov
dec
xchg
mov
mov
repz
call
xor
push
outsl
mov
inc
inc
fdivrl
lret
xchg
pop
xor
pop
roll
rorl
or
mov
pop
cmp
xor
fbld
add
sahf
pushf
mov
cwtl
rcrb
divb
mov
and
push
mov
inc
into
cs
in
ja
adc
add
add
hlt
mov
and
int
stos
lods
cli
sbb
fdivs
push
cmp
mov
les
adc
jb
mov
clc
mov
rcll
in
push
mov
cmpsl
andl
ss
cltd
jbe
enter
faddl
inc
repnz
pop
push
orb
jecxz
