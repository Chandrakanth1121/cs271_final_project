add
cmp
add
(bad)
out
sti
pop
jmp
and
loop
add
loopne
add
pop
incl
xor
scas
js
dec
sub
lret
inc
insl
sub
iret
dec
or
or
lcall
enter
iret
and
movsl
repz
out
push
inc
fsubs
int3
and
pop
add
lcall
inc
dec
int
imul
cmp
stos
sbb
add
pop
xchg
ret
sbb
inc
mov
push
cmp
out
cld
pop
popa
pushf
(bad)
dec
jae
mov
fcomi
test
xadd
int
cmp
sub
xor
or
mov
inc
cmc
or
add
pop
imul
mov
jecxz
lcall
add
add
push
loop
in
pop
xorl
fisubrl
loop
and
bound
inc
add
loop
insl
and
and
mov
dec
sbb
mov
push
jecxz
pop
and
rcr
aaa
and
loopne
adc
adc
ret
push
adc
std
mov
in
ret
pop
lods
xor
movsl
shll
jl
mov
fadds
leave
cmp
inc
(bad)
push
jp
lret
adc
add
jbe
in
jo
fistpll
pop
push
es
sub
out
and
mov
sbb
lds
(bad)
loope
or
add
loop
xor
pop
lea
push
or
mov
or
jmp
adc
jmp
xchg
jns
inc
(bad)
jmp
shl
imul
mov
or
add
cmc
inc
hlt
nop
jecxz
repnz
aas
insl
ss
imul
out
or
xor
fwait
cmp
jl
or
add
das
mov
push
lds
ss
mov
fsubrs
and
movsb
pop
(bad)
pop
pop
pop
js
(bad)
call
push
push
inc
mov
push
cmp
jnp
fcoml
inc
and
xor
sbb
pop
or
mov
mov
xor
mov
push
xchg
out
aad
xor
leave
sub
dec
jno
jp
ss
cmovp
push
push
je
adc
push
sbbl
and
pop
sub
pop
clc
and
mov
push
add
pop
arpl
in
dec
mov
sub
sarl
pop
jecxz,pn
push
stc
dec
fwait
enter
stos
cmpsb
sub
imul
test
sub
clc
jg
ds
aam
mov
pop
adc
pop
cmp
jno
xchg
lock
mov
arpl
stos
aad
js
inc
int
push
pop
inc
lds
and
xor
push
jp
hlt
in
mov
stc
sbb
popf
push
subb
jecxz
inc
fistpll
(bad)
movsl
idivl
jb
js
nop
push
push
subl
add
out
jmp
int1
push
dec
pop
loopne
dec
stc
cmp
mov
inc
test
fidivrl
or
mov
cmp
jecxz
je
sub
inc
jno
and
(bad)
adc
iret
pop
inc
fwait
hlt
clc
cmp
cmp
cwtl
scas
push
insb
repnz
(bad)
scas
andl
add
push
cmp
ljmp
add
or
xor
clc
dec
sbb
xchg
push
mov
inc
stos
jnp
inc
xor
push
adc
rclb
hlt
fstpt
(bad)
jg
inc
mov
adcl
adc
cld
pop
aad
call
push
arpl
push
sbb
clc
sub
in
sub
and
ss
and
das
push
sti
ds
iret
cmpsl
inc
xor
jge
xor
rorb
(bad)
cmp
out
push
mov
rep
or
jae
jecxz
adcl
cmp
iret
mov
in
sub
xor
jg
mov
cmpsb
scas
sub
and
mov
add
adc
jo
sub
pop
lcall
test
pop
hlt
adc
sar
cmc
pop
ljmp
dec
xchg
and
ret
aam
es
sub
push
out
dec
call
cmpsl
inc
and
cmp
cmp
push
rolb
pop
std
mov
nop
add
out
nop
rolb
jb
dec
cmp
leave
inc
mov
mov
imul
push
idiv
out
movsl
cs
out
and
lahf
nop
pushf
inc
xor
daa
rcrl
mov
jle
movsl
ret
mov
mov
(bad)
cmp
arpl
repz
jl
pop
add
xor
adc
aas
dec
cld
xor
push
xchg
mov
dec
int3
enter
call
in
mulb
ljmp
scas
pop
xor
fimuls
movsb
rcrb
sub
mov
jg
cmp
fbld
push
loop
mov
mov
jne
jp
outsb
cmp
add
mov
lret
cmp
sbb
sub
test
aad
xor
and
inc
mov
jecxz
sahf
out
(bad)
mov
dec
xor
xchg
insl
shll
dec
aas
iret
aad
sub
leave
sub
lret
sbb
dec
out
push
mov
xor
add
ss
dec
popa
dec
push
sub
inc
aam
jl
das
mov
bound
loop
arpl
(bad)
subl
aad
stos
lea
add
ficoml
and
lea
ret
adc
pusha
stos
in
dec
les
shll
jbe
or
pop
xor
and
out
sub
jo
mov
adcb
and
jne
mov
data16
ss
dec
ret
mov
jge
push
popf
adc
std
adc
mov
fwait
jns
and
and
rolb
nop
lock
dec
dec
nop
cmp
mov
dec
jb
(bad)
xor
nop
(bad)
repz
enter
lock
push
idivb
orb
in
lock
loopne
inc
ss
lds
filds
pop
inc
outsb
adc
lahf
int3
push
lret
movsl
les
stc
(bad)
adc
mov
mov
sub
push
or
sbb
mov
(bad)
loopne
sarb
dec
pop
les
and
xor
xor
filds
adc
faddp
push
inc
pop
xchg
leave
lds
in
dec
push
xor
dec
(bad)
(bad)
test
jnp
xchg
xor
mull
and
movsb
lret
xlat
mov
test
addl
popf
cmc
(bad)
ljmp
xchg
test
cmp
daa
pop
cmp
loope
push
pop
push
jecxz
repnz
xchg
into
push
or
int3
mov
mov
mov
jns
popa
sbb
adc
in
push
lods
and
ret
inc
and
and
push
pop
pop
cmp
(bad)
jl
jns
and
popa
sub
and
push
add
fcmovbe
popf
imul
lret
(bad)
xchg
bnd
popa
push
je
pop
les
mov
cmp
bound
jecxz
push
fdivrl
loop
inc
jne
dec
inc
in
lea
int3
cs
stc
or
addr16
bound
out
cltd
mov
enter
daa
nop
and
lds
dec
cmp
rolb
mov
pop
lcall
fdiv
mov
and
inc
(bad)
call
pop
sub
js
push
ret
pusha
(bad)
push
incl
loope
xlat
movsl
sub
fcmovb
mov
bound
ds
pop
cmp
mov
dec
jl
cmp
mov
inc
xor
(bad)
repnz
popa
insb
data16
adc
xor
xorl
pop
ljmp
xchg
dec
rcl
int
adc
cltd
clc
addr16
sbb
ret
push
or
pop
inc
sbb
push
dec
inc
insl
mov
fstpt
sbb
data16
lock
add
and
mov
data16
or
movsl
(bad)
and
dec
adc
ljmp
ret
je
lods
cmpl
xor
out
aaa
inc
xor
shll
cmp
js
loop
adc
dec
incl
sarb
arpl
and
(bad)
(bad)
or
xchg
jmp
sbb
add
and
int1
mov
mov
insb
loop
popf
rcr
adc
and
and
int3
lcall
jb
dec
add
jbe
sbb
mov
mov
test
adc
inc
outsb
aaa
repz
stos
cmp
xchg
mov
xchg
xor
cmp
xchg
(bad)
dec
cmp
xor
(bad)
mov
adc
cli
shrb
xchg
rorb
mov
pop
repz
xchg
cmc
inc
cld
xchg
pusha
int3
enter
cli
negl
cld
lea
dec
jg
cmp
bound
ret
add
