stos
xchg
xchg
jns
sbb
pop
xchg
xor
call
push
push
int1
insb
lock
xlat
xchg
mov
sbb
or
xor
xchg
pop
cld
not
adc
enter
int3
shl
adc
cmpsb
dec
adc
jne
dec
xchg
in
insb
(bad)
outsl
add
sahf
jbe
repnz
stc
(bad)
bound
add
ljmp
jle
cmpsl
jp
mov
seta
cs
push
fstl
inc
or
pop
lea
dec
adc
fnstenv
pop
sbb
push
(bad)
push
or
dec
xor
dec
pop
dec
mul
sbb
pusha
and
mov
push
(bad)
jb
in
sahf
add
loopne
cmp
fidivrs
add
loope
lea
dec
jg
add
pusha
out
shll
add
repz
lcall
outsl
add
cmp
or
sbb
adc
mov
add
lret
jmp
jae
mov
push
cmpsb
dec
jns
cs
adc
lock
lods
cmpsb
out
out
sub
inc
mov
xchg
imul
stc
xor
adc
ja
shlb
es
rclb
ret
imul
push
out
pop
test
mov
xor
pop
sbb
pop
add
fbld
mov
or
push
bound
inc
and
fxch
pop
mov
pusha
loop
sub
sbb
out
mov
(bad)
int3
pop
dec
insl
mov
push
pop
jge
push
movsl
(bad)
jb
and
inc
mov
sbb
rcll
fs
sti
mov
sbb
js
or
jo
dec
mov
pop
lock
jle
xor
popf
lcall
cmp
jl
sbb
push
adc
mov
jg
pushf
jmp
scas
jl
(bad)
pop
mov
shll
popa
add
jb
mov
push
add
adc
les
ret
pop
jecxz,pt
lods
mov
and
pusha
(bad)
push
jb
enter
adc
imul
stos
push
mov
add
pop
lret
jecxz
orb
push
dec
(bad)
and
mov
and
stc
mov
jne
cmp
fs
mov
sbb
mov
push
xor
movsl
cmpsl
mov
lods
mov
sub
ficoml
adc
inc
outsl
test
adc
push
movsl
test
mov
add
jge
mov
or
loopne
sbb
jge
lret
cwtl
add
push
stos
outsb
add
pop
mov
(bad)
lods
(bad)
int3
mov
andps
call
sub
jl
std
cmpsb
cmp
pushf
loope
pop
ret
mov
ret
sti
jge
and
nop
add
sub
add
push
jb
adc
mov
push
ljmp
and
push
out
es
iret
cmpsb
sub
cmp
adc
inc
pusha
xchg
inc
sarb
loopne
mov
sbb
mov
xor
sbb
fildl
js
cli
mov
sbb
sbb
ret
and
hlt
(bad)
mov
or
dec
sub
inc
aad
das
lret
adc
jmp
clc
in
les
mov
dec
inc
ja
jp
stos
ret
inc
dec
mov
shrl
int
mov
and
sarl
lds
add
outsb
test
stc
scas
cmpsb
sub
mull
in
sbb
inc
lret
jecxz
mov
jo
ljmp
gs
out
(bad)
pop
jle
out
ds
mov
jmp
push
outsl
push
mov
scas
mov
mov
psubd
xchg
push
cltd
cmpsl
ds
cmpsb
pop
bound
loop
paddb
out
ds
dec
notl
outsl
adc
sbb
cld
add
test
(bad)
jp
rcll
mov
push
xchg
stc
jnp
popa
lock
push
adc
sbb
push
mov
xchg
fmull
or
jmp
inc
push
push
dec
jnp
roll
jnp
mov
jle
mov
inc
jl
test
cld
cmc
out
jo
clc
and
js
fstps
mov
fadd
outsb
pusha
cmp
mov
insl
and
pop
dec
and
mov
jnp
arpl
pop
push
ds
mov
mov
hlt
and
or
and
cmp
stc
and
push
xchg
sbb
movsl
gs
push
insb
dec
lea
add
or
add
add
and
dec
mov
pop
pop
dec
lock
jns
mov
jne
inc
xchg
sbb
inc
bound
pop
ja
flds
inc
adc
mov
inc
js
push
cmp
pop
jno
xchg
mov
sub
pop
imul
sub
mov
jmp
mov
outsl
pop
inc
jmp
fcompl
and
mov
cmp
(bad)
mov
insl
jbe
(bad)
cmp
fmul
fwait
mov
mov
lret
out
shll
imul
push
call
repz
mov
cmp
dec
mov
push
add
pop
inc
ds
lahf
or
imul
cmp
and
xor
loope
gs
movsl
daa
fwait
aam
scas
mov
into
pop
arpl
movsl
jmp
(bad)
repnz
mov
push
loope
pop
out
pop
inc
es
or
sbb
and
sbb
xor
add
(bad)
ds
data16
imul
mov
(bad)
mov
adc
push
scas
dec
ja
mov
push
push
ss
pop
cli
test
add
adc
or
fs
sbb
cmpsb
sbb
(bad)
xor
and
adc
(bad)
cwtl
jge
dec
rorl
or
lcall
sbb
sbb
add
or
mov
mov
dec
js
or
cld
and
adc
or
cmpsl
fimull
ret
sbb
and
sbb
push
sub
rolb
mov
aam
imul
sub
lret
imul
sahf
lahf
cmpsb
jo
push
popa
outsb
into
test
les
mov
adc
pop
in
(bad)
sub
mov
shlb
cmp
push
jbe
and
aam
imul
or
jnp
mov
addr16
jb
bnd
lock
scas
push
gs
dec
lods
out
in
mov
lcall
mov
scas
pop
loopne
jl
add
mov
stos
mov
pop
fimuls
mov
sub
ds
in
(bad)
sti
push
ret
mov
jl
push
mov
lcall
jbe
jno
sub
test
lahf
out
sub
mov
mov
cmp
push
aad
cmp
xchg
jnp
fists
adc
pop
adc
or
ret
lods
push
fwait
shrl
mov
fs
(bad)
xchg
dec
je
pop
push
xor
ljmp
mov
loope
xchg
fsubrl
cmp
dec
stc
in
or
sbb
pop
loopne
push
adc
dec
sti
mov
dec
test
dec
outsl
mov
hlt
outsb
adc
pop
bnd
nop
mov
pop
cmp
out
hlt
sub
jbe
int3
mov
jo
mov
popa
push
ret
lds
jp
imul
cmpsb
imul
mov
push
dec
mov
scas
fldl
inc
pusha
add
and
bound
stos
jbe
push
movsb
jae
inc
lcall
rcll
inc
test
(bad)
repnz
add
cmpsl
inc
fisttps
ret
mov
cmp
dec
sarb
mov
jb
fadd
adc
lcall
jl
scas
jb
ficompl
pop
adc
insb
mov
jne
testb
adc
dec
mov
add
xor
aaa
cmp
pop
dec
or
mov
jae
add
test
adc
mov
fwait
in
int
int1
shll
test
push
cmp
fidivl
aad
repz
dec
js
shrb
mov
movsb
mov
add
outsl
mov
cmp
fildll
insl
push
push
les
mov
mov
or
nop
sub
push
mov
lcall
cmp
sbbb
or
xchg
imul
es
add
inc
push
mov
dec
bound
loop
sub
jnp
cmp
rcrb
dec
(bad)
pop
orb
sbb
fsts
sbb
divb
jae
adc
flds
jae
(bad)
pop
(bad)
or
shll
xor
push
scas
lods
xor
mov
cltd
loop
int1
out
jl
imul
pop
xchg
jb
aam
adc
imul
fcomip
adc
jle
lods
dec
push
mov
mov
lret
dec
push
repz
add
mov
subl
sar
push
sahf
mov
dec
aam
or
lea
fdivr
ret
