xor
xor
add
pop
and
(bad)
xor
lret
(bad)
cld
and
add
push
(bad)
add
add
sbb
add
add
int1
or
add
rex.xb
xor
push
loop
mov
movb
rex.r
(bad)
adc
xor
divl
adc
test
pop
cltd
imul
(bad)
rex.wb
fsubrs
adc
xchg
push
(bad)
movabs
rex.x
fisubrl
movsxd
and
xor
rex.b
fbld
and
jne
sarb
sbb
(bad)
lret
movabs
sub
sbb
add
cmp
xor
lahf
test
int1
mov
repnz
cmpsb
movabs
(bad)
and
xchg
imul
mov
(bad)
(bad)
rex.wr
pop
cwtl
(bad)
xchg
jmp
pop
or
xchg
ss
int3
rex.xb
rex.wrx
lret
loope
mov
jmp
je
cltd
sarl
es
or
outsb
add
push
(bad)
gs
movabs
ret
rex.b
(bad)
adc
push
cld
mov
mov
and
and
imul
insb
mov
sbb
rex
jne
sub
cmp
jbe
decl
mov
adc
sbb
movabs
mov
pop
repnz
ss
mov
cmp
ja
xor
int
cmp
fnstcw
rol
outsb
ret
(bad)
xor
(bad)
movabs
(bad)
push
stc
imul
mov
add
(bad)
(bad)
push
sub
{rex2
cmp
fcomps
ja
lahf
rex
fisttpll
xchg
sub
es
(bad)
xchg
push
ret
(bad)
ficoml
scas
out
xor
jno
(bad)
(bad)
mov
scas
rex.x
mov
add
or
or
and
push
sbb
out
rex.rx
add
cmp
rclb
xchg
(bad)
es
or
nop
pop
int1
mov
add
cld
mov
sbb
cltd
mov
cltd
pop
rdpmc
adc
(bad)
leave
cmp
or
and
testb
jae
cmp
jns
movabs
ds
jge
xchg
xchg
jl
cltd
mov
(bad)
jb
sbb
fcoms
(bad)
(bad)
cli
(bad)
ss
{rex2
push
mov
mov
push
repz
andl
mov
(bad)
adc
je
jl
cs
mov
add
rex.xb
xchg
push
lahf
fisttpll
xchg
data16
sahf
xor
mov
pop
jl
cmp
sbb
stos
adc
cmpsl
ss
mov
xchg
dec
pop
es
movabs
push
mov
(bad)
mov
cld
rex.wrx
add
(bad)
push
stos
lea
lret
push
call
jae
fiadds
stos
rex.wr
loop
int
adc
fdivs
(bad)
and
notl
mov
adc
std
ds
fadd
or
rex.wrb
movsxd
je
push
gs
xchg
mov
sbb
sbb
cmc
adc
mov
enter
(bad)
sbb
outsb
rex.wrx
repnz
xchg
(bad)
int1
movabs
cwtl
jl
lock
mov
cmp
mov
mov
std
pushf
mov
ret
xchg
repz
(bad)
push
mov
rex.wrxb
adc
jle
ds
pushf
lahf
fisubrl
lea
enter
(bad)
(bad)
sbb
(bad)
rex.r
movabs
xor
push
imul
xchg
subb
(bad)
sti
sbb
add
push
xchg
cmpsb
rex.rb
and
pextrw
out
movabs
add
xchg
pop
rex.w
push
test
sub
test
insl
mov
sbb
pop
push
in
xor
cmpsl
mov
(bad)
mov
(bad)
lock
ss
mov
sbb
fisttpll
xchg
test
push
cmp
out
xchg
mov
notl
add
(bad)
mov
push
rcr
jg
pop
ljmp
out
sub
movabs
test
fsub
imul
sbb
(bad)
jmp
cltd
and
popf
stos
sbb
sbb
or
rex.b
sub
(bad)
jle
ficomps
add
adc
movabs
and
xor
cmc
rex.wx
(bad)
(bad)
int3
nop
fstpt
ficoml
(bad)
and
mov
scas
xchg
js
std
rcr
(bad)
mov
movabs
rex.rx
ds
jo
sbb
repz
int3
xchg
loopne
xor
outsl
and
mov
outsl
mov
movabs
loop
jmp
xor
adc
jo
insb
(bad)
repnz
(bad)
xor
push
xchg
(bad)
lret
nop
cmpl
sub
ret
mov
(bad)
adc
push
and
or
ficomps
sti
int
lret
call
(bad)
jl
in
cmpsl
pop
and
stos
mov
rex.wx
(bad)
rex.xb
add
jns
movsb
cltd
jg
(bad)
add
xchg
and
or
push
pop
push
mov
or
and
mov
ss
rex.b
mov
xchg
rex.wb
rex.wrb
mov
{rex2
jrcxz
xchg
data16
stc
mov
fdiv
jrcxz
rex.xb
add
loop
movsb
loopne
add
leave
psubsb
(bad)
sub
xchg
jmp
movabs
jge
fisubrl
or
std
mov
cmp
test
mov
test
imul
(bad)
xchg
test
pop
sub
data16
(bad)
pop
shrl
mov
(bad)
scas
sbb
jne
push
and
enter
fstpl
mov
fnsetpm(287
sub
rex.wrb
sub
(bad)
sbbl
lods
cltd
adc
lea
test
shrb
sbb
sti
iret
out
ret
(bad)
xchg
(bad)
(bad)
(bad)
cmp
sbb
mov
pop
and
js
clc
lea
pop
adc
push
and
xchg
int3
add
or
test
xchg
cltd
pop
sahf
and
mov
test
js
rex.rx
lock
shl
lods
mov
pop
pop
notb
rex.wrb
rex.wb
movsb
(bad)
cmc
cmpsl
shll
mov
(bad)
(bad)
mov
rex.wx
fistpl
rcll
loop
inc
(bad)
int3
mov
movabs
cmp
sbb
rcrb
(bad)
sbb
movabs
fdiv
outsb
and
gs
movabs
pop
(bad)
lock
(bad)
insb
pop
imul
add
enter
sub
mov
movabs
fs
and
data16
sbb
addr32
nop
rex.rxb
xor
test
stos
ret
mov
test
and
(bad)
and
rex.wb
std
pop
mov
adc
repnz
in
rex.rxb
rcl
andl
cmp
cmpsb
stc
mov
(bad)
jrcxz
sbb
xor
xchg
and
cmpb
(bad)
sbb
pop
mov
addr32
rex.wrx
xor
gs
subl
xchg
(bad)
xchg
int3
fsubl
sbb
adc
int
xor
movsl
push
(bad)
ret
mov
movl
shr
lret
rex.rb
and
fs
and
sbb
mov
js
(bad)
movsxd
or
movabs
cmc
pop
cmpsl
or
lea
jo
and
cmp
(bad)
call
add
stos
sbb
fs
rex.wxb
call
shlb
cmpsl
rcrl
or
jne
out
or
lea
loop
adc
xchg
mov
and
rex.wrxb
(bad)
shlb
(bad)
std
and
sub
sub
or
cmc
xchg
or
or
jmp
xchg
shll
adc
rex.wx
(bad)
jo
jge
sub
scas
rex.x
(bad)
test
xor
(bad)
int3
in
out
lods
movabs
and
out
stos
repnz
xor
push
es
rex
lret
cmp
xor
test
fnstcw
push
fldt
add
pop
jb
je
jbe
cwtl
jno
stos
lea
(bad)
je
sbb
(bad)
int1
mov
adc
(bad)
ss
xchg
out
jns
fsubrl
movaps
xorl
push
adc
(bad)
sbb
mov
xchg
sub
mov
je
sbbl
xchg
pop
(bad)
movabs
lods
adc
rex.b
rex.xb
ds
(bad)
xor
or
jp
stos
push
rex.wrx
rol
(bad)
xchg
sbb
sub
imul
test
mov
pop
rex.wr
jns
insl
faddl
rex.rb
movabs
or
rex.rxb
cli
mov
stc
rol
sahf
add
xchg
out
test
sar
rex.rxb
jp
je
pop
out
(bad)
push
clc
pop
hlt
and
push
or
xchg
(bad)
rex.wr
insl
mov
mov
pop
(bad)
mul
xor
repnz
sbb
mov
(bad)
sarb
sbb
rex.wrxb
adc
push
scas
sbb
adc
(bad)
xchg
rex.rb
in
popf
sti
(bad)
testl
rex.wx
adc
cmp
addr32
push
jb
push
fwait
movsl
xor
repnz
mov
int1
loop,pt
jrcxz
sbb
and
imul
insl
cmp
lahf
jrcxz
mov
(bad)
push
imul
lsl
rex.xb
cmc
add
andb
and
mov
cmpsb
ljmp
in
