fmulp
mov
push
lds
mov
sarb
sbb
add
ja
movsl
in
lea
les
pop
jle
pop
push
lea
jmp
dec
push
cmp
inc
nop
mov
std
fs
jecxz
addr16
mov
cmp
(bad)
sub
int3
scas
cmpb
sbb
add
jbe
dec
add
sahf
inc
sub
rcll
pusha
rcrb
add
negl
out
sbbl
adc
filds
xor
stos
mov
dec
test
lods
push
pop
mov
dec
lret
sub
shll
inc
xor
nop
mov
push
jge
sbbl
std
jbe
and
cmp
rcrb
mov
iret
mov
int1
dec
lahf
adc
(bad)
pop
xor
push
repz
push
cmp
mov
mulb
fs
add
in
inc
adcl
imul
(bad)
sti
and
mov
in
mov
rorb
lcall
mov
pop
outsb
pop
out
inc
adc
es
xor
imul
es
lods
jns
jb
xorb
mul
stc
mov
fadds
(bad)
cmp
xor
sbb
and
mov
sbb
sarb
jb
push
mov
lcall
and
ficoml
(bad)
popa
adc
call
lret
xchg
pop
mov
stos
add
ljmp
lods
loopne
push
xchg
xchg
lds
rcrb
add
inc
jg
mov
xchg
in
pop
xchg
pop
enter
(bad)
sbb
push
jns
pusha
pop
fists
shr
inc
arpl
addl
pop
imul
mov
mov
aad
rorb
out
andl
adc
int1
mov
testb
push
lcall
jecxz
loop
arpl
adc
fisubrl
adc
cmp
enter
push
sbb
loop
lahf
sbbl
xchg
mov
sahf
mov
stos
test
aaa
movsl
xlat
cltd
clc
test
inc
mov
fstpl
addr16
es
push
or
or
repnz
rcll
xorl
jp
sbb
in
push
mov
lds
add
cwtl
xor
aas
jns
repnz
xchg
or
fnstenv
fimuls
and
hlt
cmp
dec
(bad)
jg
cmc
xchg
nop
cltd
adc
adc
dec
jne
insb
dec
(bad)
and
adc
ds
out
(bad)
fadd
(bad)
scas
xchg
pop
xchg
push
add
shrl
adc
jbe
outsl
xchg
loop
mov
adc
fsubr
inc
mov
sarl
sub
bound
aam
cmp
push
scas
ret
dec
push
lods
jmp
incb
(bad)
cmp
fisttpl
les
lret
pop
mov
das
test
ja
sub
jno
insb
push
daa
or
insb
rorl
clc
out
jge
jmp
xor
cli
rorb
jmp
jecxz
divb
pusha
je
iret
rsm
jmp
orb
inc
and
shlb
add
jo
sub
jne
mov
jno
jae
push
xor
push
lret
les
jb
add
(bad)
dec
cmpsb
int3
(bad)
push
lds
push
loopne
out
sub
pop
sti
lods
cmpsb
dec
jmp
sbb
pop
jl
addb
fildll
add
adc
mov
in
xor
ss
roll
inc
dec
popa
sbb
cmp
inc
stos
fisttpl
push
dec
adc
popa
bound
(bad)
lahf
jne
imul
rcrb
sbb
movsb
jecxz
sbb
mov
or
mov
or
cld
mov
pop
jmp
add
bound
xor
cld
xor
popf
shr
and
mov
sub
cmp
jno
mov
ret
mov
ror
(bad)
jo
sub
sbb
popa
sti
xchg
in
jne
or
cld
loop
mov
lahf
jae
imul
cmpsl
test
mov
cmpl
imul
stc
loopne
cmp
(bad)
and
mov
lcall
ss
push
pop
mov
cmp
xor
stos
insl
lods
dec
xchg
mov
xchg
outsl
mov
in
jo
aaa
repz
test
shll
xchg
aaa
stos
or
mov
push
cmpb
gs
or
jo
iret
leave
insb
ficompl
loopne
dec
roll
mov
push
cli
xchg
dec
lret
data16
xchg
mov
repnz
aas
xchg
hlt
fidivl
mov
push
push
iret
pop
lods
inc
xchg
inc
xchg
pop
push
sbb
cmp
lods
inc
push
fwait
js
push
mov
jo
call
(bad)
rcrl
sbb
aaa
sub
out
xor
dec
(bad)
repz
repnz
jg
mov
pusha
scas
test
outsl
inc
dec
inc
shlb
(bad)
cld
arpl
sahf
pmovmskb
xlat
mov
outsb
stos
mov
movsl
inc
pop
adc
js
mov
inc
imul
mov
fbstp
adc
notl
mov
and
lods
mov
sbb
push
cmc
stc
pop
fucomip
dec
sub
js
es
xor
aaa
jmp
out
aam
and
call
and
xchg
es
adc
sbb
and
out
xchg
shll
push
mov
mov
cld
xor
es
int3
mov
lods
lock
push
adc
test
jb
enter
mov
inc
jecxz
adc
and
mov
loop
aaa
mov
shlb
loopne
jl
test
sbb
pop
in
sbb
sub
lret
ret
(bad)
xchg
out
push
dec
subb
rol
rcl
popf
mov
dec
pop
jmp
lds
push
int
pop
shr
xchg
test
outsl
popf
pop
jae
sti
ja
push
fistpl
pop
fistpll
cmp
fucomp
mov
adc
shrl
mov
xor
jbe
jl
imul
(bad)
arpl
mov
clc
ja
mov
fbstp
and
mov
mov
mov
call
lahf
sbb
xchg
pop
dec
xor
push
repz
xor
mov
cmp
adcl
repnz
mov
cmp
out
int3
sbb
dec
rcl
in
daa
pop
cmp
das
push
clc
in
test
add
push
dec
stos
xchg
xor
push
testb
iret
add
pushf
aas
dec
xor
mov
ja
leave
dec
and
hlt
jmp
mov
cld
sbb
pop
push
je
adc
aam
(bad)
mov
out
sbb
cwtl
cmp
or
(bad)
scas
arpl
movsl
(bad)
pop
dec
aad
inc
sub
fdivrl
clc
nop
inc
sub
pop
aam
push
sub
push
andb
mov
sub
sbb
leave
js
push
mov
sub
fistpll
push
ljmp
mov
repnz
movsl
inc
sbb
cltd
and
daa
push
pop
add
lea
fisubrs
notl
mov
test
sbbl
sbb
sub
or
sub
sub
out
sbb
jecxz
inc
or
pop
mov
inc
xchg
je
hlt
cmpsb
mov
lret
inc
imul
jmp
inc
enter
cli
ret
aam
xchg
mov
mov
inc
or
inc
xor
leave
call
cmp
int1
insb
arpl
iret
lea
jne
aaa
xchg
cmpsb
lods
les
int1
(bad)
inc
jecxz
cmpsb
push
mov
push
sbb
imul
xchg
shll
xor
and
dec
insb
addr16
scas
mov
(bad)
mov
pop
inc
mov
fnsave
xchg
loop
adc
lock
push
push
xor
pushf
sbb
xor
mov
in
ss
pop
es
push
add
addr16
inc
leave
mov
int1
insb
adc
dec
imul
push
out
mov
push
lret
out
divb
dec
out
leave
jo
mov
enter
jmp
jne
outsb
sub
inc
mov
pop
sti
add
mov
xchg
insb
ljmp
in
movsb
jo
out
out
cmpsb
aad
cmp
jge
and
js
or
stos
push
mov
and
xor
pusha
lcall
fdivrs
xor
xchg
dec
push
mov
sub
jo
in
inc
hlt
xor
sbb
mov
les
sub
ja
neg
cltd
mov
and
xor
and
or
insl
movsl
lahf
test
shl
xchg
xchg
insb
addb
dec
outsb
popa
cltd
dec
and
imul
hlt
(bad)
jle
mov
mov
adc
mov
push
sar
nop
loop
cmp
sub
