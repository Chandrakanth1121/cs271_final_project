out
mov
aas
gs
adc
mov
adc
mov
adc
xor
rorb
fwait
mov
movsl
inc
add
fsts
int1
push
and
and
insb
mov
arpl
aad
push
shll
adc
iret
je
and
out
mov
fcmovnbe
cmp
pop
es
cmp
add
cmp
jmp
int3
add
vpsubd
add
outsb
fsubl
mov
pop
test
cmpsl
fwait
es
push
stc
or
fmuls
push
cs
and
and
fidivs
int
sub
scas
mov
adc
insb
repz
push
jae
dec
inc
mov
adc
sbb
push
leave
fmull
add
pop
inc
loopne
aad
cmovae
test
xchg
(bad)
aaa
stos
cs
xor
xor
inc
cmp
cmp
sub
add
sub
xlat
fs
ds
repnz
lret
gs
scas
dec
(bad)
aaa
(bad)
or
sub
pop
add
fcomi
and
stos
lods
sub
and
std
push
shlb
xchg
xor
clc
mov
jp
cmp
shll
pushf
jbe
sbb
and
jo
das
dec
sbb
pop
into
arpl
outsb
rcrl
sbb
sbb
inc
cmp
mov
ret
pop
cmp
xor
pop
out
push
dec
out
mov
push
arpl
sub
rep
push
xchg
nop
jae
mov
push
cli
xor
lods
or
jns
cmp
jg
sub
push
and
pop
jmp
sbb
mov
mov
dec
adc
push
scas
fadds
daa
cmc
jmp
lcall
mov
mov
(bad)
in
or
aaa
inc
mov
add
(bad)
cmp
cmp
inc
loop
mov
push
inc
(bad)
cmp
mov
clc
repz
lods
cmpsb
pop
cmp
aas
fst
inc
adc
add
lret
fdivrs
cmp
scas
push
adc
mov
xchg
arpl
(bad)
nop
and
xchg
dec
jp
inc
shrl
cmp
jo
cmp
ret
dec
das
incl
iret
and
cmpsl
pop
push
or
or
in
fistps
clc
jg
pop
add
add
push
add
inc
arpl
mov
xchg
movsl
clc
add
push
xchg
cs
lcall
idiv
xor
jecxz
pop
movsb
cmc
clc
push
lods
add
and
fcompl
xor
jne
setae
push
jae
frndint
and
outsl
loop
dec
loope
pop
xor
cmp
outsb
cmpsl
cs
add
iret
push
jnp
mov
or
mov
es
xchg
and
cs
idivb
cmpsl
fsubrl
mov
roll
jbe
and
outsl
call
pop
fnstcw
add
add
ss
(bad)
push
int3
lds
jle
into
hlt
outsb
pop
imul
insb
pop
lret
inc
sub
arpl
inc
xchg
pop
cwtl
cltd
(bad)
pop
idivl
in
ss
pop
jns
repnz
inc
data16
adc
call
cmp
pop
pop
in
(bad)
push
xchg
cmc
mov
in
inc
adc
fnsave
mov
sbb
aam
jae
(bad)
addr16
pop
fs
mov
adc
mov
addb
ljmp
inc
inc
pop
push
int1
mov
adc
hlt
jge
rcr
out
stc
pop
xchg
movups
sarb
(bad)
les
aam
pop
and
clc
out
subb
aaa
pop
shlb
inc
fldcw
(bad)
clc
xor
out
stc
push
(bad)
mov
mov
stos
push
xlat
mov
push
sbb
fs
pusha
in
int
sub
outsl
mov
hlt
lods
clc
stc
ret
add
add
lcall
dec
out
jmp
mov
mov
cmp
ror
shrl
es
adc
xchg
mov
add
xor
adc
popa
les
pop
lcall
mov
inc
int1
cmp
jo
std
cmp
xor
into
int3
lret
jecxz
dec
push
cmp
jbe
dec
lods
pop
dec
(bad)
adc
aas
xor
loope
cmc
aam
fs
adc
mov
or
lock
hlt
mov
push
repz
inc
(bad)
sbb
adc
hlt
xchg
sbb
mov
idivb
sbb
dec
fldt
outsb
(bad)
add
insl
mov
int
inc
inc
js
nop
cmpsl
sub
sbb
sbb
cld
adc
mov
mov
into
pop
gs
inc
and
cmp
jecxz
add
loopne
add
jmp
popa
or
movsb
xor
or
pop
pop
mov
inc
sbb
int
fs
in
mov
and
es
xor
inc
xchg
arpl
into
pop
jb
adc
inc
sti
sbbl
lods
pop
sbb
or
sbb
pop
cmp
(bad)
pop
push
add
outsl
int1
adc
mov
cli
outsb
sbb
out
pop
int
push
dec
dec
push
adc
mov
iret
sub
mov
cmp
aaa
push
mov
pop
sbb
cmpsb
xorl
or
sbb
pushf
(bad)
mov
and
test
and
(bad)
jg
push
xor
dec
pop
push
pop
lret
add
in
popa
(bad)
push
pop
sbb
lods
xor
sbb
push
fldt
inc
xchg
xchg
cmc
xor
sub
sarl
adc
mov
aas
ljmp
nop
in
mov
rcr
mov
in
sbb
out
xor
cmp
mov
call
mov
and
sbb
sub
arpl
push
addr16
dec
xor
inc
and
hlt
stc
fsubr
dec
lahf
sti
jle
arpl
mov
stc
dec
int
adc
std
xor
xchg
inc
aad
sbb
xor
fdivs
and
adc
or
sub
dec
xor
and
test
sbb
push
add
repz
cmp
into
xor
sbb
push
in
ss
jb
mov
ja
jb
push
inc
lret
xor
rol
loop
aad
cltd
mov
sbb
das
scas
cmp
bound
pop
add
push
push
aas
push
push
sbb
sbb
xchg
data16
aad
adc
push
push
adc
xor
loope
sbb
push
push
dec
fsubs
sbb
sarb
aaa
cmp
pop
arpl
sub
sahf
pop
aaa
pop
jb
rcll
pop
pushf
in
lea
aad
xor
or
add
nop
lods
fidivs
mov
fucomp
push
mull
sub
lock
fisubs
std
ret
in
dec
xor
cmp
push
cwtl
cmp
push
inc
shl
pop
push
cwtl
lcall
aad
xor
aad
jmp
loop
add
lret
fistl
xchg
xchg
out
push
aas
jmp
cmc
leave
in
shr
xchg
push
fisubrs
shll
int3
add
call
jge
dec
pop
pop
iret
and
sti
in
add
push
dec
clc
pop
(bad)
jnp
dec
adc
push
shrl
sbb
mov
lock
sbb
add
push
fldcw
stc
adcl
and
inc
bound
loopne
jnp
ret
leave
sub
adc
lret
cmp
sbb
cltd
(bad)
out
lock
pop
xor
pop
xor
aad
dec
repnz
in
and
xchg
cltd
xchg
xchg
add
decb
dec
ds
fsubrl
andb
cs
xor
aad
pop
inc
sub
push
loope
ret
inc
jecxz
mulb
jl
addr16
mov
movsb
leave
or
repnz
adc
pop
sub
cmp
std
fwait
daa
mov
setg
or
cmp
cs
(bad)
pop
lret
xchg
inc
outsb
test
and
mov
cmp
sub
pop
mov
inc
imul
lea
push
mov
xor
shr
push
mov
and
aas
push
mov
xor
mov
hlt
testl
jns
inc
xor
cmp
dec
hlt
aaa
cmp
push
inc
adc
pop
pop
into
sub
aam
cli
fisubl
mov
add
mov
aad
loop
dec
or
push
fstpl
sbb
in
jno
loop
cmp
mov
push
insl
rcrb
cld
(bad)
or
fs
xchg
push
adc
test
into
mov
aaa
flds
pop
add
rcll
lock
cli
