mov
and
popf
repnz
adc
fistpll
movl
dec
xor
xor
dec
push
loop
sub
(bad)
xchg
mov
mov
sbb
popf
repnz
inc
sahf
repnz
iret
mov
fbstp
movl
dec
xor
xor
add
pop
loope
sub
(bad)
mov
insb
into
out
adc
mov
fisttps
mov
dec
pop
xlat
decl
jg
iret
mov
fbstp
mov
daa
ss
or
(bad)
mov
cmp
insb
push
mov
mov
push
fidivs
push
pushf
lock
adc
(bad)
xchg
lahf
out
push
sbb
repnz
inc
sahf
repnz
iret
mov
fistpll
(bad)
sbb
test
or
push
mov
push
arpl
cwtl
je
mov
sub
dec
pop
fstps
pop
dec
xor
aad
mov
or
mov
xor
xchg
int3
mov
dec
sarb
insb
sub
in
(bad)
mov
cs
into
jb
(bad)
or
push
test
and
fstps
pop
dec
xor
aad
mov
or
mov
xor
xchg
int3
mov
add
jle
insb
sub
in
(bad)
mov
cs
into
jb
(bad)
or
push
push
jle
fisubrl
dec
sarb
dec
adc
test
xor
aaa
sbbl
arpl
dec
sarb
pop
dec
dec
lret
dec
es
sub
or
frstor
and
adc
lret
inc
push
arpl
push
pushf
lock
adc
(bad)
xchg
push
or
(bad)
lea
inc
sahf
repnz
inc
sahf
repnz
test
pop
xor
xor
xor
aaa
popa
sbb
fs
arpl
pop
gs
das
dec
sarb
dec
or
mov
mov
push
dec
es
into
pop
xor
lea
sbb
(bad)
rorl
aaa
es
cmp
(bad)
mov
insb
sub
mov
mov
push
mov
ror
xchg
push
xor
or
push
lods
aad
arpl
push
or
iret
xchg
lret
xor
or
push
lods
int1
or
push
push
pop
lods
add
lock
add
or
jne
xchg
(bad)
or
mov
and
or
push
in
clc
ret
xor
fs
jp
or
dec
es
mov
inc
xor
fimuls
sbb
fisubs
xchg
sbb
fisttps
cmp
out
fsub
xor
mov
cs
into
jb
(bad)
or
bound
mov
xor
dec
sarb
dec
dec
fnsave
adc
fdivrl
loop
sub
clc
lds
pop
cmp
xor
lcall
pop
sbb
addr16
repnz
dec
inc
jg
cmc
jne
xor
mov
jo
xchg
pop
xor
or
repnz
inc
sahf
repnz
mov
outsb
xor
and
sahf
repnz
inc
sahf
repnz
(bad)
add
lcall
adc
xchg
adc
fsubr
ret
or
(bad)
xor
data16
xchg
iret
xchg
xchg
das
(bad)
or
xchg
(bad)
or
repz
iret
mov
fistpll
(bad)
sbb
iret
fisttps
push
mov
mov
xor
(bad)
xchg
es
ficompl
shll
jbe
xor
or
aas
xor
or
(bad)
mov
adc
(bad)
mov
adc
push
or
push
push
mov
mov
inc
sahf
repnz
cmc
jne
xor
or
arpl
(bad)
or
repnz
inc
sahf
repnz
fistps
imul
ja
sub
lea
leave
cli
iret
xchg
ret
or
pop
mov
sbb
xor
and
sahf
repnz
inc
sahf
repnz
cmc
xchg
cs
fisttps
cli
xor
or
repnz
iret
mov
fbstp
movl
dec
and
sahf
repnz
inc
sahf
repnz
(bad)
add
stos
xchg
xor
mov
fcomp
mov
aam
test
adc
(bad)
xchg
sbb
pop
push
dec
sub
dec
pop
test
xchg
pusha
stos
xchg
xor
xchg
sub
dec
inc
mov
mov
xchg
cs
inc
sahf
repnz
inc
sahf
repnz
push
sbb
aas
loopne
ret
and
out
xchg
xor
jmp
loopne
mov
mov
ret
fwait
(bad)
or
dec
or
(bad)
or
test
(bad)
lcall
adc
jge
fisttps
mov
adc
mov
mov
push
add
mov
fsub
into
xchg
mov
xlat
mov
jb
fisubrs
int3
xchg
sub
pop
push
dec
cs
dec
pop
test
jne
mov
sub
and
call
push
cmpsl
bound
push
push
pop
outsb
cwtl
sbb
(bad)
or
arpl
(bad)
push
sbb
(bad)
or
arpl
(bad)
or
sbb
mov
dec
dec
and
pop
loope
nop
ret
xor
dec
jle
imul
xor
pusha
mov
out
add
xor
mov
cwtl
(bad)
or
jle
movsl
dec
frstor
pop
fcomp
(bad)
mov
ss
test
rcll
adc
fs
xlat
in
sbb
add
jae
imul
mov
(bad)
popf
repnz
out
shr
xor
mov
sub
pop
lods
call
jne
test
out
jb
fsubrl
fists
jbe
movsl
lea
(bad)
or
sbb
lods
add
and
lds
cltd
(bad)
or
lahf
cmpsl
pop
lea
jo
cmp
arpl
(bad)
popf
repnz
(bad)
leave
cmpsl
fimuls
arpl
push
arpl
push
bound
dec
mov
push
ljmp
jmp
xchg
jno
jns
in
mov
dec
cmpl
xor
push
add
cltd
or
jae
into
xchg
mov
dec
adc
in
fs
xor
xchg
inc
or
mov
sahf
repnz
mov
sbb
adc
aad
aad
push
or
push
shlb
fidivl
push
jg
push
(bad)
call
iret
nop
fnsave
(bad)
or
mov
dec
cmpsb
popf
repnz
outsl
or
xor
jg
in
add
(bad)
or
and
and
lcall
sub
fldt
push
xchg
jae
fsts
or
(bad)
add
test
out
mov
xor
xlat
in
sbb
aad
ficompl
repnz
inc
sahf
repnz
fs
push
push
popa
loope
jne
sahf
(bad)
or
mov
cmpsl
lcall
or
pushf
mov
xor
dec
sbb
test
ficompl
sbb
mov
or
push
dec
pusha
dec
pop
xchg
push
or
lret
jg
xchg
pop
xor
pop
mov
in
test
fists
or
(bad)
xchg
mov
in
ret
xor
mov
fisubl
sbb
mov
adc
outsb
rcll
ret
outsb
rcrl
mov
and
sbb
mov
pop
sarb
push
mov
lcall
ret
mov
mov
in
mov
sqrtps
dec
jbe
xchg
js
push
or
fstps
fdiv
aam
arpl
sub
pop
test
xor
push
dec
pop
ret
mov
adc
pop
sarb
or
and
in
mov
push
push
or
fstps
fsubl
or
pop
test
mov
or
pop
sarb
push
mov
aaa
int3
sti
jl
adc
push
push
or
fisttpll
push
sbb
dec
loop
aas
lock
in
mov
xchg
push
push
popa
xor
sbb
mov
pop
loop
int3
sti
jl
or
mov
or
fmull
push
sbb
push
loop
aas
lock
in
mov
test
push
mov
or
iret
enter
push
scas
and
dec
fidivrl
dec
dec
push
jbe
xor
push
sbb
adc
jbe
dec
fimull
scas
and
lcall
and
iret
enter
push
cltd
outsl
notb
bound
rcrb
xor
pusha
mov
dec
arpl
or
arpl
push
rcrb
fidivl
jecxz
fsubr
push
lods
mov
arpl
push
rcrb
fidivl
jecxz
xlat
add
push
arpl
dec
outsl
fstps
loop
pop
out
or
xor
xchg
mov
xor
xchg
shlb
(bad)
or
arpl
pop
js
xor
sbb
push
outsl
bound
or
push
arpl
pop
pop
bound
(bad)
mov
xor
hlt
adc
