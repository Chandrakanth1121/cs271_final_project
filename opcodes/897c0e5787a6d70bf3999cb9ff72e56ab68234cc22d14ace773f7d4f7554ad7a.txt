aas
cmpsb
lret
xor
pop
es
jns
mov
shrl
jecxz
pop
pusha
int1
gs
pop
test
shr
or
push
mov
imul
shrb
push
sbb
mov
mov
in
movsl
lret
mov
or
or
imul
ds
sub
int
sahf
rcrb
fbstp
je
xor
jbe
in
insb
loop
mov
adc
fwait
mov
mov
sub
xor
push
or
dec
shrl
dec
and
sub
in
pop
scas
push
sub
test
lcall
dec
sbb
jo
hlt
ss
pop
push
aam
or
or
mov
popf
repnz
sbb
cmp
stos
out
insl
mov
clc
repnz
fistps
mov
shrl
mov
mov
shrl
mov
xor
xchg
mov
cmp
test
inc
pop
sub
and
jb
lock
cmc
lods
xor
imul
jns
jne
mov
rorl
add
sub
hlt
or
inc
add
dec
pop
push
mov
pop
repnz
enter
jb
aad
clc
mov
in
sub
cli
ljmp
cmp
loop
repz
mov
pop
test
cs
sub
xchg
mov
aam
mov
in
mov
jecxz
sbb
out
push
in
dec
scas
xor
stos
insl
jl
sub
push
push
inc
popa
mov
add
xor
jg
mov
add
divb
dec
js
dec
lea
adc
or
stos
sbb
test
xchg
lods
stos
int3
test
ret
cmp
(bad)
push
int1
rcll
jp
mov
mov
xor
pop
test
call
hlt
push
inc
mov
push
je
cmpsl
ret
xor
out
int1
add
pop
imul
pop
adc
adc
xlat
xchg
repz
arpl
sub
pop
outsb
dec
add
insb
addr16
xchg
cmc
sub
out
dec
add
mov
loope
call
cmp
pop
mov
push
leave
pop
repz
(bad)
pop
or
das
and
pop
cwtl
mov
cmc
vpaddusb
inc
lock
movsl
jmp
std
xor
mov
into
push
and
jae
repnz
add
pop
jnp
ljmp
dec
jl
ljmp
mov
dec
mov
imul
lcall
adc
sub
das
push
lret
mov
sbb
and
outsl
jnp
ret
test
loope
data16
stc
push
call
jp
int3
pop
adc
push
pop
or
pop
push
cmp
int1
push
lcall
loop
rorb
mov
pusha
jns
push
outsb
xchg
cmc
insl
or
fldl
mov
outsb
add
insl
in
jb
mov
pop
mov
dec
cmp
stos
lods
nop
jle
sahf
sahf
in
fcomi
sbb
jmp
dec
insb
stos
data16
out
inc
mov
loope
push
mov
dec
mov
test
push
call
xchg
mov
popf
xchg
into
jp
dec
jno
or
loop
pop
imul
dec
jmp
(bad)
add
lds
mov
dec
pop
das
cmp
fistpl
ss
sar
int3
xor
sub
adc
jns
sub
out
adc
rsm
xchg
lret
(bad)
das
out
test
jge
jmp
sahf
aas
cs
xchg
insb
pop
mov
adc
mov
inc
xor
std
(bad)
xchg
mov
out
pushf
xor
xlat
sbb
dec
push
xchg
dec
out
mov
xor
adc
stos
imul
cs
mov
lock
xchg
lea
jb
loope
fdivr
mov
ljmp
pop
mov
mov
dec
pop
loop
inc
fdivs
mov
test
dec
in
mov
movsb
aam
out
adc
scas
and
leave
jns
xchg
ss
lods
inc
or
leave
std
fsubrl
jbe
mov
shll
add
push
ljmp
or
pop
mov
clc
pop
inc
xor
ljmp
cmpsl
insl
add
sbb
repz
(bad)
cld
clc
push
pop
jp
inc
cld
or
cs
das
push
(bad)
adc
ret
inc
test
or
jbe
mov
mov
and
in
stc
sahf
inc
in
ret
decb
fcoms
mov
jbe
xor
mov
sub
cld
imul
enter
fcom
or
int1
int1
incb
dec
dec
mov
inc
sbb
cmp
lods
push
insb
gs
jo
movsbl
or
or
xchg
sbb
xchg
push
cmovge
fdivl
xor
pop
jp
inc
push
cmc
and
sub
das
lods
push
or
mov
or
andb
mov
mov
imul
mov
fisttpl
mov
inc
lods
xchg
inc
rsqrtps
mov
mov
ljmp
into
cmpsb
or
repz
repnz
outsb
xor
stos
xchg
mov
int1
lods
sub
sub
lods
jge
xor
(bad)
mov
ret
lret
repnz
pop
push
mull
adc
out
add
mov
int1
jno
mov
js
call
aaa
imul
jmp
dec
popa
inc
ret
lret
mov
lock
outsb
subb
mov
and
sub
push
mov
divb
sbb
stos
xchg
pop
imul
es
inc
cmpsb
ljmp
adc
test
lret
mov
adc
aaa
test
fs
fisubs
push
out
sbb
mov
mov
lods
repnz
cmp
pop
or
jns
mov
dec
outsb
sub
insb
in
adc
lret
dec
cmpsl
push
ret
mov
hlt
enter
(bad)
lcall
pop
jecxz
fcos
push
out
fmulp
scas
jmp
in
push
aam
jne
js
sahf
mov
in
cmp
rep
or
dec
mov
mov
push
add
sbb
inc
lods
cmp
sbb
scas
mov
mov
nop
sahf
sbb
arpl
jl
mul
stos
cmc
scas
mov
enter
xor
insl
out
std
jne
dec
adc
sbbb
sub
inc
int3
int3
lcall
pop
ret
lock
push
js
int
pop
lahf
jge
mov
xor
and
jecxz
mov
notb
cltd
or
js
fmull
cmc
(bad)
push
cmp
jecxz
mov
int1
cmpsb
mov
xor
insl
pop
mov
jp
shrl
out
jnp
pop
iret
fistpl
(bad)
mov
dec
adc
cmpsl
add
lods
lock
popf
scas
sbb
push
lods
in
int
je
nop
int1
lret
cmpsl
aas
lds
pushw
clc
cmp
add
pop
adc
(bad)
or
fsubp
inc
mov
pop
in
jno
enter
dec
jb
ficomps
pop
rcrl
adc
cwtl
xor
and
in
pop
or
or
mov
mov
sub
addl
outsl
cmp
mov
sarb
repz
out
sub
push
aam
jns
mov
jb
mov
jp
pop
pop
pop
add
pop
push
test
fists
inc
push
mov
inc
mov
adcb
add
pop
and
pop
jo
fstpl
daa
outsb
sbb
push
pop
jmp
or
int1
mov
stc
out
lods
ljmp
test
paddsb
mov
dec
insb
adc
hlt
loopne
ja
sub
leave
(bad)
xchg
cmp
inc
pop
hlt
cltd
jl
(bad)
or
bswap
fistps
or
shll
imul
aam
push
and
test
push
cli
in
cmp
xor
jns
insl
or
adc
sbb
mov
imul
xchg
jb
aas
adc
xor
stc
sub
xchg
test
mov
mov
push
dec
hlt
push
push
xor
pop
push
lahf
lcall
mov
push
add
sbb
loopne
mov
adc
pop
into
(bad)
daa
roll
dec
(bad)
jbe
mov
ja
mov
inc
popf
adc
push
xchg
loop
sub
mov
xchg
fldl
xchg
dec
ljmp
pop
mov
add
adc
jmp
and
mov
aad
xor
cmp
mov
imul
fldt
and
push
out
ljmp
sub
popf
sub
sbb
sub
and
mov
inc
insl
inc
ret
(bad)
jg
push
imul
lahf
sub
pop
adc
