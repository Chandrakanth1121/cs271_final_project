shlb
add
add
add
add
add
add
add
pop
add
add
add
add
push
xor
add
insb
gs
fisttpll
sbb
sarb
sub
test
pop
cld
xor
pusha
nop
xlat
outsl
gs
fisttpll
jecxz
rolb
or
(bad)
sub
vdivsd
mov
lcall
rcll
adc
ret
outsl
adc
dec
movsb
xchg
jle
push
mov
decb
inc
repnz
pop
imul
lods
pushf
loopne
or
and
xor
and
sbb
sti
fsub
iret
rolb
or
(bad)
cs
(bad)
push
cld
xor
push
push
fldl
xor
and
aas
vdivsd
xor
pusha
nop
xlat
outsl
gs
fisttpll
jecxz
rolb
lea
lret
sub
vdivsd
aaa
fcmovnu
adc
pusha
adc
jne
fisttpll
repz
rolb
or
(bad)
sub
vdivsd
xor
pop
lahf
xlat
and
push
fisttpll
out
rolb
or
(bad)
sub
vdivsd
xor
add
fisttpll
jecxz
rolb
or
(bad)
sub
vdivsd
xor
pusha
nop
xlat
outsl
gs
fisttpll
jecxz
rolb
or
(bad)
sub
vdivsd
cmp
pusha
nop
xlat
outsl
gs
fldl
jecxz
rolb
or
(bad)
sub
jmp
cmp
js
xlat
outsl
inc
push
fisttpll
loope
rolb
or
(bad)
sub
vdivsd
adc
adc
movsl
or
push
frstor
aas
pushf
fsubs
or
lret
vdivsd
xor
pusha
nop
xlat
das
gs
popf
mov
or
or
lret
and
vdivpd
xor
pusha
nop
xlat
outsl
gs
fisttpll
jecxz
addb
or
(bad)
sub
vdivsd
xor
pop
lahf
xlat
outsl
gs
ffree
inc
aas
pushf
(bad)
lret
addr16
int
es
(bad)
lcall
xor
lcall
gs
fisttpll
jecxz
rolb
or
(bad)
sub
vdivsd
xor
pusha
nop
xlat
outsl
gs
fisttpll
jecxz
shrb
ja
mov
push
loope
divb
ljmp
and
mov
sbb
sub
stos
jo
iret
lea
sub
xor
loope
push
jp
jmp
sbb
imul
and
jg
add
push
pop
pop
xchg
lret
clc
sbb
mov
pop
fwait
ljmp
xor
xor
ret
daa
push
jnp
xor
fwait
dec
pop
push
mov
adc
imul
xchg
dec
inc
xchg
xchg
int
shrb
fdivrs
adc
popf
or
leave
lock
shlb
repz
popa
xchg
add
pop
xor
insl
xchg
shlb
add
inc
int1
push
pushf
ds
push
mov
je
idiv
cmp
jmp
and
lea
cmpsb
bound
test
dec
lret
mov
in
call
push
inc
push
mov
push
sub
mov
sbb
in
sbb
repz
int
add
dec
push
pop
and
psraw
sbb
pop
sahf
call
nop
rcrl
push
lds
imul
jb
cmpsl
add
adc
push
andb
pop
adc
pop
or
cmp
dec
sbb
inc
adc
daa
mov
imul
stc
mov
mov
(bad)
pop
iret
pop
sbb
loope
xchg
inc
test
pushf
test
mov
pop
incl
or
pop
and
subl
xor
test
xchg
jp
dec
aas
nop
call
mov
fldt
mov
sub
xchg
add
das
add
mov
adc
lea
test
fmuls
mov
popf
or
test
int
lret
jo
mov
sub
adc
dec
add
xchg
push
pop
aas
xchg
adc
and
mov
les
das
adc
cwtl
in
jns
pop
sbb
jns
in
add
ljmp
jl
pop
pop
cmpsb
lds
outsb
cmpl
dec
inc
or
aas
cmpsb
jl
or
btrl
stos
push
xchg
cld
add
aaa
mov
inc
repnz
xor
push
push
mov
or
mov
and
adc
aam
push
lock
mov
fistl
mulb
fmuls
int1
cmp
iret
add
loope
push
outsb
(bad)
inc
mov
fmull
pushf
loope
xchg
sub
xorb
sub
inc
mov
fwait
dec
push
lret
insl
sbb
mov
dec
lea
jle
pop
ds
jnp
mov
loopne
call
mov
mov
inc
mov
sub
dec
sub
test
pop
cli
push
and
adc
adc
inc
stc
mov
push
into
ss
cmpl
mov
cmp
rol
(bad)
push
cmc
test
mov
push
mov
test
popa
insl
movsl
jg
push
data16
in
pop
dec
and
mov
test
je
push
fidivl
xchg
ret
sarb
imul
idivl
imul
lret
add
(bad)
inc
ret
cmpsl
cli
sbb
sub
jmp
aaa
test
je
xlat
push
pusha
jmp
push
aas
mov
sub
fildl
jnp
push
(bad)
rcl
sbb
lret
stos
pop
fidivrs
je
in
cmpl
lret
mov
les
lcall
addr16
mov
jl
inc
lea
push
mov
add
fistpll
sti
loop
cmp
fidivrs
xchg
mov
popa
add
into
mov
inc
mov
jp
push
and
aam
xchg
aam
mov
mov
out
dec
dec
lret
rcrl
push
xor
xchg
cmp
cwtl
jmp
je
or
jns
jp
push
fsubrs
push
mov
pop
testb
cmc
adc
xchg
rcll
jbe
shl
cmp
push
arpl
sbb
imul
pop
dec
mov
mov
or
test
pop
cmpsl
clc
pop
or
fnstenv
xor
xor
test
hlt
sbb
std
push
je
aam
mov
lret
mov
sarb
std
in
sub
push
popa
(bad)
in
int1
push
jge
pushf
mov
dec
loopne
pop
or
in
in
and
or
int1
out
int
and
mov
xor
shl
sub
jmp
out
mov
ja
mov
(bad)
outsb
dec
push
or
xchg
pop
xor
adc
(bad)
negb
fstl
repz
out
lock
cmp
and
sbb
jno
xchg
jne
std
xlat
int3
divl
lcall
stos
aad
inc
fwait
dec
and
mov
or
(bad)
movsl
jae
and
pop
sub
push
and
lea
repz
pop
and
aaa
sub
scas
push
inc
pop
mov
lret
lock
imull
xchg
jb
and
dec
adc
out
xchg
adc
leave
xchg
cmpsb
sub
jmp
(bad)
pop
movsb
cmp
fsub
jl
(bad)
add
(bad)
mov
and
xchg
(bad)
fwait
cmpl
loope
stc
aas
mov
lret
add
jp
enter
xor
dec
mov
outsl
xchg
or
ficomps
arpl
inc
xchg
inc
aam
cmp
lcall
push
into
dec
cmp
or
movsb
fstps
push
iret
arpl
(bad)
daa
or
imul
shll
arpl
mov
xchg
xchg
js
hlt
jnp
xchg
push
add
sti
lret
jo
shlb
dec
subl
mov
xor
clc
and
or
push
cli
xchg
dec
in
imul
addr16
cld
stos
js
aam
and
mov
add
cmp
and
and
mov
loopne
add
rcrl
fists
mov
fbstp
(bad)
or
push
mov
push
js
lret
xchg
push
je
stc
call
push
test
(bad)
out
push
(bad)
test
rcrl
mov
mov
lea
sub
cmpsb
or
int3
push
out
push
mov
xor
xor
dec
dec
mov
cmp
sbb
int
inc
popa
imul
sub
jp
sarb
enter
jb
jb
sbb
cltd
xor
or
ja
add
ljmp
adc
js
data16
cmpsb
and
inc
(bad)
xlat
pop
je
ja
xor
or
sbb
lock
fiadds
outsb
ret
adc
fwait
adc
push
pop
mov
imul
mov
mov
in
xor
cmpsl
cmpxchg
push
rorl
fsubrl
stc
imul
test
aas
