push
adc
rcll
imul
sbb
lahf
aam
adc
sub
jge
outsl
adc
mov
jl
jns
pop
imul
jae
push
lock
cmpsl
idivb
jo
and
push
ljmp
and
int3
pop
sbb
push
outsl
jle
pusha
push
mov
(bad)
pushf
lock
fwait
aas
mov
push
stos
movsb
mov
xor
and
lods
pop
jg
stc
repnz
jl
xor
xor
push
sbb
sub
cwtl
adc
xor
(bad)
pop
int1
jbe
popa
scas
adc
mov
push
int
xchg
bound
jge
outsb
dec
add
or
aad
mov
mov
pop
inc
pop
lret
push
push
pop
and
xor
jge
jl
cmpsb
shrb
je
push
leave
pop
or
dec
pushf
(bad)
fcomip
and
mov
pop
push
pop
stc
dec
(bad)
mov
stos
jo
repnz
(bad)
push
and
jns
pop
pop
std
adc
inc
lahf
lock
(bad)
out
pop
jns
sti
scas
xor
js
xor
sbb
ret
cmp
aas
ljmp
fcomip
adc
out
jnp
lcall
ret
scas
jge
mov
jae
sbb
lock
ja
sub
call
adc
fbstp
ds
xchg
push
ss
aas
clc
and
movsb
sbb
fcmovb
nop
adc
sub
negb
hlt
test
inc
aaa
jl
xchg
bound
lods
popf
test
mov
pop
bound
sti
cs
push
jo
jbe
ss
mov
sub
pcmpeqd
pop
or
aam
in
mov
inc
inc
jmp
push
push
sbb
jle
and
xor
pop
out
clc
lds
adc
push
sti
sbb
cmp
inc
pop
mov
mov
cwtl
inc
xor
xor
loope
and
popf
pop
cs
fwait
inc
test
pop
stc
push
adc
int
insl
and
inc
pop
jae
sbbb
push
cltd
lret
pop
lcall
add
mov
mov
loop
xor
add
sub
shrb
adc
dec
scas
decl
cmp
repnz
or
mov
adc
addr16
daa
das
dec
fiadds
ret
imul
sbb
pop
mov
push
pop
xchg
inc
movups
jo
into
into
sub
in
scas
fidivrs
xchg
inc
repnz
shr
inc
sbb
test
jmp
cmc
in
(bad)
push
js
addb
push
stc
cltd
xchg
pop
sbb
push
pop
ret
lcall
or
cmp
lea
mov
mov
jb
sub
lcall
into
(bad)
sahf
xor
loop
mov
outsb
adc
mov
sbb
lods
das
xor
fistps
aaa
sub
jle
cmpsb
js
loopne
inc
aaa
nop
xchg
push
add
(bad)
lea
shl
mov
cld
das
inc
adc
cmc
pop
aad
lahf
lahf
mov
mov
and
shll
dec
mov
xlat
add
test
mov
popa
mov
mov
std
sub
pop
cld
and
xor
adc
in
sbbb
adc
filds
jg
inc
inc
jbe
jecxz
subl
fstps
dec
pop
or
test
pop
loope
adc
loop
jb
fsubrs
rcrl
sahf
lret
clc
adc
inc
test
fs
push
fsubrs
push
inc
mov
mov
out
ret
repnz
out
push
jnp
es
inc
dec
test
cwtl
mov
call
and
mov
inc
loop
andb
sub
inc
fildll
bound
sbb
xchg
popa
lods
fwait
bound
mov
pop
aam
stc
das
or
jne
pop
es
lret
ja
mov
mov
loope
popa
data16
add
sub
xchg
xorps
adc
hlt
scas
rorb
outsb
lock
in
cli
sbb
mov
add
pop
dec
mov
loopne
mov
mov
mov
shrb
(bad)
mov
xlat
lock
jmp
insl
push
push
sti
movsl
push
sbb
enter
loopne
repz
test
push
ja
sbb
sbb
shlb
dec
xchg
(bad)
sahf
out
jbe
mov
arpl
xor
fwait
mov
bound
xchg
push
mov
in
aaa
(bad)
inc
xor
lret
sti
jmp
jae
imul
jg
sbb
and
push
push
mov
(bad)
rolb
cmp
inc
push
pop
insl
sub
call
jmp
jmp
hlt
clc
rolb
push
push
jb
lds
loop
(bad)
ljmp
fwait
push
not
movsb
add
fsts
sub
mov
add
add
clc
lods
push
cli
mov
fwait
gs
fists
shufps
cld
outsb
sbb
cltd
pusha
sbb
inc
fadds
xor
std
mov
iret
jecxz
mov
sbb
lahf
sbb
add
cmc
sti
jmp
ret
sbb
adc
(bad)
stc
fdivrl
dec
flds
imul
fucom
popa
cmp
sbb
mov
(bad)
mov
push
mov
fimull
and
and
sbb
mov
in
ret
mov
imul
fdivs
call
sbb
and
inc
cmp
jbe
test
shlb
sbb
daa
lock
lds
adc
sbb
js
int1
adc
or
push
pop
adc
and
ds
sbb
clc
movsl
and
jmp
and
mull
fadds
push
push
loopne
cld
or
bound
jbe
sbb
jp
push
xor
call
aas
ret
mov
sbb
aas
sub
shll
push
sub
popf
or
in
and
(bad)
jmp
push
daa
adc
or
jne
sub
sti
lahf
iret
push
dec
push
inc
(bad)
test
adcl
jecxz
mov
jecxz
fistps
inc
movsl
push
hlt
negl
insb
and
loop
mov
dec
add
aaa
or
xchg
call
sub
xor
jbe
mov
test
xor
(bad)
rolb
shlb
push
sbb
loopne
cmc
psubsw
cli
pop
xchg
fldt
pop
cmpsb
mov
dec
push
sti
push
mov
sub
sub
xchg
popa
jl
fs
das
mov
push
or
mov
lret
(bad)
std
shlb
outsl
and
stos
xchg
int3
enter
add
mov
(bad)
sbb
inc
roll
jecxz
pop
mov
notb
imul
cmp
loope
push
mov
in
pop
aas
mov
xor
mov
push
jo
push
sbb
mov
mov
xchg
push
outsl
cmp
sub
lock
sahf
pop
sbb
popa
adc
test
add
sub
sbb
pushf
(bad)
push
aaa
adc
movsb
mov
fwait
mov
fisubl
sti
xlat
jae
loop
push
mov
jb
and
scas
ret
xor
cmp
lea
and
and
nop
mov
out
cmp
(bad)
push
mov
push
jne
movsb
push
adc
sub
scas
jmp
xchg
mov
dec
orb
jns
rclb
lret
scas
xchg
mov
iret
movsb
add
jmp
aaa
adc
sub
cwtl
inc
mov
xor
jmp
aam
dec
in
sahf
sarl
sti
jp
xor
sub
mov
insb
pusha
lcall
push
daa
in
pop
mov
push
rcll
cs
shlb
lods
loop
jl
push
call
je
movsb
sbb
jg
enter
es
(bad)
or
push
mov
add
sti
roll
clc
mov
add
sbb
mov
cld
and
jb
ljmp
inc
or
pop
dec
stos
cmpsl
(bad)
nop
xchg
test
ret
adc
xor
dec
and
test
adc
mov
insb
in
mov
fdiv
mov
jl
inc
jg
scas
and
sbb
sub
and
sub
pop
add
jle
jb
sbb
jne
push
lret
inc
shr
dec
les
enter
lcall
pop
lahf
loop
xorl
inc
loopne
loope
xor
loope
push
test
out
inc
je
mov
(bad)
stos
bswap
cmc
sbb
divb
xchg
fdivp
lahf
mov
cmp
popf
and
(bad)
imul
cmpsl
fmul
cmp
cmp
push
mov
fimull
out
inc
