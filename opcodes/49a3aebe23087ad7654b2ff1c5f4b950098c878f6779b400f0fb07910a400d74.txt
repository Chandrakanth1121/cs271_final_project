sub
xor
xchg
fsts
in
out
testl
divl
movswl
xchg
mov
pop
jns
cmpsb
xlat
(bad)
xchg
cmp
pop
insl
or
jle
sbb
jae
adc
sti
sbb
push
mov
leave
test
call
loop
sub
in
sbb
mov
les
inc
sbb
mov
xor
shrb
sbb
fdivr
test
add
out
dec
inc
mov
mov
loopne
dec
shr
subl
pop
leave
mov
lea
out
jge
ljmp
arpl
aad
xor
cmp
sbb
mov
int
sub
mov
mov
sbb
test
mov
inc
pop
int1
push
daa
fwait
and
cli
push
out
in
xchg
(bad)
jno
into
jns
add
bound
iret
sbb
test
sar
aas
filds
pop
pop
cmp
push
movsb
cmp
stc
fsubp
sbb
dec
cmp
sti
fstpl
xor
test
clc
out
cli
flds
xchg
push
(bad)
mov
sarb
inc
sub
mov
mov
imul
push
repnz
sti
repz
adc
in
push
push
scas
adc
xorb
out
push
ret
mov
jl
xchg
mov
pop
int
out
aad
and
mov
and
clc
push
add
cmp
divb
jmp
mov
jge
and
outsl
in
aam
shll
sub
test
mov
inc
ret
sahf
jnp
inc
std
xlat
cmp
cld
cmpsb
adcb
inc
mov
addb
sub
add
fisubl
cmp
movsl
jle
mov
pop
cmp
jnp
ljmp
(bad)
and
xchg
int1
ljmp
cli
xor
ds
cs
mov
(bad)
in
sbb
rcr
movsl
imul
flds
cmc
dec
add
push
test
test
pop
sbb
popa
xor
ret
push
xor
test
add
ljmp
in
cmp
and
inc
out
pop
adc
sub
sbb
fisttpll
push
xor
mov
shrl
js
int1
push
sub
pop
pop
roll
sub
insb
notb
pusha
sub
outsb
sub
jae
imul
fidivrl
pop
das
sti
pop
cmpsb
jnp
ss
mov
aas
jle
dec
out
scas
int3
mov
mov
(bad)
or
xchg
imul
fcoms
add
aad
jns
std
or
fimull
jmp
sub
daa
dec
pop
xor
and
fistpll
push
shll
je
inc
cmpsl
ds
dec
aad
mov
test
pusha
mov
inc
jne
mov
shll
mov
jl
sub
fisttpl
cmp
mov
pusha
sub
repz
push
pushf
pusha
xlat
and
bswap
or
mov
cli
adc
popf
test
inc
mov
xlat
sbb
or
dec
inc
sub
jp
jmp
jmp
inc
leave
adc
cmp
arpl
addb
push
sbb
aad
mov
or
leave
dec
or
and
sub
inc
dec
movsb
insb
push
fstps
add
dec
mov
cltd
jno
push
adc
iret
pop
pop
sbb
pusha
mov
dec
jmp
sbb
pop
mov
jmp
inc
push
insl
mov
rorl
mov
insl
jge
push
xchg
mov
fidivs
xchg
mov
cmp
loopne
loopne
cwtl
js
roll
ret
test
mov
ljmp
push
adc
dec
dec
stc
in
xchg
test
int
cmp
imul
mov
fcmovb
test
dec
pop
aam
in
out
jl
ds
hlt
nop
js
xchg
mov
push
add
push
std
jnp
jo
add
mov
bound
push
jns
(bad)
sub
sub
mov
fwait
inc
xchg
mov
inc
pop
fldenv
out
ljmp
aad
int3
xchg
sbb
adc
imul
pop
aaa
add
jle
gs
jno
pusha
xchg
mov
cmp
or
nop
aad
cmp
test
in
sub
loopne
push
cmpsb
mov
sbb
cmp
jno
fmuls
orl
scas
sahf
mov
aam
enter
mov
xchg
bound
push
xchg
push
add
adc
xchg
jo
sub
pop
push
add
call
jl
xchg
push
aad
xlat
cltd
call
imul
cld
(bad)
cmp
sub
pop
push
hlt
subl
pushf
push
test
sbb
and
cmc
jns
push
addl
notl
inc
inc
mov
xor
sub
add
xchg
xor
inc
mov
mov
pop
and
inc
je
inc
jg
xchg
inc
or
ret
(bad)
cmp
pop
xchg
pop
mov
stos
add
inc
repz
sub
push
lods
mov
lea
inc
inc
sbb
mov
(bad)
jns
ret
dec
pop
shrl
std
cli
in
or
mov
dec
mov
repz
sbb
inc
mov
mov
push
(bad)
mov
jmp
mov
jle
mov
lods
aad
adc
xor
jl
inc
lret
mov
lcall
mov
movsb
sti
rcll
ljmp
hlt
frstor
stc
fiaddl
adc
push
jle
(bad)
pop
fsub
fs
fbld
test
inc
pushf
out
shlb
call
repz
push
not
xchg
test
cli
loopne
aaa
pop
shrl
dec
(bad)
cld
inc
cmc
jne
(bad)
out
sbb
mov
cmp
pop
jnp
jge
add
fsubrl
in
or
mov
shr
in
mov
xorb
addl
add
adc
std
xchg
adc
fstps
(bad)
jnp
xor
xchg
out
outsb
pop
call
push
fimuls
sbb
mov
pusha
and
nop
xchg
cmp
mov
lods
pushf
lods
add
in
stc
sbb
and
and
(bad)
scas
pop
subl
popa
aas
push
xchg
pusha
dec
dec
mov
push
sub
xchg
inc
fucomp
xchg
imul
xor
in
je
sbb
lret
(bad)
cld
stc
jmp
jge
repnz
mov
mov
sbb
sub
lcall
out
mov
clc
aam
sub
rcrb
jmp
ljmp
lods
mov
popf
ror
mov
sbb
sbb
stc
test
dec
test
xchg
mov
(bad)
popa
dec
call
loopne
lods
cmpsb
rorl
dec
int
xchg
imul
add
mov
push
jge
mov
lods
es
es
dec
mov
imul
fs
les
add
sbb
push
popa
(bad)
jbe
pop
sbb
and
push
enter
push
mov
insb
pop
mov
and
lock
sub
in
inc
add
jno
cmp
dec
adc
mov
enter
call
es
cltd
pop
repnz
loope
cmpb
jne
xchg
leave
fdivl
lret
adc
and
adc
add
sbb
jo
jne
cmpsb
sub
out
jg
lahf
cmp
jne
lcall
es
xchg
dec
push
and
(bad)
sub
sub
jge
imul
adc
rol
ds
mov
stos
mov
jns
js
call
sbb
rorl
iret
testl
and
fwait
dec
inc
inc
push
lret
cld
dec
call
dec
cltd
mov
adc
push
jne
mulb
or
mov
and
dec
stos
fdiv
sbb
cmc
add
push
and
in
shr
xchg
aad
inc
jmp
jle
and
sti
mov
xor
and
add
sub
data16
pusha
ds
ret
cmpsb
dec
fs
ret
rcl
xchg
dec
mov
mov
mov
js
cmp
mov
push
shlb
jp
push
add
(bad)
and
mov
inc
adc
(bad)
arpl
mov
push
and
outsl
js
dec
dec
clc
jb
mov
ret
sbb
fwait
pop
cmp
sbb
and
in
cli
and
int3
pop
cmp
stos
in
outsl
dec
inc
pop
add
call
outsl
fwait
sub
add
xlat
cwtl
adc
movsl
loope
and
test
iret
shlb
push
or
pop
xor
addl
std
dec
dec
push
xorb
adc
sbb
xor
ljmp
cltd
adc
sti
cmp
mov
cmp
out
out
jge
cmp
mov
(bad)
cltd
