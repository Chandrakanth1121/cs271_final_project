loope
lret
rcrl
nop
(bad)
sbb
(bad)
add
cld
push
rex.r
(bad)
rex.rx
cmp
push
xchg
sbb
rex.rb
cmp
pop
sbb
sub
pop
mov
data16
not
xchg
in
(bad)
in
ds
loope
jb
jae
add
adc
ss
xor
and
(bad)
sub
fs
rex.wrb
xor
(bad)
int3
and
jbe
add
and
and
mov
ljmp
(bad)
pop
xchg
and
add
(bad)
adc
rex.rb
lret
rex.r
movabs
jbe
lea
leave
push
xchg
xor
stos
orl
rex.b
xor
fdivrp
cmp
{rex2
loop
xchg
movabs
or
in
push
(bad)
or
push
ss
jmp
add
lea
mov
xchg
(bad)
jmp
fistpl
pop
out
and
cld
out
adc
sub
push
xchg
cmp
ficoml
or
sub
xor
xchg
ret
jp
rex.rx
iret
ficomps
cs
jbe
mov
sbb
cmp
jae
(bad)
popf
and
push
xor
rex.x
add
fucompp
js
rex.rx
adc
xchg
cs
(bad)
movsxd
sahf
and
fs
sbb
or
rex.w
sbb
es
adc
(bad)
add
xor
add
rex.wb
pop
xchg
loopne
(bad)
movsxd
(bad)
jmp
(bad)
jrcxz
cmp
in
mov
mov
mov
test
jmp
pushf
xchg
(bad)
add
xchg
ret
nop
push
lret
leave
rex.wb
cs
mov
xor
nop
in
push
adc
xchg
mov
pop
pushf
cmp
adc
out
(bad)
(bad)
sbb
(bad)
pop
add
adc
(bad)
or
rorb
lret
mov
rorb
rclb
xchg
or
ds
sbb
movl
mov
pop
andl
fsubl
rcrl
and
leave
sahf
cmp
pop
(bad)
xchg
vaddsubpd
sbbl
insl
xor
mov
cmc
cmp
sbb
clc
adc
rex.rb
ss
jge
(bad)
xor
testl
and
{rex2
int3
rex.rxb
addr32
sti
sbb
or
sti
pop
popf
movabs
jl
jno
mov
mov
jmp
cltd
mov
xor
shrl
sahf
(bad)
or
movabs
sbb
fmuls
outsb
mov
push
xchg
movb
lods
pushf
mov
rex.b
rex.wxb
cld
ret
or
(bad)
sbb
jns
int3
es
fldenv
(bad)
rol
(bad)
push
fistpl
cwtl
xchg
enter
ud0
xor
(bad)
jge
fld
(bad)
mov
xchg
rcll
sub
mov
mov
{rex2
cwtl
test
scas
sub
notl
lea
cmp
ds
(bad)
movabs
insb
(bad)
rex.r
sub
rex.wr
add
cmp
xchg
loop
outsl
lahf
movabs
rex.xb
rex.rb
xorl
adc
pushf
test
rex.wrxb
(bad)
in
int
push
fmuls
(bad)
rex.wrx
add
shl
movabs
rex.x
sbb
adc
rex.wxb
cmp
and
movabs
or
sti
loope
popf
mov
mov
std
and
jrcxz
cmp
sbb
iret
push
(bad)
out
mov
fnstsw
(bad)
(bad)
lret
xchg
jp
cs
rex.rx
add
ss
popf
fidivrs
in
pop
jbe
rex.wb
mov
out
pop
mov
leave
(bad)
(bad)
jae
(bad)
lret
xor
lret
std
sbb
jmp
cmp
adc
sarb
(bad)
jl
(bad)
cmp
movsb
push
pop
cwtl
movsl
add
(bad)
cs
sbbb
mov
add
(bad)
in
out
xchg
cs
add
(bad)
movabs
fldt
xchg
mov
adc
jge
cmp
sub
or
divb
outsb
test
call
or
movabs
pop
cs
sarb
mov
lretq
xchg
sub
push
and
incl
xchg
sub
push
lods
jge
xor
iret
mov
lret
out
lret
push
es
nop
(bad)
mov
jmp
xor
out
xor
scas
adc
popf
shl
or
fidivrl
stos
ret
add
sar
notl
jns
js
cmp
(bad)
lahf
cmp
mov
push
(bad)
xchg
mov
(bad)
mov
sub
ds
push
ret
adc
mov
data16
or
rex.rx
rex
fcoml
int1
adc
pop
(bad)
xor
leave
push
cli
addb
cwtl
sub
out
push
int1
cmp
hlt
rex.wrb
es
unpckhps
mov
adc
xchg
stos
sbb
adc
and
out
rex
cmp
pop
movabs
loop
and
imul
adc
mov
(bad)
add
sub
cmp
add
(bad)
movsl
pop
mov
push
rex.wx
fbstp
or
xor
movsxd
xchg
xor
add
mov
je
fnstenv
xor
jb
cmp
shlb
sbb
rex.wxb
rex.r
sarl
(bad)
sub
pushf
int
mov
mov
cmp
jno
sahf
xor
loopne
repz
cmp
repz
jp
std
push
out
sub
pop
cmp
(bad)
rolb
cmc
add
loopne
sub
nop
imul
fs
jmp
rex.wr
push
loop
rex.w
xchg
out
and
in
jg
es
xor
out
imul
rex.b
adc
sub
mov
test
movabs
(bad)
{rex2
in
ret
adc
hlt
adc
or
and
and
cmc
cltd
ja
sbb
xchg
mov
xchg
loop
sbb
cmpsb
jge
rex.w
cmp
cmpsl
rex.xb
rex.rb
xor
rex.wrb
add
add
adcb
cmp
ds
lock
mov
jno
(bad)
sub
popf
jl
or
add
nop
xchg
negl
es
and
out
push
xchg
xchg
or
fstps
push
sarb
test
mov
jmp
rex.wb
in
adc
jl
cmp
sbb
sbb
fiaddl
cltd
ds
sbb
je
clc
sub
rex.wxb
push
out
enter
xchg
enter
rex.rxb
subl
jle
(bad)
gs
xor
int1
data16
xchg
(bad)
movabs
pop
jrcxz
and
{rex2
fsubs
jg
jo
fistps
rex
cmp
and
mov
xor
fneni(8087
add
repnz
pop
fcoms
cmp
ss
xchg
xchg
rex.wxb
cmp
pop
fldl
je
je
pop
pop
pop
int
(bad)
cmpsb
fidivl
adc
data16
xchg
add
movsxd
movabs
jnp
rex.rb
outsb
cmpsl
adc
movsl
in
and
lret
movabs
rex.wx
push
(bad)
rex.rb
ret
(bad)
{rex2
(bad)
xor
rex.wrb
fldl
(bad)
sub
push
insl
sub
(bad)
and
cmp
mov
outsb
loopne
iret
cmp
adc
add
jno
and
xchg
xchg
xchg
movb
cltd
xor
testl
nop
in
shll
(bad)
loop
push
(bad)
sub
add
loop
push
(bad)
xor
adc
rex.wx
and
or
push
test
(bad)
or
out
int3
lret
insb
sti
movsl
(bad)
(bad)
push
(bad)
in
xor
lock
movsxd
mov
(bad)
or
mov
push
add
rex.rb
sahf
in
test
xor
fistps
ds
(bad)
xor
popf
lea
fisttpll
data16
data16
cmp
cli
add
negb
jl
orl
push
fistps
fdivrs
xchg
pop
mov
lahf
in
(bad)
in
push
int
pop
rex.rxb
stos
mov
pop
(bad)
test
push
sub
and
in
outsb
add
test
add
xchg
adc
leave
ss
adc
cmc
test
ret
sbb
(bad)
rex.wrx
(bad)
int1
(bad)
movsb
pop
imul
movabs
fists
sti
mov
movabs
nop
adc
mov
ss
movabs
xchg
test
sbb
ds
or
and
xor
jns
mov
pop
(bad)
xchg
cltd
out
je
jrcxz
shlb
pcmpgtd
jne
jae
push
add
int
(bad)
ss
out
(bad)
lods
pop
jae
stos
xchg
add
cmp
add
fidivrl
rex.xb
sbb
xor
(bad)
mov
rex.b
fwait
xchg
imul
push
add
loop
test
rex.wrx
in
ret
shlb
xor
(bad)
pop
pop
mov
cmp
popf
std
lock
cmp
(bad)
movabs
xchg
jb
in
cmp
add
fstpt
push
mov
and
(bad)
jne
or
xchg
jb
add
sbb
test
push
add
and
rorb
sub
rex.wrxb
test
ja
pop
adc
