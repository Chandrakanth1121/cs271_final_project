xor
xor
add
pop
and
adc
sub
movsb
imul
(bad)
add
add
pop
(bad)
mov
cs
sub
mov
xor
fdivrs
leave
movl
sbb
int3
out
cmpl
movslq
add
(bad)
(bad)
jns
push
rex.rb
push
(bad)
mov
mov
test
je
mov
jg
call
movsb
mov
jl
sbb
adc
out
xchg
ret
(bad)
in
call
jge
sbbl
je
xor
xor
sub
nop
mov
mov
pop
movzwl
(bad)
cli
or
add
addl
(bad)
jbe
nop
clc
sbb
test
setne
jmp
adc
shr
jns
insl
mov
(bad)
mov
rex.r
rex
rex.wrx
lock
mov
jns
xchg
ja
(bad)
(bad)
cmp
(bad)
outsb
push
xchg
lea
outsb
lock
add
mov
clc
sub
rex.w
rex.wr
fwait
mov
call
sbb
mov
cmovno
push
push
stos
and
jnp
or
add
adc
adc
jo
jmp
outsl
cmp
je
add
(bad)
mov
lods
clc
lock
rex.w
rex.w
test
cmp
(bad)
cmp
rex.wrx
adc
out
clc
imul
(bad)
jg
fcoml
(bad)
test
(bad)
add
fdiv
ret
or
es
call
mov
mov
adc
adc
(bad)
in
std
sub
call
shl
movabs
sbb
shl
cmp
call
and
(bad)
out
jle
test
jle
or
fisttpl
or
call
fstpl
jle
mov
call
lock
sbb
sbb
rcll
(bad)
clc
fbstp
(bad)
out
(bad)
clc
std
loope
movl
cmpsb
call
in
mov
loopne
int3
add
mov
mov
(bad)
rex.wxb
jnp
cs
scas
sub
(bad)
mov
sbb
sarl
shlb
and
pop
pop
pop
sub
lock
fildll
test
pop
out
(bad)
or
mov
(bad)
fldz
sar
push
or
out
imul
cmp
xchg
jmp
xchg
adc
test
outsl
push
imul
cmpsb
leave
mov
fbld
cmp
(bad)
(bad)
sub
xchg
mov
jmp
sbb
jg
in
out
rex.r
nop
test
add
movsl
add
rol
call
sbb
int3
out
(bad)
push
(bad)
ljmp
clc
(bad)
pushf
(bad)
cmp
push
and
sub
nop
cmp
mov
andb
mov
sbb
mov
jnp
cmp
sbb
mov
(bad)
push
mov
mov
rex.rb
es
sbb
push
loopne
iret
xor
push
(bad)
scas
xor
(bad)
(bad)
(bad)
xor
and
js
movsl
mov
add
(bad)
or
rex.x
lcall
push
xor
movsb
add
cwtl
rex.w
(bad)
adcl
lock
add
ja
pop
ret
rex.wx
xchg
mov
ret
gs
in
ret
in
push
pop
mov
(bad)
mov
nop
sbb
xor
rex.b
scas
sub
sub
(bad)
add
sbb
div
out
add
lea
lock
mov
cmp
mov
sbb
add
mov
xchg
rex.wrb
push
adc
{rex2
int3
call
pop
jge
add
(bad)
loopne
call
(bad)
fdivp
faddp
test
xor
rex.wr
mov
(bad)
adc
(bad)
xchg
nop
cwtl
jns
cmp
pop
pop
mov
and
mov
rex.wrxb
xchg
(bad)
sub
loop
rorb
mov
or
or
rex.wrx
mov
lods
sbb
rex.wrb
rex.wrb
(bad)
shll
xor
cltd
divl
or
insl
sbb
imul
mov
sbb
mov
xchg
mov
ror
movsxd
loopne
ror
pop
div
(bad)
(bad)
xchg
add
and
jo
xchg
push
sub
popf
add
xchg
(bad)
nop
js
lcall
fcomp
pop
add
adc
adc
pop
jns
ficomps
mov
adc
jg
ja
pop
rorl
(bad)
push
nop
sahf
jge
(bad)
(bad)
lea
mov
out
jns
and
lret
(bad)
mov
out
lock
xchg
jb
rex.wb
fdivrl
rcrb
(bad)
jl
xor
and
lret
repnz
cmc
add
mov
mov
addl
ret
xor
adc
movsxd
cmp
leave
cld
mov
(bad)
rex
fldt
subl
movsxd
rex.wr
cmp
rex.wx
insl
rex.wrx
xorl
(bad)
fldt
rex
iret
{rex2
(bad)
shlq
movsxd
add
mov
jl
(bad)
jle
add
jge
out
push
add
adc
jmp
(bad)
cwtl
rex.wb
mov
int1
mov
jle
mov
ds
mov
outsb
push
(bad)
rex.wrb
rex.rx
mov
mov
data16
clc
add
sbb
add
rcll
or
rex.wrb
jle
fisttpll
cmp
jb
notl
push
add
add
out
mov
mov
ret
adc
in
add
adc
fcoms
sub
mov
(bad)
push
mov
fisubrl
fyl2x
shrl
mov
(bad)
call
movabs
rex.wrb
filds
adc
fcomip
pop
scas
sub
cmp
sbb
lret
mov
imul
ds
je
movsl
sub
lock
adc
xchg
fnstenv
rex.wr
add
loopne
add
rex.rb
sbb
sub
fdivp
xchg
cmp
movsl
and
(bad)
test
mov
xchg
rex.rxb
ds
lock
cld
jmp
rex.w
mov
jmp
es
(bad)
mov
(bad)
(bad)
add
mov
rcll
imul
hlt
(bad)
fcoms
stos
in
(bad)
movsl
enter
or
add
stc
mov
mov
nop
add
(bad)
(bad)
out
movabs
iret
(bad)
cmp
add
mov
adc
add
cmp
sub
(bad)
js
push
pop
or
cli
scas
xor
mov
add
xor
imul
and
imul
in
imul
add
mov
sub
xor
adcl
loopne
(bad)
rex.wx
jmp
jg
test
sar
iret
(bad)
push
js
sbb
rex.b
rex.xb
(bad)
cmp
mov
(bad)
int
fnsave
push
and
and
add
sub
(bad)
out
xor
{rex2
(bad)
mov
(bad)
fwait
and
jb
and
(bad)
(bad)
rex.wr
jb
fisttpl
sahf
andb
sbb
jmp
call
or
mov
sti
clc
out
cmp
lea
rex.wrx
fcompl
push
bsf
sbb
pop
rex.w
clc
outsl
cmp
rex
adc
and
test
sbb
lea
cs
(bad)
mov
movabs
add
out
movsb
push
mov
jge
jmp
mov
xchg
test
add
in
and
or
test
repz
sub
lret
int1
movabs
addl
add
(bad)
cmp
mov
sahf
hlt
xor
test
xor
xchg
jmp
fadd
lret
rex.wrx
movsxd
adc
adc
out
sub
(bad)
(bad)
mov
(bad)
xchg
xchg
or
xor
xor
ret
clc
lahf
add
add
rex.wrxb
mov
ja
test
iret
fdivrl
cmp
cmp
adc
jmp
jo
jbe
insb
jno
cmp
(bad)
stos
jb
xor
int
xchg
cmp
cmp
xchg
imul
rex.b
or
rex.rb
rex.wx
pop
rex.wrx
push
{rex2
mov
mov
pop
(bad)
(bad)
mov
cmp
xchg
push
mov
rex.rb
fcomps
cmc
(bad)
or
(bad)
(bad)
cmc
add
mov
(bad)
(bad)
add
sbb
mov
cmp
cmp
xor
test
test
sti
insb
(bad)
(bad)
cwtl
and
pop
xor
mov
rex.wrx
adc
pop
repz
jns
pushf
rcl
fcmove
(bad)
(bad)
outsl
cmp
adc
and
push
cmp
add
ret
rex.rb
mov
rex.wrx
pop
in
sub
rorl
fucom
cmp
repnz
rex.r
rex.wrx
rex.xb
cwtl
add
mov
sarb
rex
cmp
movsl
and
xchg
cmp
in
ds
add
fnstenv
rex.xb
fucomip
ret
test
cmp
scas
adc
xchg
pushf
int3
mov
orb
(bad)
je
movabs
mov
movsb
rex.wrb
cmp
loop
ja
(bad)
sti
cmp
push
mov
mov
xor
cmp
rex
sub
int1
in
out
(bad)
rex.wrx
add
mov
mov
mov
or
adc
add
mov
outsl
add
mov
loopne
(bad)
fidivl
sub
movsxd
(bad)
int3
iret
or
and
