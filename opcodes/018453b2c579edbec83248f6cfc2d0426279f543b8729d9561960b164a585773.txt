xor
push
push
pop
and
cwtl
xchg
xor
lahf
insb
jl
pop
add
and
add
add
add
rex.wb
add
sbb
add
lods
pop
(bad)
mov
sbb
sub
cmp
loop
hlt
cwtl
cmp
add
gs
cmp
jb
rex.wr
{rex2
cmpsb
(bad)
mov
mov
xor
loopne
movabs
rex.wrx
xor
rex.wrb
es
outsb
(bad)
rex.rb
mov
(bad)
movsb
insb
ret
or
nop
xor
xor
rex.rx
push
out
mov
(bad)
lock
lahf
cmp
push
cltd
std
insb
mov
xchg
lods
mov
in
mov
jnp
rex.wrx
rex.rx
mov
add
add
movsxd
(bad)
gs
out
xchg
pop
ja
or
cltd
fcomps
(bad)
mov
mov
rex
(bad)
cli
and
fsubs
xlat
xchg
addr32
xchg
rex.wx
jmp
jmp
mov
cwtl
xor
rex.wr
sub
imul
mov
mov
rex.r
ret
sub
xchg
sbb
out
push
(bad)
movabs
(bad)
out
in
cwtl
rex.wr
sti
(bad)
sub
adc
rex.wrx
out
add
lret
insb
add
push
(bad)
(bad)
sti
(bad)
push
roll
imul
mov
jbe
ss
shlb
data16
and
(bad)
fdivs
in
cld
jrcxz
lods
mov
xor
ret
jae
out
imul
fisubrl
xchg
push
pop
sub
(bad)
xor
xchg
or
cld
leave
adc
outsb
mov
mov
popf
movabs
cld
(bad)
je
mov
rex.wr
push
rex.xb
repz
or
sub
xor
jle
(bad)
ja
(bad)
(bad)
in
divl
rex
stos
jns
(bad)
jmp
sub
loop
pop
cmp
push
xchg
and
jno
fwait
sub
jp
(bad)
repnz
sbb
int3
push
add
mov
ficoms
(bad)
(bad)
mov
in
jge
sbb
(bad)
data16
adc
data16
sub
negb
rex.wxb
push
imul
sbb
rex.wx
xchg
rex.x
loop
nop
repz
stos
jg
fcompl
sub
leave
add
pop
(bad)
test
push
add
out
xchg
xchg
lret
adcq
pop
lods
cmp
sub
push
sbb
movabs
outsb
or
rex.x
(bad)
sub
xchg
mov
outsl
rex.rb
pop
(bad)
test
mov
lods
rol
jbe
and
rex.w
addr32
movabs
pop
jo
sub
xor
test
mov
rex.wx
jmp
rex.wx
out
(bad)
(bad)
pop
pop
outsb
fincstp
in
int1
or
xchg
fnstenv
negl
insl
imul
lret
sub
repz
jg
rol
or
sahf
push
adc
(bad)
rex.wrxb
push
ret
shl
bt
mov
sub
xchg
(bad)
cmp
out
{rex2
shrl
or
xchg
in
leave
fadds
jmp
ja
jbe
push
test
xchg
mov
(bad)
fisttpl
je
outsb
subb
push
pop
iret
mov
jrcxz
mov
adc
adc
xlat
add
pop
nop
mov
test
push
xor
cmp
rex.xb
(bad)
push
(bad)
cmpsl
adc
rex.w
adc
mov
shll
xchg
cmp
test
push
mov
or
cmp
popp
rex.wx
lock
mov
(bad)
push
shl
rex.wrx
(bad)
lock
mov
push
(bad)
xchg
sub
insb
xor
or
ror
stc
fisubs
insb
push
mov
adc
xchg
and
(bad)
push
xor
cmpsb
rex.wrx
jns
mov
cmpsb
cmp
mov
mov
add
and
rex.xb
add
adc
mov
je
rex.wx
or
cld
rex.r
mov
(bad)
movabs
mov
lea
mov
(bad)
gs
movsxd
call
sbb
es
loope
lret
std
loop
es
fstp
ja
mov
push
xchg
or
cmp
pop
xchg
addl
insb
push
fs
mov
(bad)
ss
fwait
cmpsl
data16
xchg
fdiv
pop
sarl
(bad)
rex.wrxb
(bad)
(bad)
lods
in
jno
sub
push
loope
lock
jnp
jp
sub
xchg
(bad)
push
rex
stc
mov
js
xor
rex.rb
rex.w
lods
repnz
mov
mov
int3
nop
sub
rolb
mov
mov
and
xchg
repz
hlt
xchg
frstpm(287
mov
cmp
and
popf
jo
enter
es
xchg
xchg
shll
mov
mov
or
jle
cmpsb
outsl
rex.wb
rex.wrb
in
jmp
rex.wrxb
out
mov
rcr
cld
fimull
insb
mov
lea
lret
movabs
or
(bad)
lods
sub
(bad)
push
loope
(bad)
mov
mov
frstor
sbb
out
out
mov
or
mov
int1
mov
(bad)
std
fimuls
pop
int1
loope
in
{rex2
add
popf
push
out
shr
xchg
xchg
mov
stc
popf
rex.wb
js
and
test
ja
mov
int1
push
adc
(bad)
call
idivl
jne
(bad)
popf
cltd
adc
insb
sahf
pushf
rex
sbb
xchg
loopne
test
sub
cli
(bad)
sub
xchg
and
pop
movsl
push
xchg
sbbb
rex.wx
rex.wr
sbb
xchg
fucomip
mov
push
(bad)
stos
jrcxz
movabs
imul
xchg
movabs
push
scas
add
add
lret
(bad)
mov
sti
loopne
sub
mov
sti
rex.wrxb
push
or
rorl
imull
rex.wrx
loopne
xor
(bad)
cmp
fnstcw
nop
in
push
sbb
ret
test
push
mov
int3
mov
fwait
pushf
mov
jrcxz
mov
fcomip
mov
jle
ret
xchg
rex.w
rex.w
repz
xchg
imul
adc
jns
rex.xb
mov
or
adc
rex.r
nop
fwait
cltd
sbb
mov
cmp
(bad)
test
es
xor
lahf
jg
(bad)
adc
(bad)
mov
es
and
pop
(bad)
orb
and
cmpsb
lods
out
ds
subl
rex.wrb
push
repnz
rex.rb
pop
(bad)
out
jge
jl
sub
(bad)
and
rex.wx
(bad)
mov
std
(bad)
nop
enter
xor
xor
(bad)
adc
loop
lahf
or
sarb
call
add
xchg
cmp
jp
push
(bad)
in
cwtl
outsb
(bad)
addl
and
sti
mov
scas
iret
(bad)
lock
(bad)
xchg
pop
push
iret
(bad)
{rex2
in
lret
(bad)
(bad)
testb
out
mov
and
rex.xb
in
sbb
add
rex.w
jo
fsubrl
{rex2
sbb
cmovns
addr32
adc
sti
jns
not
rex.rx
(bad)
xor
push
fiadds
adc
in
mov
(bad)
mov
rcrb
(bad)
xchg
and
xchg
mov
pop
rex.rxb
(bad)
rex.wxb
rex.wrx
mov
or
(bad)
rex.x
mov
enter
push
or
sbb
int1
movabs
(bad)
xchg
js
add
repz
xor
xor
mov
xor
rex.r
rex.r
shlb
stc
(bad)
cmp
jp
(bad)
cmp
jmp
push
or
add
(bad)
lock
(bad)
imulb
loop
rex
movabs
mov
(bad)
lret
stos
rex.b
rex.wrxb
push
(bad)
movabs
xchg
(bad)
movsl
shll
movsl
movsb
clc
out
in
pop
movabs
rex.wr
push
adc
adc
rex.wrb
push
stos
clc
push
repnz
lods
or
popf
sbb
gs
(bad)
fdivs
rex.w
movsxd
cltd
adc
movb
and
or
jnp
idivl
pop
xor
(bad)
sub
mov
jno
sub
es
call
(bad)
gs
int
movabs
rex.b
jne
(bad)
cs
rolb
rex.rxb
scas
jmp
add
test
shll
add
sub
movabs
nop
testl
xchg
enter
fimuls
mov
sub
sahf
or
js
and
in
ljmp
cmpsb
mov
mov
leave
{rex2
orl
movabs
pop
scas
mov
cs
xchg
jne
rex.r
sahf
jb
(bad)
pop
stos
imul
add
(bad)
lsl
mov
xchg
jmp
(bad)
xchg
outsl
jnp
rex.x
xchg
cmp
nop
rex.rxb
es
and
xorl
or
(bad)
loope
add
(bad)
movabs
std
fcom
xor
sbb
adc
sbb
lret
(bad)
mov
jo
fnstsw
movabs
rex.xb
int3
