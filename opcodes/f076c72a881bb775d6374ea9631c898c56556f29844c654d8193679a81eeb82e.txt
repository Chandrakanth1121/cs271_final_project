sub
sbb
sbbl
sarl
mov
nop
jp
mov
leave
add
jecxz
cwtl
adc
push
scas
mov
mov
jp
sti
std
xchg
adc
cmp
fldcw
stc
add
lahf
jle
adc
mov
push
movsb
xor
out
jge
xlat
(bad)
xor
jnp
fimuls
fbstp
jbe
std
xchg
leave
sub
(bad)
add
mov
jns
mov
push
daa
mov
test
push
fistpl
test
mov
inc
jnp
pop
push
fcoml
dec
out
fdivrl
push
and
push
es
sbb
jge
push
out
stos
pop
test
cmpsl
inc
sub
adc
aad
ja
adc
hlt
push
adc
xchg
mov
shll
scas
sti
je
sbb
xor
and
pop
pushf
push
shrl
dec
insb
jo
and
fcomip
out
and
mov
popa
xchg
cmp
dec
jnp
push
sub
flds
mov
ja
pop
test
add
fisttpl
or
and
outsb
ror
scas
adc
jnp
sbb
stos
fildl
jg
adc
sbb
lds
adc
mov
in
je
sbb
jno
and
mov
jnp
jnp
adc
cld
adc
pop
mov
scas
gs
in
test
sarl
mov
andl
outsb
inc
dec
imul
std
jmp
fnstenv
mov
hlt
mov
jns
addr16
aad
dec
andb
out
inc
jmp
divw
xchg
cld
xchg
test
cltd
lret
cmp
aas
mov
pop
pop
popa
adc
pop
cmp
add
dec
xchg
minps
push
(bad)
adc
cld
mov
cmpsb
popa
in
dec
into
mov
mov
xorw
or
pop
xor
rcl
xor
lret
dec
call
scas
or
inc
addr16
jl
ljmp
pop
subb
fsubrp
pop
in
mov
jl
ficompl
jle
mov
cmp
les
push
insl
lods
adc
xor
and
jecxz
push
jp
outsl
and
xchg
xstore-rng
cmpsl
les
movsl
ljmp
xchg
das
test
or
add
jle
fwait
jecxz
sbb
stos
xchg
mov
(bad)
inc
mov
gs
push
mov
rcll
dec
(bad)
xor
pop
xchg
in
stos
dec
cmpsb
iret
xor
aam
rorb
adcb
bound
fnstenv
adc
ljmp
sbb
lods
push
dec
xchg
inc
int1
mov
jo
xor
mov
push
mov
inc
push
test
sbb
arpl
xor
sahf
sub
push
fnstenv
and
ja
mov
cltd
int
ret
xor
in
ja
inc
inc
out
xor
sub
rorb
adc
stc
lods
jmp
cmp
stos
ret
dec
fsubrs
xor
mov
dec
adc
cmc
add
and
loope
dec
push
jns
or
dec
or
adc
(bad)
movsb
filds
movsb
in
shll
outsl
sbb
mov
pop
(bad)
hlt
or
daa
push
out
xchg
pop
or
add
push
and
xchg
dec
test
lds
push
outsb
out
std
fbld
jo
xchg
jbe
inc
out
sahf
xor
or
(bad)
je
mov
sbb
mov
cld
lock
js
sub
dec
xor
lods
mov
movsb
fstps
push
sarl
and
rcrb
stos
test
mov
(bad)
mov
pop
dec
mov
pop
dec
xor
mov
push
or
cltd
sbb
cli
in
jne
es
cmpsl
pop
mov
(bad)
adc
int
adc
ss
ficoml
lret
mov
push
sbb
jg
adc
(bad)
xchg
adc
lret
push
insb
push
xlat
cmp
jp
sar
out
(bad)
imul
test
xor
inc
xor
or
mov
adc
add
int1
jbe
xchg
sub
into
lcall
pop
adc
ret
fs
pop
faddp
jle
shlb
sub
insb
insb
nop
jo
rclb
mov
jecxz
std
ss
sbb
jnp
popf
jge
cmp
in
int1
and
pop
jae
in
push
fisttpll
mov
(bad)
xor
pop
xchg
sbb
fbld
and
(bad)
rolb
cmp
inc
push
stc
out
mov
notl
or
lret
xor
xor
mov
mov
bound
add
and
sahf
loop
push
lret
push
arpl
hlt
imul
(bad)
jecxz
push
xor
jg
dec
scas
mov
lcall
lea
push
(bad)
or
lcall
pop
inc
cmp
mov
in
add
ret
mov
adcl
es
scas
inc
inc
in
push
test
sarl
ret
js
das
cmc
int1
cld
hlt
inc
jmp
sbb
mov
sbb
wrmsr
ja
xchg
mov
jg
xor
push
mov
cli
pop
loopne
xchg
ret
sbb
daa
dec
cmpsb
dec
sub
js
jle
insl
pop
scas
lds
sub
lods
stos
in
push
imul
rcl
dec
jns
cmpsb
cmp
xchg
xchg
jmp
jae
in
lret
outsb
cld
jns
cwtl
push
fmuls
movsl
or
mov
std
not
dec
(bad)
ret
push
mov
and
shl
pop
aad
sub
insb
mov
dec
mov
xchg
inc
ds
into
push
sti
out
adc
and
std
data16
inc
add
es
cmp
pushf
cmp
ss
dec
mov
adc
cmp
lods
mov
dec
lret
fwait
aam
adc
or
out
and
je
pusha
popf
xchg
and
add
xor
jp
test
push
mov
cltd
inc
fwait
mov
scas
sbb
repz
mov
mov
inc
loopne
xchg
dec
mov
xlat
movsb
mov
mov
xchg
cmc
xchg
pop
fwait
rcrb
xor
dec
jne
scas
cld
jle
adc
sar
push
rcrl
pop
inc
sahf
popa
jns
add
pop
cs
push
pop
in
and
xchg
repnz
stc
aad
jno
jns
mov
daa
mov
les
mov
jno
movsl
hlt
jo
mov
xor
pop
push
lock
mov
xor
cltd
xlat
lret
or
sbb
mov
sbb
push
in
or
push
mov
mov
sub
cwtl
xchg
cltd
mov
data16
jnp
dec
cld
movsl
mov
ljmp
or
mov
dec
adc
sub
loop
rolb
orl
add
fsts
aaa
push
mov
addr16
test
sahf
sub
lcall
add
in
cmpsl
les
psubq
sub
loop
in
insb
sar
(bad)
mov
xor
mov
ret
rcrl
movsl
shlb
test
aam
bsr
shrl
repz
ja
cmpsl
pop
inc
jp
push
enter
ljmp
xor
jp
les
stos
cltd
push
shl
bound
sub
shll
push
fldcw
xor
xor
gs
test
jp
cmp
jl
addb
stos
mov
fldl
or
ret
jno
pop
hlt
out
fwait
sti
push
loope
sub
adc
insb
pushf
in
ss
test
dec
sub
inc
pop
pop
xorl
inc
cltd
add
xor
out
sbb
lds
iret
dec
mov
(bad)
or
(bad)
aas
pop
push
ret
mov
inc
aad
fldt
jp
jmp
mov
pop
jo
aas
test
cmc
outsl
and
xor
xor
popf
sub
pop
pop
inc
mov
lock
xchg
mov
fdivs
inc
xchg
fcompl
kmovd
adc
aam
or
xchg
push
arpl
mov
ret
out
push
inc
add
sahf
jmp
iret
sbb
js
roll
loop
in
mov
popf
cmc
mov
xchg
shll
in
inc
or
pop
mov
dec
js
jl
sub
sbb
dec
das
lahf
(bad)
out
sub
idivb
push
call
add
adc
dec
sbb
mov
xchg
lcall
xchg
xchg
sub
pop
std
cli
pop
push
flds
lea
lret
push
sbb
mov
inc
xchg
or
mov
les
mov
popf
shr
