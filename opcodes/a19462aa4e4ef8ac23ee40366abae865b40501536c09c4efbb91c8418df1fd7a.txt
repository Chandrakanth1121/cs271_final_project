dec
or
xchg
loop
fs
shl
stos
pop
popa
mov
cmp
dec
pop
lds
in
rdpmc
movsl
sbb
jmp
xchg
test
pop
dec
fwait
xlat
mov
int
and
stos
fsubr
xor
fldenv
std
sar
mov
(bad)
test
cli
pop
pop
pop
cs
sbb
fiadds
faddl
in
int1
jecxz
cmp
(bad)
scas
adc
fldcw
jne
cmp
clc
repz
in
or
lock
pop
int
sub
xor
mov
pop
insb
fisttps
cli
sbb
add
xor
fnstcw
js
fmull
lock
or
fwait
inc
and
fnstcw
lock
lret
add
add
fcoml
add
sbb
mov
sbb
aad
add
push
ficoml
mov
jmp
jnp
jmp
adc
or
shlb
(bad)
mov
add
adc
sbb
cmp
nop
lret
decb
loopne
sub
test
(bad)
dec
in
dec
sahf
(bad)
loopne
pop
mov
add
dec
dec
or
test
sbb
mov
jmp
sub
rcll
fwait
mov
xchg
mov
add
ss
adc
xchg
sub
imul
outsl
pusha
aam
or
lret
js
fwait
jno
fwait
in
and
lret
test
or
in
sub
pop
mov
mov
and
sti
fldcw
xchg
mull
lea
shrl
push
pusha
clc
push
xchg
mov
cmp
ds
sub
imul
adc
aas
jb
mov
add
imul
push
cld
cmp
aad
dec
xchg
fsubr
jmp
addr16
sub
repnz
adc
lea
shll
jp
xor
mov
add
or
and
lcall
push
ljmp
cmp
cmp
loopne
inc
sub
xlat
fcoml
loop
data16
and
lea
std
fdivr
mov
cmpsl
repz
push
js
jp
sub
xchg
mov
add
(bad)
add
aas
xchg
stos
pop
pop
dec
pop
or
jl
hlt
sub
cmc
pop
mov
push
adc
xchg
(bad)
or
mov
cmp
adc
dec
lods
sbb
xchg
jl
push
out
xor
push
(bad)
aad
in
scas
inc
loope
arpl
(bad)
cmp
cli
daa
pop
mov
push
or
push
adcb
inc
sub
aad
int
(bad)
cli
ds
negl
test
dec
lods
sub
mov
pop
and
ss
mov
iret
and
test
repnz
loop
gs
fnstcw
fidivl
xor
cmpb
fwait
cmc
insl
jo
test
xchg
leave
inc
push
mov
cld
test
lock
fimull
xor
pop
mov
ret
jge
dec
lock
call
adc
inc
add
push
jbe
loop
jne
in
cld
fwait
les
add
sbb
bound
xor
sub
out
iret
shl
or
fistl
lahf
or
in
jae
adc
jecxz
repz
push
sub
or
loope
imul
sahf
testb
jbe
clc
sub
push
or
arpl
rclb
adc
adc
movsb
dec
inc
ror
xlat
sti
mul
lds
int1
lcall
push
cmp
sti
cltd
loope
dec
sub
das
pop
add
and
jp
stos
clc
jp
sbb
mov
in
ret
in
cmpsb
inc
imul
mov
std
mov
and
jne
push
lock
or
adc
negl
loopne
inc
xor
popf
sarl
movsb
xchg
hlt
cmp
xchg
rcrb
call
cmpb
and
jne
push
(bad)
and
adc
pop
mov
sub
pop
pushf
pusha
mov
sub
or
orb
aas
cltd
jnp
cmp
popa
sub
jmp
or
fcomi
dec
call
jne
push
jmp
mov
add
repnz
dec
popa
mov
push
imul
mov
retw
xor
sub
fadds
(bad)
xchg
sub
movsl
pop
sbb
int1
sub
out
or
xor
sub
movsl
xor
sbb
cmpsl
nop
lds
lock
and
out
pop
or
mov
int1
xor
ja
test
ficomps
rolb
push
out
xor
push
or
mov
adc
xorl
xchg
jecxz
xor
aas
push
out
pop
mov
inc
mov
push
test
stc
dec
mov
xor
dec
xchg
pop
iret
pop
sbb
pop
mov
or
mov
inc
cld
cli
imul
leave
int
sub
repnz
ljmp
je
adc
xor
jecxz
jnp
jns
test
int1
add
fisttps
std
or
add
push
cmc
xchg
xor
xlat
insb
int1
ret
mov
xor
int1
pop
pusha
loop
push
pop
cli
push
stc
mov
sbb
and
adc
call
sub
jbe
xchg
and
pop
stos
stos
out
add
jg
int1
cmc
add
push
dec
sub
mov
(bad)
pop
test
mov
les
(bad)
in
xor
in
sub
popf
or
xlat
std
xor
or
dec
sbb
jne
dec
(bad)
ljmp
mov
inc
jae
mov
xor
sbb
cmp
call
(bad)
or
popf
sete
sbb
cmp
lods
adc
pop
fwait
out
sti
mov
incb
mov
pop
or
xchg
lret
into
or
or
das
xor
xor
addr16
push
cmpsl
push
xchg
repnz
movsb
mov
sub
push
arpl
int3
loope
adc
mov
push
adc
cmp
imul
pop
mov
dec
push
jae
jmp
xchg
into
add
xor
cs
mov
jecxz
adc
rclb
subb
mov
or
imul
aaa
ja
out
adc
stos
insl
sbb
pop
sti
sahf
jne
loop
outsb
and
cmp
mov
pop
loop
push
(bad)
out
js
int1
out
xchg
in
mov
lock
push
xor
sti
mov
ret
add
fstpl
xor
sub
shr
inc
in
in
jg
or
call
push
jp
xchg
xchg
cmp
sbb
addr16
cmp
stc
dec
mov
int
lds
movnti
into
xor
ficoml
hlt
add
mov
pop
cmp
mov
in
lds
and
popf
nopl
stc
pop
filds
cltd
sub
and
in
iret
(bad)
es
mov
pop
in
jb
jecxz
out
std
fcom
and
cmp
fbld
popf
roll
adc
push
pop
xorb
and
repz
mov
pop
cmpl
cli
or
or
stos
sbb
arpl
jp
push
fdivl
decb
(bad)
daa
sti
xchg
jne
add
movsl
xchg
cmpsl
pop
sub
aad
or
data16
divl
mov
popf
dec
dec
sub
test
and
mov
jp
cs
xchg
xchg
push
xchg
in
xchg
and
imul
adc
(bad)
xlat
push
ss
sub
jnp
lock
add
add
(bad)
clc
stc
bound
mov
call
cltd
loopne
lods
mov
mov
mov
clc
cli
jle
add
add
mov
loope
data16
add
std
pop
roll
and
push
into
out
rol
push
ja
(bad)
les
nop
jmp
pop
into
call
ljmp
add
enter
es
and
out
mov
pop
out
loopne
fwait
jmp
add
test
mov
and
xorl
addb
jg
sub
dec
or
inc
mov
adc
rclb
shll
shl
mov
lock
popf
into
add
xor
mov
out
inc
jo
sub
divb
mov
ljmp
adcl
mov
ret
jmp
xchg
cli
adc
adc
sbb
repnz
into
xchg
pop
pop
rcrl
and
cmp
sbb
dec
inc
cld
out
xchg
dec
sar
js
ret
push
jnp
mov
xor
shll
xchg
or
aad
add
es
test
xor
fnsave
imul
jecxz
lcall
sub
jge
ret
sti
push
inc
cltd
or
ljmp
dec
or
cmp
mov
or
pop
adc
aad
mov
push
jno
push
sti
or
mov
test
mov
xchg
cmp
