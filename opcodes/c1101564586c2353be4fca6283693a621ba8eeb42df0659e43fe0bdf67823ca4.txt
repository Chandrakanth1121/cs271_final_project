xor
arpl
fstps
jns
push
cld
sbb
pop
jg
gs
aaa
xchg
mov
push
jmp
add
inc
ds
push
es
lret
gs
inc
xor
fdiv
dec
dec
outsl
cmpsb
dec
inc
lods
lret
aad
cmpl
push
pop
outsb
dec
pushf
mov
add
push
lcall
pop
mov
adc
and
into
xor
mov
imul
outsb
fists
in
sub
sbb
pushf
cmpsl
jp
nop
jg
mov
xor
pop
gs
shl
dec
and
in
jo
addr16
repnz
int
fisttpl
jbe
inc
sahf
xor
stc
out
loopne
cmp
mov
add
xor
mov
xchg
adc
mov
stos
add
pop
and
sub
inc
test
orb
add
sbb
dec
pop
enter
dec
aas
fs
xchg
pop
mov
ss
sub
mov
(bad)
mov
adc
dec
add
cmpl
mov
sbb
into
xor
or
or
add
movl
lret
pop
pop
lret
xchg
clc
ja
mul
jmp
jb
(bad)
sub
lcall
pop
popa
int3
leave
insl
push
into
mov
mov
lcall
add
push
adc
int3
or
rorb
mov
pop
lds
mov
in
lret
test
pop
clc
jg
(bad)
sub
lock
and
inc
fcoms
and
pop
pop
pop
int
inc
jbe
jecxz
out
(bad)
(bad)
pop
dec
mov
mov
cltd
(bad)
das
mov
test
push
imul
lret
repnz
les
or
loop
test
xchg
out
addr16
mov
iret
cmp
mov
loope
sahf
jnp
xor
add
idivl
xchg
arpl
lcall
das
vsubpd
push
ljmp
fucomi
dec
sub
repz
(bad)
and
(bad)
push
jae
daa
xchg
mov
or
sbb
loope
mov
dec
fistps
xor
cmp
adc
mov
das
test
scas
aaa
cmpsb
jle
pop
sbb
leave
dec
pop
in
lcall
xor
js
(bad)
js
lods
cs
ret
or
mov
mov
pop
sbb
daa
sti
clc
fisubl
in
inc
pop
sbb
rolb
(bad)
mov
sub
leave
sub
rcrl
cmpsl
sub
or
addr16
sub
into
jl
push
jecxz
mov
and
mov
jge
sub
xchg
cmp
les
in
mov
cmp
out
mov
add
cltd
addr16
add
adc
stos
jae
arpl
dec
ret
pop
int1
jle
mov
fnsave
pushf
pop
cmp
mov
fnstcw
inc
std
adc
fcomi
pop
jns
sub
sub
(bad)
std
inc
pop
and
sub
lret
xchg
movsl
mov
pop
jb
dec
inc
adc
lret
cmpsl
inc
cmp
lds
enter
pop
mov
push
notb
adc
mov
cmp
ret
sub
out
inc
add
or
dec
imul
push
push
jno
jno
hlt
xor
pop
xor
push
out
int
stos
xorl
xor
lods
fimuls
inc
and
mov
loopne
cmp
insl
stos
jle
adc
mov
pop
bound
mov
xchg
(bad)
and
and
inc
xchg
jno
(bad)
fcoms
in
push
cmp
adc
gs
fld
dec
sub
les
push
mov
inc
mov
lock
add
in
cmp
jb
rcl
inc
imul
into
add
and
mov
inc
inc
nop
sbb
inc
cs
cmp
aas
sbb
int3
inc
mov
insl
daa
mov
sbb
and
adc
dec
sbb
add
fldl
scas
push
sbb
pop
lahf
test
popa
sbb
popa
fs
add
fs
scas
xchg
xorl
ror
pop
clc
repnz
fdivl
lcall
repnz
or
xor
jecxz
clc
int3
xchg
std
gs
inc
btr
loopne
push
inc
mov
jecxz
gs
(bad)
in
pop
dec
inc
gs
xlat
cwtl
aad
add
push
xchg
je
jmp
loope
or
idivl
mov
dec
enter
mov
inc
ret
in
imull
dec
cltd
or
pop
imul
movsb
dec
mov
std
in
mov
mov
iret
scas
in
mov
sub
dec
and
jno
mov
cli
push
pop
pushf
psrad
ljmp
and
xchg
mov
popa
jbe
in
outsl
fisubs
add
pop
mov
push
pop
rcl
jo
popa
add
adc
scas
cmpsb
dec
lods
je
pop
leave
scas
sti
dec
pop
data16
cmpsb
xor
in
(bad)
shlb
sub
sbb
(bad)
lea
les
pop
loopne
mov
test
sbb
pop
ss
and
or
pop
enter
cs
test
mov
xchg
sbb
imul
add
movb
sub
xchg
fisubl
mov
std
gs
mov
mov
int
sbb
cmpsl
dec
xchg
ret
dec
adc
jmp
xchg
test
mov
lds
(bad)
loopne
add
dec
cmp
dec
pop
and
call
je
cmc
stos
aam
into
sbb
sbb
push
lods
dec
xor
outsb
inc
inc
mov
pop
jg
cmc
add
nop
loop
loopne
in
int3
arpl
int3
or
or
xchg
jae
or
lock
xchg
(bad)
adc
xlat
out
xchg
adc
pop
loopne
call
loop
out
dec
scas
mov
mov
lock
sar
xor
mov
sub
pop
mov
pop
movsl
pushw
push
adc
adc
push
pusha
pop
in
ja
or
ljmp
lcall
divl
mov
popa
aam
test
push
add
insb
out
stc
inc
jb
inc
pop
lods
bound
add
inc
cmpl
fstpl
push
repnz
fisttpl
fadd
xchg
pop
inc
or
cmp
out
push
cltd
int3
add
int1
test
in
add
ficompl
testl
aas
rcrl
push
jecxz
mov
lahf
lahf
rorl
or
and
jge
out
pop
mov
addr16
pop
(bad)
aaa
addr16
gs
repnz
lahf
xchg
inc
jo
sbb
testl
jle
xchg
or
aaa
inc
mul
jbe
stos
jno
negl
ljmp
dec
and
lea
out
add
int3
inc
lcall
mov
ret
cwtl
fs
sahf
pop
sahf
xor
ja
and
push
pop
jb
mov
pop
fists
sbb
dec
xchg
pop
lock
mov
jo
inc
iret
jmp
adcl
inc
cwtl
ja
and
ljmp
sbb
xchg
sbb
scas
shlb
lcall
cwtl
lods
xor
(bad)
or
in
(bad)
pop
cltd
daa
adcb
or
cmp
ja
pop
lea
push
ljmp
pop
int3
in
addr16
or
and
mov
pop
cmp
sbb
cmp
mov
fwait
adc
pop
popf
jne
hlt
fucomp
push
jle
ja
loopne
add
push
(bad)
lock
clc
push
jo
adc
mov
in
into
aaa
xchg
mov
cmp
pop
dec
fiaddl
cwtl
or
into
and
add
inc
(bad)
sahf
cltd
adc
rcll
(bad)
jb
int
dec
ret
pop
or
xchg
mov
rcrl
imul
jmp
(bad)
scas
insl
xchg
sub
push
mov
cli
xor
xchg
fldt
(bad)
leave
dec
push
outsb
and
mov
cmp
addr16
test
mov
sub
notb
mov
adc
jp
xor
sub
jecxz
enter
popa
jns
push
mov
cli
push
add
test
sbb
and
push
cli
cmp
andl
jmp
add
hlt
or
imul
mov
rolb
xchg
sub
jns
mov
jecxz
stc
push
mov
ljmp
and
out
sub
lret
dec
cmpl
jo
cmpsl
into
sbb
pop
movsb
sub
xor
adc
jns
hlt
or
push
pop
or
mov
iret
cmp
ss
mov
bound
cltd
dec
sbb
add
jecxz
ret
