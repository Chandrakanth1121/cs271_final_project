pop
mov
add
add
add
lods
cld
xor
add
xchg
mov
out
jnp
push
and
mov
xchg
lahf
jp
mov
jns
shlb
sub
test
movsb
repnz
adc
pop
cli
insb
add
push
lds
lods
jbe
pop
std
push
xchg
sbb
hlt
insb
add
cmpsl
imul
lret
pushf
mov
pop
out
test
inc
int1
mov
xchg
push
ljmp
jmp
sti
cmpsb
pop
call
adc
mov
cli
mov
xchg
rcrb
pop
xchg
test
roll
push
and
dec
movl
adc
or
jne
daa
rcll
scas
mov
mov
insl
fnstcw
(bad)
push
ficomps
xor
loopne
loope
and
cmp
fstps
fidivl
lret
std
data16
cmpsl
loope
mov
lret
jge
pop
fidivs
and
lea
clc
fldcw
cmp
js
pop
sar
jle
jg
xchg
pop
test
xchg
inc
lahf
push
sbb
rcrl
outsl
mov
dec
add
mov
dec
iret
or
es
and
jnp
ret
in
inc
addr16
pushf
aaa
dec
pop
fs
insb
cmp
hlt
iret
imul
dec
dec
push
mov
push
or
pop
test
sbb
push
sbb
adc
pushf
lea
out
rcrl
sub
adc
mov
push
push
mov
xor
mov
push
inc
inc
outsl
insl
jo
arpl
rcl
decl
fdivs
addl
popf
and
int
(bad)
dec
data16
mov
mov
and
loopne
(bad)
mov
pop
inc
mov
jae
add
push
insl
push
mov
sbb
ficomps
test
repnz
daa
mov
out
add
xchg
xor
adc
insb
or
insb
pop
mov
jnp
inc
sub
add
lahf
jnp
mov
lea
stc
xchg
push
cli
lret
add
sbb
test
push
insb
fnstcw
add
lea
ss
adc
pop
(bad)
lret
arpl
push
insl
inc
cmp
mov
jl
out
pop
push
lcall
imul
and
cmp
fimuls
pop
dec
mov
jg
in
add
xor
inc
fs
int1
xchg
loop
cmp
and
aaa
xchg
mov
fwait
lahf
add
fwait
dec
nop
rcrl
(bad)
int
pop
or
mov
aaa
out
xchg
or
cmp
adc
test
andb
lahf
(bad)
mov
cmc
lcall
test
mov
stc
or
je
push
push
lret
push
(bad)
mov
fidivrl
adc
sti
push
xor
push
enter
(bad)
jne
ret
mov
dec
in
js
ret
push
int1
and
std
jns
es
cmc
repz
sbb
cmp
lds
sub
in
out
push
fnstsw
pop
das
(bad)
pop
and
jle
or
push
xor
std
cmp
xlat
sub
out
jae
add
sbb
mov
js
pop
(bad)
sahf
jo
mov
xchg
and
insl
data16
test
(bad)
pop
sbb
es
adcb
mov
pop
pop
sub
cmp
xor
sbb
mov
test
dec
xchg
lea
mov
out
(bad)
clc
loop
mov
enter
fcmovb
inc
dec
push
aad
pop
mov
sahf
add
cwtl
xorl
sub
push
fs
repnz
repnz
push
int1
jbe
arpl
cmpsb
cwtl
dec
mov
mov
jg
mulb
adc
sahf
pushf
push
jnp
pop
add
mov
les
lcall
lods
cmp
mov
inc
pushf
gs
je
mov
test
and
lock
fidivrl
popf
adc
adc
in
pop
lods
jmp
inc
fimull
repz
and
inc
adc
pop
xor
add
adc
pop
push
sub
cmpsl
sbb
dec
jmp
loope
ja
movsl
mov
mov
xor
ja
xchg
data16
daa
stc
orl
inc
jmp
std
rcl
fidivrl
pushf
cli
lds
arpl
jns
ret
xchg
fcomip
push
jae
lock
ja
fcompl
int1
jne
in
pop
jbe
hlt
(bad)
dec
mov
stos
and
das
fdivr
xor
sub
stos
fadd
pop
mov
xlat
(bad)
lods
adc
lds
cs
jl
mov
push
sub
fiadds
(bad)
xor
lods
mov
fsub
jne
das
ja
into
test
jecxz
por
(bad)
sbb
xor
gs
jecxz
xchg
imul
stc
xchg
ja
ss
push
ret
add
mov
out
popf
xchg
add
movsb
fwait
mov
leave
lods
test
js
mov
adc
or
fisttpll
push
es
loope
mov
orl
sub
jmp
sbb
push
gs
sbb
mov
push
cmpb
mov
out
in
adc
out
xlat
mov
mov
mov
cmpsb
xchg
jns
push
push
aam
add
pusha
mov
mov
inc
or
push
mov
sbb
cmp
repz
test
fldt
xchg
fwait
dec
in
push
lret
(bad)
sbb
cli
testl
cmpsb
ljmp
jle
push
add
sbb
xlat
and
enter
shrb
lds
dec
data16
pusha
jecxz
mov
pop
iret
sarl
jecxz
inc
sahf
aam
dec
fwait
pop
imul
xchg
mov
iret
pop
mov
clc
xchg
dec
dec
data16
je
sub
aam
cmp
les
inc
or
adc
pusha
test
sbb
cmpsl
jg
pop
sbb
xchg
or
mov
pop
xor
aas
lahf
shll
fstps
neg
dec
add
mov
(bad)
fistl
pushf
dec
fninit
adc
hlt
imull
shrb
pop
arpl
sub
mov
and
or
int1
mov
(bad)
arpl
nop
push
(bad)
sbb
xlat
cmpsl
fdivrp
cmp
sub
push
and
xchg
(bad)
stc
pusha
repz
imul
cmp
test
xorl
push
and
pop
cs
pop
xchg
or
repz
pop
xor
xlat
mov
dec
jge
gs
sub
js
mov
push
sub
stos
mov
add
mov
ja
xor
mov
xchg
pop
rcrl
jno
pop
outsb
aas
jl
add
aaa
repz
mov
outsb
aaa
adc
shlb
bsf
xlat
mov
(bad)
jl
out
(bad)
jo
stos
stos
sub
cwtl
mov
pop
bound
mov
ret
jg
xor
and
mov
jl
add
les
loope
sub
lods
jae
int1
out
mov
hlt
faddp
rcll
lcall
jecxz
cltd
mov
movsb
push
or
dec
mov
mov
sbb
inc
leave
cmpsl
addr16
movsl
rol
add
movsb
mov
ret
lods
dec
jbe
cmp
pop
mov
fcmovb
enter
cmp
iret
push
and
cld
mov
loope
mov
cmp
lods
fsts
test
cmp
sbb
mov
pop
jg
lret
or
sub
push
cmp
insl
fs
push
in
cltd
pushf
in
or
lea
push
xchg
inc
mov
pop
stos
(bad)
loopne
(bad)
adc
dec
or
or
mov
jno
test
mov
popf
imul
jle
popf
push
aaa
ficoms
out
stos
xor
mov
(bad)
pop
(bad)
jmp
add
dec
movsl
xor
xchg
cwtl
adc
and
je
adc
leave
jmp
mov
dec
sbbb
dec
xlat
outsl
xor
mov
adc
cmp
adc
les
mov
push
rol
pop
jecxz
in
jg
mov
lea
(bad)
add
rorb
aam
les
int1
mov
cwtl
out
pop
adc
mov
mov
push
cmp
sti
adc
cmp
aas
rcrl
or
cmp
ds
bound
movsb
rcrl
jo
mov
repnz
mov
xchg
ljmp
arpl
ret
lret
out
dec
pop
add
mov
jae
dec
je
mov
xchg
mov
insb
add
and
cmp
push
iret
rcrb
mov
ss
cmpsl
imul
lock
shl
js
mov
int
lahf
cmp
xchg
stc
ret
