jg
and
push
mov
sub
mov
mov
or
jne
add
inc
sti
ljmp
out
xchg
rolb
adc
mov
push
je
rol
xorb
mov
add
sub
movl
mov
ror
mov
(bad)
jg
faddl
rorl
test
je
mov
data16
pusha
sbb
outsl
(bad)
incl
not
adc
mov
xor
fisubs
inc
lock
jbe
fcmovnu
mov
lcall
inc
int
pop
in
outsl
mov
adc
dec
int3
daa
das
sarl
jle
insl
fcomi
data16
pop
adc
add
jnp
imul
and
stc
je
xchg
movb
jae
sub
add
(bad)
(bad)
and
rorb
sbb
mov
dec
fdivrl
pusha
outsl
ss
sub
loope
dec
in
adc
out
or
and
lods
call
pop
testl
mov
xor
mov
out
sbbl
loopne
mov
int
enter
adc
jne
rcr
push
dec
fdiv
loope
orps
mov
sti
and
mov
mov
outsl
jnp
std
mov
add
jb
dec
dec
lods
sub
(bad)
ljmp
jmp
add
cli
je
sub
neg
mov
out
(bad)
in
fstpt
jne
sbb
or
and
loope
adc
jno
cmp
jne
lock
xchg
popa
aaa
sub
cmp
lcall
fcmovu
ret
fidivs
insb
fsubrp
shrb
add
jg
dec
shrb
xor
popf
cmp
call
mov
pop
push
fs
add
push
lss
daa
and
push
mov
je
mov
int3
mov
mov
leave
ret
mov
push
push
test
jne
mov
xor
arpl
xchg
cld
mov
imul
xor
repnz
xchg
cmp
push
loop
sub
adc
fwait
mov
lcall
cmp
dec
(bad)
and
outsl
push
gs
je
and
rolb
push
cmp
(bad)
shll
xchg
pop
pop
pop
jp
ficompl
outsl
lcall
push
(bad)
pusha
mov
add
xchg
pop
push
cld
xchg
cmp
mov
ljmp
mov
jmp
pop
adc
jbe
push
adcb
add
test
lock
mov
out
insl
add
jbe
arpl
add
std
das
push
sbb
outsb
jne
jae
arpl
cs
mulb
popa
adc
outsb
cmp
pop
and
cmp
pop
mov
pop
jns
mov
repz
mov
push
cmp
inc
faddp
adc
jmp
outsb
jl
aam
in
xchg
push
mov
(bad)
(bad)
(bad)
call
xchg
cmp
aad
sbb
orb
xlat
jecxz
ror
cmpsb
sbb
fcmovnu
(bad)
lcall
fucomip
imul
push
loop
or
daa
and
push
pusha
dec
test
mov
lods
imul
cmc
je
cmp
aaa
adc
dec
into
fs
dec
(bad)
(bad)
(bad)
lcall
sbb
cmp
adcb
mov
lret
leave
or
insl
test
mov
(bad)
(bad)
(bad)
call
lods
mov
mov
clc
xchg
stc
hlt
xor
rcrb
inc
push
sub
(bad)
(bad)
ljmp
out
les
(bad)
cld
pushf
inc
xchg
test
int
scas
inc
xchg
dec
adc
push
fmuls
decl
out
xchg
ror
push
xor
pop
cmp
std
data16
lcall
xor
ss
mov
xchg
jo
(bad)
(bad)
decl
mov
sbb
aas
dec
sbb
or
je
sbb
into
push
lock
dec
push
pop
insl
inc
(bad)
(bad)
(bad)
lcall
jmp
out
cltd
mov
cld
fsubrs
mov
or
shrl
xor
shll
lods
xchg
movsb
sti
mov
daa
out
cwtl
mov
mov
push
sti
pop
outsl
adc
xor
cmp
in
jg
sbb
imul
in
out
int1
lods
sbb
or
or
das
fdivp
test
pop
mov
je
jp
or
jp
cmpsl
repz
jecxz
mov
pop
jns
popa
(bad)
mov
dec
pop
imul
or
daa
push
gs
inc
(bad)
in
ljmp
out
mov
xchg
shll
push
sub
adc
mov
fmuls
out
sub
repz
imul
push
fstpt
sti
jg
push
sub
jae
out
and
pop
imul
pop
adc
in
out
out
cmp
push
hlt
negb
mov
dec
clc
mov
out
mov
mov
cmp
push
mov
mov
xor
std
mov
aaa
daa
pop
das
push
(bad)
(bad)
push
(bad)
fildll
mov
popf
jo
cmc
sub
add
mov
iret
das
sub
aaa
(bad)
push
mov
pop
inc
clc
jmp
rep
out
or
addr16
push
in
cmc
psllw
mov
mov
loope
cld
sysenter
(bad)
push
mov
dec
imul
mov
clc
aam
pop
push
xor
inc
inc
mov
fdivs
in
lods
fstl
mov
fistpll
mov
fnstcw
je
push
rcrl
fsubrs
ja
loopne
int
sbb
lcall
aaa
mov
(bad)
je
pop
(bad)
fwait
loope
xchg
jp
ja
shl
push
fstps
jecxz
arpl
lahf
push
xchg
scas
pop
sarl
std
mov
pop
inc
cmp
pop
scas
ficoml
push
and
xor
ja
lret
repnz
push
dec
(bad)
mov
jecxz
repnz
fildl
ja
jno
imul
push
loope
fstp
out
cmpsl
shl
int3
ja
mov
or
cmc
jg
outsl
push
sarl
repz
mov
imul
sub
push
dec
ljmp
cmp
(bad)
cmp
addb
iret
push
imul
test
pop
clc
and
cwtl
fadd
xlat
pop
mov
fnstcw
jno
loope
fwait
out
sub
mov
daa
xor
add
jg
enter
rol
sbb
bound
cli
dec
xchg
push
jo
jnp
mov
iret
add
fisubrs
mov
cmc
in
inc
dec
iret
sbb
test
sti
outsl
and
sbb
shrb
ljmp
and
inc
push
mov
fcmovbe
repz
mov
mov
adc
xchg
mov
jg
addr16
and
xchg
pop
sbb
mov
mov
aaa
fsubrl
mov
pop
shll
jo
mov
(bad)
fnstsw
mov
or
xlat
jle
adc
jp
pop
push
jb
iret
pop
lock
repz
mov
jp
cmp
fcomip
insb
mov
stos
pushf
and
negl
jbe
xor
pop
sub
xor
mov
push
test
sti
fisttpll
shl
fnsave
loope
pop
mov
in
outsl
(bad)
push
rclb
int1
das
mov
psubsw
pusha
fyl2xp1
push
sub
jae
xchg
sbb
inc
packuswb
pop
loopne
repz
add
aad
jp
gs
lock
jnp
push
inc
push
xor
jno
pop
addr16
mov
outsl
xchg
mov
jl
cmc
pop
pop
arpl
test
mov
push
lcall
shll
out
cli
mov
out
daa
push
int1
je
iret
and
paddsb
mov
cmc
pop
inc
pop
out
repz
push
push
inc
cmp
xlat
std
lock
mov
xchg
clc
(bad)
mov
xchg
pop
shrb
cld
das
xor
iret
call
jno
imul
out
jo
fcomps
pop
cmpsl
ret
and
mov
pop
pop
mov
stos
aaa
add
xchg
mov
or
fstps
inc
push
push
insb
fdiv
push
dec
repz
or
out
xchg
sbb
jae
fstpt
dec
stc
(bad)
int1
aam
insl
fadds
fsubrl
das
sub
lret
repnz
sub
mov
jnp
cmpsl
push
sub
jnp
lahf
push
das
inc
jg
insb
js
mov
pusha
xchg
insb
cmp
nop
repnz
incl
stos
out
sub
mov
fmuls
cs
movsb
cmp
adc
mov
shrl
sbb
out
mov
int1
lock
xchg
pop
jne
push
fildl
push
cmpsb
(bad)
mov
push
push
movsl
pop
js
(bad)
inc
