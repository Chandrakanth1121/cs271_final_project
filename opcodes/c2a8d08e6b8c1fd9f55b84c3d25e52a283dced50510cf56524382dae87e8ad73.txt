ret
hlt
and
mov
xor
je
jg
in
cmp
adc
js
push
lcall
mov
mov
adc
lea
hlt
test
mov
xchg
dec
jmp
or
lcall
call
xchg
hlt
sub
negl
fnsave
jmp
push
xor
shufps
rol
repnz
rclb
insb
test
lea
stc
dec
fistpl
mov
and
not
jb
xchg
adc
sahf
je
adc
not
xchg
pop
orb
addr16
jmp
dec
cmp
aam
add
push
fcoml
push
push
push
out
push
and
test
push
mov
neg
testl
int1
ret
arpl
adc
lea
in
adc
lock
jns
jmp
adc
xor
xor
idivb
push
nop
aas
(bad)
xchg
xchg
test
mov
test
mov
dec
mov
(bad)
lea
cwtl
cmp
or
jns
push
fcmovne
inc
mov
scas
jmp
jle
jg
xchg
je
mov
adc
xor
cli
cmp
sti
xchg
mov
cs
push
dec
xchg
adc
ja
inc
and
adc
repz
mov
jno
rclb
test
sbb
xor
shl
mov
stc
lods
adc
in
xchg
pushf
fcomi
leave
jge
jbe
xor
xchg
sahf
mov
jns
mov
cmp
lods
fcomip
cmp
sahf
xor
movsb
cltd
rclb
out
dec
shrb
xor
add
int
pop
ret
adc
andb
imul
mov
ss
push
leave
mov
test
js
push
cmp
adc
(bad)
js
mov
lcall
mov
pushf
bound
and
adc
clc
ljmp
ja
xchg
int1
shrb
inc
xchg
repz
add
sub
mov
jmp
stc
push
mov
testl
popf
dec
push
sub
inc
in
mov
lea
(bad)
dec
mov
leave
notb
(bad)
aam
or
and
fs
jnp
jo
pop
(bad)
push
push
jl
stos
jge
mov
add
js
insb
dec
clc
stos
mov
movsbl
sahf
cli
lcall
shll
jnp
in
(bad)
xor
or
sub
push
mov
xchg
pop
sarb
mov
clc
jne
incb
sbb
sbb
mov
sub
iret
pop
jne
xlat
jmp
mov
xlat
ret
jbe
mov
divb
aam
test
jl
mov
and
mov
sub
(bad)
push
cmc
or
mov
push
xchg
js
lret
xor
mov
jns
cmpsl
cmp
mov
dec
imul
or
fsts
pop
scas
push
cs
adc
adc
out
sbb
adc
repnz
jle
cmc
xchg
jmp
decb
repz
scas
xchg
xchg
xlat
test
mov
std
push
add
xchg
lret
jecxz
add
or
call
sub
jb
in
mov
enter
iret
or
xor
jae
into
sti
pop
mov
ret
in
pop
adc
ljmp
mov
inc
(bad)
lock
mov
fdiv
xchg
out
mov
cld
push
inc
mov
jge
rol
out
mov
shll
and
push
imul
insb
cmpsb
dec
movsl
call
and
imul
iret
cmpsb
loope
or
(bad)
xchg
or
je
dec
mov
xchg
push
sbb
addb
xchg
pop
sti
cmp
inc
ret
jge
dec
mov
pop
pop
insb
jg
dec
xlat
adc
dec
and
push
(bad)
cmc
pop
mov
ss
in
popa
shlb
xchg
leave
add
repz
outsl
idivb
out
cmp
push
(bad)
int
insb
cmpsl
lea
in
imul
test
mov
jns
scas
fistl
inc
enter
pop
test
sub
jbe
arpl
int1
mov
enter
and
xchg
into
inc
insl
mov
cmpsb
dec
jae
aaa
xchg
pop
jnp
in
and
mov
cmpsl
out
dec
out
xchg
and
xchg
enter
incl
stc
sub
or
push
outsb
clc
shrb
add
nop
rolb
inc
sbb
adcb
in
push
clc
(bad)
fcoms
dec
push
xchg
movsl
mov
mov
lods
ds
divb
pop
mov
in
jns
outsb
sub
mov
push
mov
idivl
xor
bnd
xchg
fwait
xchg
adc
into
xor
bound
rcrl
sbb
add
push
mov
call
(bad)
fucomip
mov
aad
xor
pop
lods
cmp
cltd
cmp
mov
or
and
pop
pop
sbb
(bad)
mov
xchg
test
sub
xchg
cmp
push
lea
xchg
out
(bad)
xlat
mov
mov
mov
jge
iret
sub
push
lock
cmp
pop
dec
dec
loopew
pop
jnp
repnz
and
fwait
xchg
idiv
sub
fstps
repz
imul
inc
sbb
mov
add
outsl
or
scas
sub
dec
sbb
test
push
xor
adc
adc
adc
mov
xchg
mov
das
or
jmp
divb
popa
add
jle
jl
std
insl
mov
bnd
dec
add
lret
int1
ds
cmpsl
repz
jle
mov
cmp
in
lods
or
sti
scas
or
or
(bad)
and
mov
cld
jae
shlb
out
mov
add
hlt
mov
cmp
xor
scas
lea
outsl
inc
leave
xchg
and
jp
out
(bad)
(bad)
lods
fistps
sbb
mov
xchg
in
and
xchg
sbb
or
rorb
in
fsubrs
cmp
in
cmp
scas
push
stos
mov
cs
xchg
insb
cs
inc
sub
xchg
(bad)
push
subb
sti
cltd
adc
cli
aam
dec
fstps
(bad)
mov
sbb
shlb
dec
mov
or
adc
fsubs
pusha
js
push
xchg
subb
and
into
bound
movsl
jl
pop
repnz
inc
push
jge
and
shrl
movsb
cmpsl
daa
dec
jecxz
xchg
pop
and
imulb
mov
add
mov
pusha
dec
and
loop
push
enter
dec
push
sub
add
push
addr16
push
fwait
xlat
push
dec
aad
push
pushf
movsl
xchg
out
int1
ljmp
fwait
lock
call
int1
xorb
xor
push
stos
xlat
mov
adc
or
jne
roll
or
jg
adc
in
fwait
movsl
xor
or
xor
test
cmp
jecxz
pop
(bad)
sbb
dec
dec
test
rorl
sbb
pushf
dec
test
aaa
xlat
push
mov
jb
cs
rorb
mov
adc
lods
les
mov
jle
movsl
xchg
mov
out
fs
outsb
mov
push
out
rorl
(bad)
imul
lds
pushf
aas
pushf
xor
dec
lds
or
jmp
movl
sahf
cmp
test
and
and
xchg
mov
xchg
orb
cli
movsb
leave
out
clc
cmc
inc
push
movsl
iret
lds
pusha
xchg
mov
and
xchg
data16
sti
pushf
incb
inc
push
or
sbb
iret
adc
push
add
or
ljmp
mov
sbb
sbb
out
cmp
jo
jg
adc
inc
or
mov
outsl
in
arpl
int3
xchg
int1
imul
leave
push
pcmpeqd
popf
sub
pop
push
repz
cmp
outsb
or
(bad)
jmp
inc
adc
loopne
ret
xchg
out
inc
or
outsb
subl
js
inc
lock
scas
outsl
ret
adc
ja
mov
sub
adc
popa
leave
loope
mov
add
arpl
lahf
xor
in
xchg
xor
stc
push
pop
cmp
sbb
push
fistps
(bad)
arpl
add
scas
push
jo
inc
(bad)
(bad)
inc
inc
push
fistpl
xchg
fidivl
push
sub
in
out
jne
mov
adc
mov
loop
xor
das
repnz
movsb
ud1
xorl
jb
fsubp
pop
push
ret
mov
lret
dec
jmp
outsl
ds
push
stos
sbb
data16
fnstcw
mov
insl
and
pop
cwtl
adc
and
dec
iret
cmc
