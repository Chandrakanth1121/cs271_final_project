push
jle
adc
or
dec
or
dec
cmp
inc
mov
jge
aad
hlt
pushf
hlt
sahf
add
cmp
or
sub
loope
mov
sub
std
cmpsl
mov
repnz
stos
inc
pop
xor
test
ret
out
jge
cli
outsb
mov
test
add
test
pop
ret
jnp
aad
or
jbe
pop
lock
sbb
dec
adc
in
xchg
subb
jge
push
sub
adc
scas
mov
lods
orl
movq
mov
outsb
xchg
mov
cs
mov
and
jne
pushf
lods
cmpsb
out
inc
int1
insl
in
sahf
and
dec
jo
lret
cld
insl
rcrb
rcll
ja
jge
jle
push
aaa
pop
rorb
shl
pop
and
push
and
xchg
and
cld
push
imul
inc
push
mov
dec
cmp
test
xor
mov
mov
adc
jmp
test
cld
ja
pop
pop
sti
std
(bad)
test
add
sub
jnp
adc
out
adc
or
ret
sub
or
out
orl
lahf
test
lods
jge
sub
sub
pop
pop
outsl
mov
dec
sub
mov
mov
incb
xchg
push
push
(bad)
push
xlat
sbb
in
dec
mov
call
pop
stc
mov
lret
andl
hlt
movsb
mov
sbb
inc
jg,pt
push
adc
pop
imul
imul
insl
fsubs
and
scas
dec
jmp
clc
dec
leave
movsl
jnp
ljmp
ficompl
ret
mov
pop
cli
out
fiaddl
das
loop
fidivrl
xor
pop
lahf
or
inc
mov
add
rcrb
adc
fadd
outsb
and
roll
pop
pop
cmp
repnz
int1
in
cmp
(bad)
pusha
div
mov
fwait
and
dec
sub
inc
iret
loope
inc
dec
xchg
inc
lret
jg
(bad)
sub
aas
in
les
cmc
(bad)
fldt
out
cmpsb
or
adc
jp
sub
dec
jge
sub
fisubrl
movsl
addr16
(bad)
lock
fiaddl
mov
das
out
xor
add
xchg
push
sahf
jge
loop
mov
or
inc
insl
inc
mov
wrmsr
inc
cmpsb
push
and
into
idiv
and
das
pushf
lods
movsb
cli
roll
sub
dec
push
insl
mov
fdivrp
insb
insb
push
addr16
pop
test
stos
cmp
jmp
cmp
inc
xchg
dec
xchg
paddusb
mov
pop
shlb
push
mov
pop
sub
out
enter
fists
cmp
in
movsl
outsb
jmp
xchg
adc
and
lock
push
sahf
mov
jnp
xchg
pop
fwait
stc
dec
out
loop
ja
jnp
addl
xor
sbb
fnstsw
test
inc
imul
filds
mov
or
xor
ljmp
jle
xor
mov
cs
lcall
(bad)
xor
stos
cltd
das
jge
lahf
lock
and
jo
lds
pop
inc
gs
or
(bad)
xchg
jecxz
repz
inc
cmp
sub
cld
cmp
(bad)
in
in
loop
mov
insl
scas
data16
repz
xchg
addr16
jbe
pop
out
sub
jne
xor
lock
enter
inc
mov
mov
stos
fdivrl
leave
repz
cmp
xor
sbb
jmp
xor
cmp
(bad)
int3
cmp
xor
repz
push
adc
ja
xchg
mov
adc
or
test
mov
cltd
pop
sbbl
insl
nop
sbb
inc
popa
or
rorb
fisubrl
repz
pop
pop
lock
sahf
loope
repz
push
and
jecxz
dec
stos
rcrb
sub
lods
inc
adc
cmpsb
dec
sahf
and
leave
mov
jmp
jb
dec
outsl
xchg
add
add
ljmp
pop
out
(bad)
ret
pop
adcl
inc
adc
loopne
pop
leave
inc
pop
cs
jmp
mov
push
jo
mov
sbb
cmp
and
push
mov
xlat
mov
sub
repz
lods
jge
mov
cmpsb
stc
gs
in
pop
sbb
lret
pushfw
mov
out
fneni(8087
cmp
nop
xchg
pusha
xor
push
jmp
mov
xchg
push
imul
mov
cmpsb
jp
mov
lds
or
jg
popa
shl
and
and
(bad)
je
popf
lret
lea
out
scas
andb
jecxz
inc
sub
scas
push
mov
xchg
mov
arpl
or
outsl
xchg
(bad)
jecxz
adc
cmp
sbb
sub
(bad)
jmp
jecxz
push
imulb
leave
loope
out
mov
cmp
outsb
adc
or
loope
mov
test
xor
fistps
mov
test
cmp
shr
scas
cmp
pop
mov
jbe
es
fwait
clc
sbbl
sbb
imul
cmp
divb
lret
dec
cltd
ja
cmp
rcll
scas
cmc
hlt
les
cmp
hlt
xchg
decb
ja
fmulp
bound
ss
repnz
cwtl
scas
ja
push
mov
jmp
xchg
pusha
out
loop
ret
sub
sahf
scas
push
xchg
mov
xchg
xchg
jns
loopne
adc
or
pcmpeqb
lods
inc
clc
pop
test
shrb
aas
add
mov
pop
cs
sahf
add
sti
sahf
in
add
out
ds
jne
(bad)
jnp
cld
paddw
data16
mov
add
ret
lret
fcmovu
je
stos
xchg
(bad)
mov
lock
ja
dec
xor
jmp
ljmp
call
sub
mov
jp
or
(bad)
sbb
push
int1
xor
or
cwtl
fmul
dec
jg
adc
popa
mov
push
jb
scas
pop
inc
test
adc
lret
mov
call
das
sbb
jbe
jecxz
sub
push
ss
and
(bad)
mov
lahf
shl
adcl
dec
lahf
adc
mov
cmp
addb
data16
int1
int1
fisttps
sub
add
(bad)
scas
xchg
cmp
lds
or
jo
es
js
(bad)
jg
mov
cli
pop
pop
pusha
daa
lea
xchg
adc
xchg
lcall
std
(bad)
cmp
inc
imul
inc
add
jp
adc
mov
mov
outsl
arpl
repz
push
cmpsb
pop
lahf
je
ss
pushf
or
negl
dec
mov
outsl
mov
inc
loope
or
popf
push
or
add
fwait
adc
push
xchg
daa
pop
inc
mov
shrb
xchg
inc
sub
lods
nop
test
push
mov
xlat
cld
clc
subl
repnz
pop
and
orl
jo
xor
dec
push
cmp
xor
ja
mov
nop
fidivl
hlt
dec
loope
or
xor
fbld
pop
rcrb
pusha
repnz
xor
in
fists
outsb
dec
jnp
ds
fsts
xchg
ja
and
mov
dec
inc
pop
and
(bad)
out
dec
cltd
ja
stos
mov
rcrb
xor
jmp
subb
mov
ljmp
sbbb
notb
je
incb
imul
mov
xlat
or
xor
negl
sub
dec
out
es
pop
pop
mov
push
and
inc
cmp
mov
jnp
push
out
pop
mov
popa
cli
jb
arpl
mov
cmc
inc
cmp
(bad)
sahf
das
fstpt
jnp
repz
mov
insl
push
inc
jnp
into
test
outsb
lods
in
pop
xor
enter
inc
mov
cmc
and
jae
push
push
ljmp
leave
in
jmp
cmp
ja
frstor
(bad)
adc
cmpb
inc
out
mov
loop
mov
mov
xchg
pop
(bad)
jmp
fucomip
push
stos
jne
push
add
jno
mov
pop
ret
ds
dec
dec
pusha
add
push
(bad)
ljmp
shlb
mov
sbb
push
cmp
or
mov
repz
inc
or
aam
push
mov
xchg
aam
jp
call
cmp
(bad)
cmp
jp
jle
xor
test
mov
loop
(bad)
in
sahf
out
dec
test
inc
inc
mov
