dec
fimull
pusha
pop
vpaddd
(bad)
gs
roll
stc
cld
jne
inc
imul
mov
outsb
loopne
cltd
inc
xchg
sub
add
jae
bound
adc
addr16
push
cltd
jns
test
sub
add
ss
lret
fwait
repnz
data16
jo
test
out
lds
stc
adcl
lods
ljmp
mov
push
aaa
cmp
sbb
fs
dec
dec
test
lahf
jns
adc
outsl
aad
xchg
fs
sbb
bnd
sub
push
xchg
jmp
mov
daa
lock
jns
jb
jbe
test
sbb
jge
bswap
xchg
rorb
or
jge
test
ss
lock
fwait
xorb
(bad)
cmp
jae
aam
mov
pop
test
dec
out
addr16
loope
test
pop
rolb
test
xor
jl
popa
adc
gs
mov
mov
sub
xchg
(bad)
mov
lahf
jl
fisttps
push
es
jle
push
loopne
and
cmp
adc
and
adc
pop
sub
or
test
insb
cwtl
out
xchg
pop
dec
or
cmp
sub
pop
mov
pop
nop
jno
sbb
and
addr16
cltd
adc
xchg
mov
pushf
or
stos
push
jmp
jno,pt
ret
inc
adc
pop
pop
push
push
xchg
mov
sahf
jnp
mov
ss
jg
jge
lds
xchg
in
add
ss
(bad)
int3
lds
xor
pop
mov
xor
cmp
mov
fsubr
sbb
loop
jne
push
xor
xchg
loop
aam
fnstsw
bnd
cmp
fsubl
mov
jl
add
sub
jo
add
xor
int3
or
push
(bad)
sbb
sub
or
sbb
mov
(bad)
xor
push
jge
rcrl
call
ds
dec
ds
cmp
adc
dec
cmpsb
sahf
mov
lahf
lret
movsb
cmp
shll
jno
mov
xor
xchg
jl
cld
cwtl
insl
repnz
dec
mov
dec
pushf
cmp
jae
rol
sbbl
jp
test
int
adc
xchg
xor
lret
lret
and
cmp
push
sarb
scas
sbb
jae
or
mov
scas
loopne
jne
xchg
arpl
(bad)
scas
test
sub
push
push
pop
ds
xor
test
lock
xchg
xorl
into
movsb
pop
xchg
adc
movsl
(bad)
sub
aad
cmc
(bad)
sbb
out
or
aas
adc
popa
inc
pop
and
repz
sbbl
imul
pop
addr16
in
inc
mov
and
imul
push
loop
lcall
and
sbb
es
orb
call
jno
and
je
cmp
int
cmp
sub
jo
sbb
mov
xchg
jb
or
jbe
cwtl
test
fisubl
xchg
std
in
andb
scas
adc
pop
data16
xchg
cs
lret
add
xor
sti
or
mov
cmp
or
xor
or
dec
cmp
sub
frstor
sbb
(bad)
pop
imul
mov
pop
inc
les
jnp
pop
aad
jno
stos
js
out
and
hlt
xor
pushf
lds
xchg
or
xor
add
dec
sub
and
ljmp
lock
cmp
cli
shll
or
mov
test
lds
sub
xor
xchg
out
das
xchg
dec
add
jno
lea
fidivrl
(bad)
addr16
lods
cwtl
test
sub
(bad)
test
or
sbb
pop
and
jno
push
outsb
in
(bad)
lahf
jle
or
lret
test
cli
sbb
mov
addr16
jge
mov
mov
jl
push
lahf
fnstcw
out
xor
or
shrl
imul
mov
or
add
imul
mov
adc
cmp
cmc
fiaddl
imul
(bad)
mov
or
cld
cmpsl
mov
(bad)
adc
dec
cld
push
ja
ret
aas
jg
dec
add
xchg
fwait
in
je
inc
in
ret
imul
aaa
arpl
mov
sbb
and
popf
das
bound
leave
nop
xchg
or
pop
sbb
(bad)
mov
mov
cmc
nop
jne
pusha
mov
xor
push
dec
xchg
jge
lods
jns
aaa
mov
push
int1
sub
cmpsb
je
jp
xchg
xchg
push
inc
sbb
stc
xor
andl
cmp
xchg
mov
bt
outsl
add
pop
or
fwait
enter
sarl
loope
jge
add
aad
scas
in
jnp
mov
test
fistl
int1
sub
inc
xchg
push
pop
shrl
aaa
lret
mov
sti
int
add
nop
ret
int3
xor
in
xchg
mov
mov
jo
push
mov
loop
mov
sub
push
mov
mov
sbb
xor
arpl
and
andb
xor
bound
push
push
xor
pop
rcrb
push
mov
das
sub
mov
xchg
push
jae
out
xor
aad
and
adc
ret
pop
loope
(bad)
lcall
orb
fs
xor
lret
daa
test
xor
sarb
pushf
jmp
loopne
int
jb
(bad)
push
cmpsb
pushf
addr16
jmp
leave
in
lea
fnstsw
lcall
push
xor
pusha
test
xorl
jo
pop
mov
cmp
xchg
adc
ss
pop
push
leave
xchg
ret
or
jae
inc
pop
rcll
and
xchg
pop
stc
mov
sti
ficoml
mov
stos
add
sbb
mov
xchg
mov
pop
out
scas
push
sbb
ja
int
js
test
jg
xchg
scas
lods
std
insl
shufps
(bad)
and
jbe
push
aad
mov
out
loope
imul
rcrb
sub
cmpsl
mov
mov
inc
mov
in
enter
jb
push
int1
jb
cli
jp
loopne
clc
inc
mov
push
int1
pop
mov
stc
rolb
jns
sub
cmp
movsl
inc
mov
fistpl
andb
cmpsb
iret
movsb
mov
add
daa
mov
xor
adc
adcb
xchg
xlat
int3
dec
and
arpl
sbb
fcmovb
jbe
loop
call
cltd
subb
xchg
mov
ds
pop
push
sbbb
mov
jo
es
bound
xor
mov
sbb
cmp
cmp
sti
(bad)
mov
and
adc
ss
leave
test
add
sub
sbb
dec
mov
lea
mov
sbb
les
xchg
mov
lods
mov
inc
cmp
xchg
jl
jl
in
(bad)
loopne
pop
add
jno
xchg
cmc
call
mov
xchg
push
adcb
pop
xchg
jmp
jnp
orl
or
jle
jno
lea
jnp
lea
push
lahf
ss
and
imul
fwait
pop
mov
outsl
addr16
scas
pop
orl
repnz
cli
or
cmc
inc
addr16
xchg
mov
shrb
(bad)
scas
(bad)
add
ja
push
fdivl
jl
mov
rcrb
and
je
in
outsl
and
fisttpl
scas
fisubrl
aad
mov
cmc
jo
xchg
(bad)
aaa
mov
jo
sub
insb
pop
mov
sbb
jnp
jl
dec
cwtl
adc
push
cmp
inc
aaa
cmpl
outsb
pop
mov
lea
or
cli
rcrl
xlat
cmp
cmp
and
jae
shl
sub
sbb
mov
nop
iret
aas
pop
pop
xor
push
push
insb
cmc
inc
cmp
loop
jbe
pop
out
mov
push
and
mov
push
push
sarb
mov
adc
or
daa
rcrl
int
mov
rolb
pop
scas
add
lock
dec
inc
pop
pop
mov
mov
in
imul
daa
rorl
xchg
aas
das
inc
repnz
lods
popf
xor
cmpsb
je
jb
jle
cli
cwtl
xor
xor
je
iret
lret
cmpsl
mov
mov
enter
xchg
adc
jae
xor
push
in
(bad)
jg
mov
jo
ret
pushf
mov
aam
cltd
lods
sbbb
pop
push
jne
add
int
js
aaa
lea
mov
out
jns
cmpsb
mov
jne
xchg
(bad)
and
and
push
