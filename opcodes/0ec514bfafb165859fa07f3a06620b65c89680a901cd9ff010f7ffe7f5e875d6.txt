mov
std
notl
(bad)
jo
les
das
shrb
and
hlt
dec
stos
loopne
mov
mov
mov
std
call
xchg
mov
repz
xor
mov
ljmp
push
or
mov
lea
(bad)
ss
inc
aam
test
cs
xchg
sbb
das
push
insl
jecxz
xor
pop
fstpl
pop
or
cltd
pop
in
pop
fisttps
stc
mov
daa
outsb
movsl
mov
push
lds
scas
std
xchg
cwtl
in
sub
mov
dec
sbb
test
nop
xchg
(bad)
addr16
mov
xlat
mov
and
xor
add
dec
rcr
cld
mov
hlt
ret
mov
cmp
inc
dec
sti
or
dec
and
or
sbb
in
inc
cmp
and
loop
lcall
aam
sti
mov
jo
xchg
pop
stc
xorl
add
sub
stos
imul
insl
mov
stos
mov
jbe
jne
pop
out
cmp
mov
fcompl
in
popf
mov
jb
xor
insb
xlat
jo
outsb
into
es
fstpt
sbb
ror
inc
dec
jne
xor
dec
aam
in
adc
loopne
fdiv
cmc
push
popa
pop
sub
fstpt
arpl
fsubr
in
insb
aaa
cmpsb
aam
aad
pop
lods
jo
mov
shrl
jge
loope
xor
popf
rcrl
frstor
in
or
xor
out
push
push
cmc
sbb
inc
xchg
cld
outsl
pop
mov
idivl
mov
fdiv
insl
mov
lret
add
mov
xor
test
xor
out
iret
adc
dec
lods
push
repz
rcrl
push
pushf
repnz
out
push
daa
sbb
mov
push
pushf
jecxz
pushf
stos
push
cwtl
add
jecxz
or
and
inc
xlat
in
fcompl
xor
adc
adc
jbe
scas
lret
lret
frstor
hlt
xor
or
push
imul
mov
ss
ja
imul
lds
ror
loopne
cli
push
fiaddl
and
mov
pop
lods
xor
aad
test
bound
daa
fldt
dec
add
adc
std
fwait
outsl
lds
add
stos
shrl
cmp
push
lods
shll
add
mov
pop
mov
inc
(bad)
in
rep
dec
js
xor
push
jbe
fs
or
sbb
out
fdiv
xor
push
push
fnsave
mov
and
dec
lock
insb
dec
loope
ss
fnsave
gs
jecxz
out
nop
push
or
rorl
fstps
adc
xor
mov
pushf
sbbl
movsl
fiadds
and
ret
sbb
xchg
gs
adc
(bad)
movsb
enter
mov
repz
dec
sub
dec
lods
push
outsl
negb
mov
ljmp
cmp
mov
cmp
add
rcl
(bad)
mov
leave
sub
mov
pusha
fst
xchg
adcl
divb
fisubl
jnp
loop
sub
int1
lods
jp
(bad)
cmp
push
mov
test
bound
dec
out
mov
cmp
mov
clc
push
cmp
pop
xor
inc
in
(bad)
push
popa
mov
jb
int3
xchg
sbb
or
and
lock
mov
sbb
iret
push
das
jo
mov
mov
push
out
sub
out
cli
mov
push
subb
pop
mov
pop
jnp
push
fstl
enter
and
push
adc
in
lcall
dec
sbb
push
adc
pushf
inc
and
or
cmp
aad
pop
sbb
jmp
fimuls
dec
int
std
rol
fucom
xchg
shrb
out
test
fistpll
int1
les
aam
mov
and
add
jge
mov
cmp
lcall
imul
jge
les
pop
jmp
repz
(bad)
int1
and
mov
mov
scas
push
mov
inc
and
movsl
fcoml
mov
ss
jnp
push
mov
movsl
ficoms
loopne
add
jmp
sub
inc
js
cmc
or
faddl
hlt
cmp
loope
(bad)
mov
fsubl
scas
mov
jge
sub
xchg
adc
hlt
xor
bound
cs
mov
xor
es
div
lds
imul
(bad)
out
push
iret
xlat
jecxz
outsl
fistpll
mov
sbb
sbb
pop
testl
call
call
dec
sub
push
scas
je
xchg
jg
cld
rorl
je
sbb
adc
lods
popf
nop
and
(bad)
popa
xor
adc
sub
xor
xor
nop
sub
shld
xchg
loopne
push
int1
xor
mov
sub
xchg
lea
(bad)
xor
pop
inc
sbb
test
loope
roll
rcrb
incl
push
cwtl
sti
ja
stos
iret
adc
cli
gs
inc
outsb
jne
add
cmp
(bad)
sahf
xchg
jae
pop
insb
or
lea
cmpsl
mov
enter
lock
movsl
push
test
sub
sbb
stos
daa
outsl
sub
or
popa
sbb
test
jne
movsl
and
sub
mov
clc
aam
jecxz
test
test
xor
push
(bad)
lgs
mov
pop
in
repnz
pop
bswap
mov
mov
push
jecxz
dec
lret
mov
popa
sub
jecxz
xchg
inc
mov
cmpsb
ret
jbe
std
test
push
xor
sbb
jae
test
mov
in
mov
dec
jns
insb
imul
in
push
fistps
push
dec
aas
xor
sbb
jge
aad
shl
mov
inc
jle
(bad)
sahf
sahf
add
jle
addb
fisttps
push
scas
int3
push
out
je
push
fdivrl
call
xchg
or
pop
push
mov
(bad)
repnz
sbb
mov
mov
(bad)
hlt
packssdw
sub
movsb
in
ret
aaa
mov
sub
je
fadds
jg
data16
das
mov
pop
lret
xchg
cmp
push
cltd
movhps
sub
pop
pop
aaa
xchg
ds
repnz
rcrl
in
or
push
fdivs
mov
adc
cli
into
out
popf
stos
xor
fwait
and
or
mov
and
push
xchg
mov
loop
imul
xchg
cmpl
xor
xor
xchg
add
daa
jecxz
xchg
lea
jge
(bad)
stos
mov
ss
aad
loop
call
sub
mov
cmpsb
cmc
aas
mov
sbb
mov
pmullw
push
dec
mov
in
mov
scas
or
adc
push
stos
xor
aam
inc
mov
push
out
daa
iret
leave
dec
clc
pop
lret
fldcw
add
(bad)
push
xchg
adc
enter
shrb
repz
adc
aaa
outsl
dec
ret
lea
test
(bad)
fs
push
jl
insl
jp
aad
cli
call
jle
sub
mov
adc
push
sti
or
push
out
insb
add
xchg
pop
sub
addb
xor
(bad)
faddl
mov
(bad)
jae
push
adc
mov
and
movsl
xchg
int
jle
je
(bad)
loope
sub
(bad)
daa
loope
aas
mov
add
js
(bad)
inc
lea
add
adc
jl
push
imul
sub
pop
pop
xlat
repz
shrl
scas
fimull
andl
mov
fsubs
jmp
lock
adc
push
or
push
push
scas
lods
sbb
rorb
cmp
imul
sub
sbb
dec
lcall
fistps
cmc
imulb
add
mov
jmp
pop
xor
lock
or
mov
push
cmp
or
adc
xchg
addr16
mov
push
cmp
out
les
lods
xchg
mov
shlb
imul
push
mov
(bad)
shlb
iret
addb
adc
sub
in
out
push
rcl
inc
push
in
pop
int1
iret
mov
fistps
loop
xchg
out
fwait
cmp
jo
pop
clc
fwait
xchg
dec
mov
sbb
add
arpl
or
cmpsb
adc
out
gs
adc
insb
jl
fcoml
pop
call
cmp
fs
sub
mov
sbb
mov
mov
xor
ljmp
jo
xchg
and
jecxz
add
mov
lock
ss
sarl
cmpsl
sbb
and
aam
mov
add
