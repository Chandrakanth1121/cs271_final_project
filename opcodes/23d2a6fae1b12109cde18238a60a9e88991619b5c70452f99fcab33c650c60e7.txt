pushf
int1
test
pop
xor
and
cmp
adc
(bad)
lea
stos
push
call
add
and
out
mov
loopne
mov
ss
sete
and
enter
(bad)
jb
(bad)
jns
int
and
and
adc
pop
add
push
outsb
sti
scas
out
push
add
test
pushf
fnsave
(bad)
(bad)
mov
fistl
imul
repz
movsl
pop
jge
rex.wx
cmc
out
adc
mov
rex.rx
enter
out
(bad)
movabs
mov
pop
cmpl
xor
mov
cli
or
xor
lods
xlat
(bad)
fidivrl
(bad)
and
cmc
fsubs
xchg
rex.rb
pop
jb
adc
je
mov
fldt
add
(bad)
scas
insl
pop
or
sub
lock
(bad)
mov
leave
ret
push
stc
adc
pop
(bad)
sbb
and
mov
(bad)
fsubrs
and
xchg
cmp
(bad)
push
es
mov
vsubpd
in
cmc
movsxd
push
rex.xb
cmc
sub
(bad)
(bad)
(bad)
out
pop
loop
jl
(bad)
outsl
jg
(bad)
lods
stc
adc
xchg
cmp
cmp
mov
cld
cwtl
cmp
nop
xor
imul
stc
xor
ss
and
cmp
movsxd
adc
stos
cmp
roll
rex.wxb
gs
(bad)
repz
data16
rex.wrxb
jne
mov
ja
mov
pop
sbb
insb
jns
xchg
(bad)
rex.xb
lods
push
sub
movabs
loope
jg
lahf
rex.rb
pop
cmp
(bad)
jae
sub
(bad)
(bad)
and
clc
rorb
and
xchg
push
fistpll
popf
lods
repz
mov
insl
(bad)
fcmove
sbb
fiaddl
push
inc
nop
insl
push
mov
pop
ret
mov
fisttps
push
push
enter
movabs
es
adc
adc
lods
jo
or
rcl
mov
rex.wr
xchg
and
(bad)
xlat
fsubs
pop
int
ret
ret
fs
{rex2
(bad)
pop
mov
and
(bad)
cltd
mov
fiaddl
fiadds
rex.wrb
sbb
ret
xor
mov
stos
push
xor
shlb
pop
jrcxz
stc
adc
outsb
xchg
mov
mov
fists
(bad)
and
mov
and
mov
(bad)
in
jno
or
push
(bad)
out
rex
ja
push
jmp
lods
subb
add
cmp
out
movabs
cmp
rolb
fldt
xchg
(bad)
scas
and
shrl
add
push
xchg
out
enter
mov
sbb
gs
jb
add
(bad)
enter
jo
rex.rx
fnstsw
(bad)
(bad)
hlt
pushf
sarb
mov
mov
cmp
movabs
stos
fneni(8087
jg
xchg
cmpsb
lret
test
rcl
cmp
decb
jne
mov
loop
push
sbb
imul
mov
(bad)
clc
(bad)
pop
sbb
mov
fdivr
lods
adc
mov
lret
add
setp
jae
rex.w
fs
imul
fcmovb
leave
and
push
pop
addr32
xchg
lret
test
mov
addr32
notl
frstor
(bad)
(bad)
int
sub
sti
pop
movabs
outsb
mov
adc
(bad)
lret
mov
pop
(bad)
cmp
sti
shr
stos
movsb
cmp
outsl
(bad)
rcrb
jne
rclb
jmp
jb,pn
movabs
push
scas
shll
push
cltd
push
out
cmp
and
cwtl
movsl
push
push
insl
(bad)
add
cwtl
push
out
{rex2
cmpsl
(bad)
(bad)
iret
insb
data16
fisubs
or
enter
(bad)
or
or
pop
rex.wrx
out
(bad)
fucom
{rex2
test
cmp
add
movabs
push
fsubl
push
mov
sub
push
adcb
adc
pop
mov
rex.wr
int3
push
and
outsb
int3
cmp
pop
fsubrs
push
xchg
add
jl
sub
in
rcl
pop
jmp
sarl
out
rex.w
pop
or
sahf
loopne
sub
fidivrs
push
and
es
int
xchg
fidivl
push
xchg
adc
(bad)
out
adc
and
(bad)
mov
(bad)
adc
adc
(bad)
lahf
out
push
xchg
imul
rex.rx
(bad)
(bad)
je
jae
xor
movsl
pop
sahf
test
data16
sub
(bad)
outsb
cmc
cltd
loope
rex.wb
or
(bad)
test
mov
gs
and
xor
jbe
rex.wb
jbe
xchg
(bad)
movsxd
sahf
add
mov
out
cmp
lods
stos
cmpsb
in
stc
push
rcrl
repz
adc
cmc
mov
ss
mov
push
{rex2
mov
rex.wxb
outsl
and
add
(bad)
repnz
insl
xlat
clc
loop
stos
xchg
repz
movabs
leave
movsxd
out
xor
mov
addr32
(bad)
pop
cmp
adc
lret
rex.x
push
lahf
sar
ret
xor
(bad)
rcr
sbb
add
lock
(bad)
pop
popf
in
pop
add
jmp
pop
jle
repz
pop
imul
xchg
stos
(bad)
jne
pushf
pop
cmpsb
mov
sub
mov
(bad)
jl
xor
mov
and
lock
pop
push
sub
sbb
out
fwait
call
cld
push
(bad)
xchg
mov
(bad)
(bad)
sbb
fmuls
call
mov
cmp
mov
test
pop
loope
rex.w
rex.wr
push
shlb
scas
movsl
movabs
(bad)
insl
ret
int
scas
jmp
enter
rex.xb
cld
(bad)
mov
outsb
cld
fidivs
ds
fsubs
push
xor
lods
rex.wrxb
data16
(bad)
push
imul
cltd
pop
repz
or
loopne
(bad)
sbb
data16
repnz
pushf
ret
cs
stc
movabs
rcl
fstpl
test
add
cwtl
jns
lock
sahf
(bad)
sub
adc
loope
movabs
rex.r
insl
ja
out
insb
xchg
xchg
sbb
movabs
rex.r
{rex2
push
mov
popf
(bad)
movsxd
(bad)
iret
xchg
adc
out
pop
jmp
imul
cmpsb
shll
scas
addr32
rex.wb
rex.x
imul
test
pop
rex.wxb
clc
sbb
in
leave
mov
imul
(bad)
cld
out
fwait
rex.wx
rex.wrxb
shll
push
cltd
rex.wrb
jb
(bad)
outsl
lods
jrcxz
rex.rxb
or
ret
fsub
adc
fidivrl
add
mov
in
and
test
(bad)
cmpsb
(bad)
xchg
xor
mov
mov
int3
or
fsubs
(bad)
out
add
out
in
fcom
lods
(bad)
imul
fistpl
int3
push
jmp
mov
or
movsl
sarb
or
fldenv
pop
adc
cltd
(bad)
adc
cli
insl
test
in
pushf
rorb
add
add
testb
jg
out
movsxd
push
and
subl
in
mov
out
xchg
sahf
cs
add
xor
xchg
(bad)
movsl
rex.wb
movb
rex.rxb
sbb
xchg
sub
(bad)
mov
push
stos
(bad)
jnp
jo
jnp
pop
sbb
pop
jo
xlat
stos
rex.rxb
lock
mov
adc
cmp
cmp
rex.b
sub
pinsrw
rep
int3
jg
xor
mov
cltd
xchg
outsl
adc
xchg
in
insb
fisubs
outsl
mov
loope
loopne
xor
gs
insb
popf
jle
adc
(bad)
push
adc
out
movabs
int3
es
xchg
shlb
rorl
adc
lret
iret
push
test
jns
xchg
xchg
insb
jo
mov
xor
pop
(bad)
in
(bad)
sub
sbb
incl
in
sub
push
shrl
push
andl
adc
movabs
lods
{rex2
xor
mov
out
int1
pop
es
enter
ret
hlt
out
(bad)
(bad)
cmp
data16
loopne
rex.wx
jle
xlat
in
(bad)
cmp
xor
push
xchg
push
push
shll
test
sti
mov
sbb
(bad)
xlat
movabs
sbb
iret
add
sub
rex.r
rex.wrx
out
push
add
or
xchg
jno
xchg
shll
push
{rex2
add
insb
push
or
mov
mov
ja
test
and
jge
divl
in
pop
popf
ret
mov
stc
jne
popf
xlat
in
jb
stos
cmp
nop
insb
movabs
jnp
sub
rex.rxb
(bad)
(bad)
(bad)
cmpsl
in
sbb
repnz
