mov
out
orl
jecxz
std
push
call
mov
or
ljmp
jno
pop
enter
repz
movsl
push
daa
loopne
push
out
gs
add
inc
mov
jmp
lcall
ljmp
popf
lret
cld
mov
pop
int
and
jae
pop
int
shlb
inc
mov
mov
pop
push
outsl
cmp
sbb
call
stos
inc
repz
(bad)
and
inc
inc
mov
mov
loopne
in
sbb
dec
mov
imul
sahf
jae
sti
int
cmp
push
add
je
push
and
dec
mov
pop
lods
gs
inc
in
(bad)
jo
jle
xor
enter
in
or
ja
test
push
mov
add
push
pop
test
dec
jmp
xorb
shlb
imul
inc
sbb
faddl
dec
enter
push
dec
(bad)
in
int
imul
call
out
push
push
mov
cmpsb
jmp
xchg
dec
jne
aaa
push
lods
fisttps
mov
sub
cmpsb
xor
das
mov
fnsetpm(287
mov
out
stc
sarl
movsl
stos
mov
iret
jmp
rorb
jle
jmp
loop
lcall
and
sub
dec
adc
jp
imul
pop
fcmovnu
sub
pop
add
jnp
outsl
movsb
fdivs
push
jecxz
std
mov
jmp
inc
sub
test
in
loope
andps
mov
dec
add
pop
call
xchg
shrl
mov
sub
test
cmpsb
into
std
rclb
idiv
push
inc
es
fdecstp
(bad)
inc
xor
mov
and
fcmovb
aaa
add
sti
add
enter
aaa
or
dec
adc
sbb
stc
in
ret
movsb
and
sar
pop
or
in
mov
dec
int3
fcmovne
inc
movsl
aaa
scas
test
sti
into
stos
test
shl
in
push
movsb
bound
pop
test
std
cmpsb
jne
push
lock
rorl
enter
mov
adc
add
out
and
scas
mov
sti
jg
pop
mov
loopne
jle
push
out
ljmp
in
inc
iret
adc
mov
fildll
test
outsl
cmp
repz
pop
call
pop
dec
fisubs
cmp
pop
fs
and
clc
lock
mov
xor
mov
std
sbb
inc
add
xor
dec
iret
cmp
mov
rclb
jmp
xchg
je
test
push
clc
or
decb
je
cwtl
int1
xor
xor
lahf
aad
inc
call
aad
xchg
pop
push
out
jmp
js
je
mov
add
js
jno
sub
into
lea
mov
adc
pop
jnp
mov
mov
adc
dec
ds
push
pusha
cwtl
(bad)
addr16
loopne
sti
fistps
mov
sbbb
stos
fcmovbe
shr
mov
out
pusha
pop
pop
push
movlps
jg
incl
popf
mov
sbb
pop
pusha
test
xchg
push
pushf
pop
pop
jl
imul
xchg
or
stos
dec
and
popa
pop
dec
or
jne
mov
dec
movsb
mov
adc
loope
lds
xchg
xchg
adc
stos
ret
sub
sub
or
jbe
push
pop
mov
ljmp
cmpb
xor
loope
or
fsubl
cmp
add
std
sbb
rcrb
movsl
loop
rorl
xor
insl
xor
dec
dec
mov
test
loop
stc
xor
dec
mov
pusha
out
test
pusha
adc
sub
mov
adc
mov
mov
les
pop
movl
rorl
fistl
insb
lods
mov
nop
scas
into
leave
mov
pop
mov
mov
lcall
dec
add
mov
ficoml
cmp
mov
(bad)
mov
jae
int
adc
stc
cmp
cmp
call
mov
cli
mov
aas
repz
pop
in
cltd
jmp
in
daa
rorb
mov
fcom
stc
daa
push
dec
pop
xchg
pop
mov
cmp
stos
add
fldt
mov
push
loop
and
dec
mov
cli
pop
cmpl
jns
jo
jecxz
add
pusha
mov
jb
add
lods
push
stos
popf
inc
(bad)
and
adc
imul
movsl
enter
fiadds
stos
loope
iret
jnp
inc
xor
or
(bad)
jecxz
stc
xchg
pop
rclb
cmpsb
int1
sub
jne
xchg
es
adc
repz
sbb
js
fdivs
mov
(bad)
shll
fisttpl
insl
movsb
stc
mov
jl
fcomip
insl
dec
add
pop
cld
bnd
mov
sub
push
pop
loopne
xchg
rcl
inc
jmp
fwait
jo
aad
or
pop
test
and
test
pop
(bad)
dec
cmp
mov
scas
aas
loope
xchg
inc
mov
das
scas
jp
stos
push
jge
mov
call
add
sbb
(bad)
sbb
es
push
ret
das
les
cmp
andl
push
add
int3
popf
mov
int
mov
sbb
xor
jne
je
loope
push
ret
leave
jbe
shrl
dec
jecxz
mov
or
push
mov
push
or
(bad)
hlt
cmpb
lcall
sub
sub
adc
adc
add
out
bnd
push
lret
xlat
shr
cltd
movsb
dec
sbb
mov
int
mov
(bad)
imul
xchg
testl
sbb
lret
and
lods
jmp
cmp
imull
fadds
repz
sub
arpl
adc
filds
mov
push
adc
mov
sbb
inc
sbb
lds
inc
idivl
mov
mov
rcrb
xchg
repz
aas
or
(bad)
xor
sub
ret
stos
push
inc
add
pop
fsubl
jns
mov
cli
test
lahf
dec
pop
pusha
test
mov
cmp
inc
pop
test
lcall
and
and
daa
lds
popa
aas
mov
test
xchg
call
addr16
test
mov
mov
outsb
mov
in
lret
in
ror
repz
popf
push
(bad)
pop
add
fimull
add
out
lret
divl
cmpsb
pop
in
push
dec
pushf
(bad)
imulb
clc
add
mov
in
sub
and
xchg
movsb
in
dec
int3
mov
aas
mov
sarb
lea
outsl
mov
nop
idivl
insl
js
and
pop
or
mov
leave
nop
iret
popa
pop
in
cwtl
pop
jp
xchg
xor
push
inc
es
lods
rol
or
sub
cltd
ret
movsl
ljmp
stc
pop
push
sbb
int3
out
(bad)
mov
test
ret
popa
inc
sub
jns
xchg
out
mov
sahf
adc
xor
mov
fs
inc
sub
add
out
popf
inc
int3
call
sti
jae
call
test
mov
adc
xchg
sub
mov
cli
gs
scas
inc
movsl
movsl
sti
popa
lcall
and
in
clc
inc
adc
push
(bad)
lock
fldt
jle
lods
fidivrl
inc
aaa
jo
sub
fnstcw
xchg
add
mov
jmp
mov
cmp
inc
and
add
std
out
(bad)
int1
lods
fdivrl
out
push
add
andb
idivl
cld
mov
mov
hlt
dec
pop
mov
rorl
xchg
cmpsb
dec
xor
push
push
je
xor
data16
jmp
into
fstpl
mov
enter
mov
jg
cmc
push
add
jns
mov
xor
cmp
into
mov
mov
pushf
repz
shrb
ja
dec
je
mov
and
leave
call
cmpsl
into
mov
dec
sub
mov
inc
lret
aad
cwtl
inc
cmp
inc
mov
ret
fnsave
pop
pop
int3
jmp
aas
iret
dec
mov
adc
jae
push
add
jo
enter
jg
mull
adc
dec
mov
xor
cmc
repz
fs
(bad)
loop
and
std
outsl
aas
insb
and
lods
incl
shl
or
ja
push
mov
clc
add
dec
push
mov
pop
test
or
repz
adc
push
gs
and
test
cmc
push
in
