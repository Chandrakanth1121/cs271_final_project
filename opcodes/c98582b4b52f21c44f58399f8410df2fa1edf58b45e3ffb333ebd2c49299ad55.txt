jne
sarw
imul
cli
pop
add
enter
fstpt
int3
fcomi
test
nop
mov
xor
call
movabs
call
fs
xor
adc
mov
mov
jp
test
iret
mov
in
es
pop
rex.xb
(bad)
pop
jge
(bad)
in
xor
fildll
mov
and
es
jmp
xchg
hlt
lea
out
rex.wb
add
jmp
(bad)
je
rex.rxb
jae
jo
mov
rex.rb
jmp
scas
lea
cli
rex.wxb
rex.b
outsl
outsl
data16
sub
pop
jmp
or
pop
ret
pop
jmp
and
mov
sbb
pop
jmp
test
(bad)
adc
pop
jmp
jae
add
cmpsl
and
jmp
(bad)
sub
jmp
mov
int
movabs
(bad)
es
mov
add
fcoms
xchg
jb
js
sub
and
es
adc
rex.r
jrcxz,pn
sub
iret
(bad)
add
(bad)
lahf
sbb
stos
xor
ret
xchg
{rex2
insb
mov
jb
add
js
pop
mov
scas
jmp
fwait
in
shll
mov
jmp
jp
(bad)
mov
sub
mov
jmp
adc
mov
push
inc
jmp
rex.xb
leave
jmp
data16
lods
jg
sub
pop
jmp
jne
push
and
push
(bad)
xchg
test
(bad)
jmp
cmp
rex.b
(bad)
mov
cmp
mov
jmp
(bad)
(bad)
(bad)
(bad)
xchg
std
(bad)
mov
jmp
rex.wrx
repz
(bad)
cmpsl
xor
jmp
xchg
jmp
jne
ds
jrcxz
pop
jmp
push
jmp
rex.rx
rclb
xor
jmp
(bad)
jns
test
mov
xor
add
cltd
xchg
enter
xlat
iret
sbb
repnz
or
cmpl
sub
pop
mov
and
repnz
sarl
or
imull
fsubrs
xchg
rex.wrb
push
rex.wrxb
xchg
or
mov
jns
jmp
(bad)
rex.xb
rorl
movsl
rex.wx
rex.rxb
pop
shlb
mov
jne
(bad)
sub
adc
imul
mov
(bad)
cmc
jmp
shll
jle
jmp
add
jmp
test
mov
mov
add
(bad)
mov
mov
jmp
or
(bad)
mov
clc
jmp
out
jae
fldcw
mov
jmp
mov
cmp
jmp
jns
sub
(bad)
cmp
mov
jmp
cmp
rex.wx
mov
jmp
je
rclb
fdivs
push
jmp
nop
push
repnz
push
jmp
mov
push
xchg
pop
pop
and
decb
in
adc
lods
mov
cmp
(bad)
in
repz
jmp
loopne
and
lock
mov
jmp
shlb
mulb
xchg
(bad)
xor
jmp
imul
insl
(bad)
add
(bad)
cld
rex.wrx
jmp
imul
fs
sbb
mov
(bad)
(bad)
(bad)
ljmp
jmp
mov
movabs
add
jmp
add
cmpl
(bad)
(bad)
lcall
or
mov
jmp
cmp
rex.wrxb
rex.x
add
add
ret
xor
jmp
or
lea
jmp
add
stos
orl
data16
ret
and
outsl
xlat
rex.wrx
jp,pt
push
jmp
repz
(bad)
xor
sub
sub
outsb
sbb
sti
leave
movabs
mov
{rex2
std
(bad)
(bad)
(bad)
movsxd
stos
xor
xor
sti
loop
popp
push
xor
fstpl
sub
push
out
xor
pushf
add
movabs
mov
rex.wr
fisubl
cmp
rex.wrx
adc
cmp
popf
outsb
sub
repz
je
jg
rex.wr
sub
jl
xchg
(bad)
scas
jb
leave
adc
mov
fwait
(bad)
push
ja
jne
or
loopne
(bad)
jp
(bad)
(bad)
jg
cmc
rex.wrxb
(bad)
push
fwait
hlt
mov
cltd
test
fistpll
xor
rex.r
sub
loope
xchg
sbbl
(bad)
fcomi
adc
jmp
xchg
pop
test
ret
sbb
pop
rcl
xor
lods
addr32
adc
and
rcr
or
(bad)
iret
mov
cmp
sub
test
pop
(bad)
mov
test
mov
pop
or
add
push
hlt
and
add
loope
rex
jrcxz
sbb
xor
rex.xb
xchg
rcr
movsb
sbb
push
cmp
mov
rex.wx
jrcxz
loopne
scas
std
out
and
movabs
rcll
outsb
repnz
rex.wrb
(bad)
cmp
enter
xchg
int1
pop
or
rex.x
mov
shrl
sbb
(bad)
out
cmp
repnz
cmp
jl
mov
mov
(bad)
sbb
popf
mov
insb
(bad)
xchg
or
movsl
int3
and
movsxd
or
outsb
inc
(bad)
mov
rorl
es
lret
adcb
ja
xabort
testl
out
xor
mov
lods
(bad)
xlat
movabs
xchg
movabs
cmp
enter
jmp
or
(bad)
(bad)
std
and
movabs
cs
pop
insb
sub
js
jno
out
mov
mov
stc
jmp
xor
or
rex.wrx
and
sbb
adc
movsl
mov
rex.wrxb
jg
push
mov
ds
sahf
push
test
movabs
xchg
movabs
xchg
adc
stos
mov
(bad)
subl
js
lea
loope
push
stos
movsxd
movabs
imul
(bad)
cli
jbe
and
xor
jl
xchg
pushf
js
sub
movsxd
cmp
xchg
xor
jbe
adc
sbb
movabs
movabs
out
data16
adc
(bad)
and
xor
ss
in
adc
ds
scas
xor
sahf
push
jb
popf
adc
lods
or
stos
mov
rex.b
movsxd
sbb
xor
rex.x
repnz
sbb
sub
movabs
(bad)
push
jl
pop
rorl
and
fcoml
gs
xchg
mov
insb
jb
or
(bad)
popf
jl
pop
rorl
and
(bad)
jnp
js
(bad)
jnp,pn
cmc
test
or
add
(bad)
fwait
and
mov
pop
ret
clc
sub
lret
add
data16
(bad)
ss
(bad)
mov
or
rex.w
shlb
nop
jg
xchg
lea
testl
and
lea
pushf
pop
sahf
lea
push
in
mov
movsxd
rex.wrx
xchg
jb
lea
neg
add
rex.wx
pop
(bad)
rex.wrx
repz
push
mov
movabs
mov
sbb
sahf
mov
sbb
outsb
(bad)
sbb
and
cmp
pop
push
and
(bad)
sbb
test
gs
xor
sub
sbb
rex.wb
in
sahf
pop
mov
cmp
jbe
xchg
or
in
mov
lock
and
loope
mov
mov
sbb
(bad)
cmpsl
jno
jnp
mov
(bad)
jge
xor
jbe
insl
mov
xor
pop
ss
sub
mov
movabs
lock
iret
rex.w
jp,pn
jae
(bad)
(bad)
adc
xchg
cmpsb
jg
add
enter
pushf
push
(bad)
rex.wr
mov
(bad)
test
pop
or
data16
mov
(bad)
push
std
ret
sub
mov
or
std
adc
outsb
or
rcl
shl
jle
push
(bad)
pop
xchg
scas
jp
je
rex.wb
pop
pop
(bad)
pop
(bad)
cld
(bad)
iret
(bad)
and
(bad)
out
jl
(bad)
js
pop
xchg
imul
lret
jnp
{rex2
push
push
mov
xor
loop
movsb
or
mov
rex.r
je
imulb
rex.rb
pavgb
(bad)
sarb
std
xor
and
movsxd
addr32
adc
jrcxz
pushf
add
repnz
mov
mov
mov
movsxd
mov
pop
(bad)
rcll
sti
or
xlat
xchg
(bad)
sub
rex.wxb
imul
movabs
mov
mov
sti
cmp
lahf
push
rcll
{rex2
ja
pop
test
or
movabs
clc
loope
mov
lods
sti
(bad)
movabs
add
js
pushf
out
lret
rex.r
{rex2
sbb
cmpsb
cmp
xor
(bad)
jmp
ds
mov
xchg
testl
mov
add
(bad)
popf
jns
(bad)
mov
(bad)
xor
ds
xchg
idivl
sbb
movabs
hlt
adc
test
scas
xchg
cmp
movsl
(bad)
jnp
add
(bad)
hlt
cmp
scas
add
adc
jl
pop
cmp
xchg
cmp
rcrb
(bad)
jle
mov
xchg
pop
(bad)
int3
enter
pop
pop
in
idivl
rex.wr
add
movabs
ss
lea
