push
mov
lea
add
fnstcw
cmpl
jmp
insl
insl
xchg
mov
(bad)
leave
xchg
pop
rex.wx
mov
(bad)
mov
cmp
mov
cmp
rex.wr
or
push
or
loop
add
xchg
rex.w
and
mov
rex.wx
sahf
scas
in
je
mov
and
and
jbe
cmpsl
mov
hlt
sbb
nop
sbb
push
jb
rex.r
xor
mov
pop
xor
xchg
xchg
cmp
sbb
adc
and
repnz
and
imul
(bad)
mov
and
mov
ss
adc
andl
stos
jns
or
push
xor
add
out
adcl
jg
pop
mov
pop
mov
pop
mov
pop
mov
pop
mov
mov
add
cltd
movabs
xor
(bad)
rex.wxb
ljmp
movsxd
rex.wxb
out
iret
imul
lcall
(bad)
jge
xchg
(bad)
rex.wxb
(bad)
mov
rex.wxb
lods
lea
fxch
cltd
movabs
adc
out
cs
rex.rb
cmpsl
xlat
or
mov
shll
mov
push
imull
movsl
add
mov
mov
xchg
{rex2
lods
nopl
insl
lods
out
out
add
(bad)
stos
std
add
mov
lods
(bad)
jmp
(bad)
xor
shrl
mov
push
rex.r
jae
or
mov
xchg
fcoml
fcoml
fcoml
fcoml
test
ss
leave
rex.wb
stos
fstp
mov
mov
rex.rb
lret
push
(bad)
or
sub
mov
xchg
push
jmp
push
stc
xchg
and
xchg
push
and
(bad)
rex.x
(bad)
rex.wr
cmp
iret
jae
or
cmpsb
mov
fucomi
in
sbb
sbb
sbb
(bad)
cs
fcomp
movabs
rex.wb
sub
(bad)
insl
push
jno
nop
mov
sbb
je
nop
cltd
rex
rex
rex.wrxb
rex.x
cmp
add
and
stos
test
jb
rex.x
repz
(bad)
sbb
int
movabs
rex.wx
sti
push
push
rex.wr
xor
mov
xchg
jrcxz
push
out
cmc
loope
pushf
mov
in
in
int1
mov
mov
in
loope
(bad)
movabs
lea
lretw
rex.r
movabs
cmp
jrcxz
(bad)
gs
add
(bad)
or
scas
(bad)
movabs
in
sti
cmp
push
sub
stos
mov
pop
mov
ret
scas
xchg
stos
data16
and
in
pop
in
jnp
rolb
and
negl
mov
rex.wx
jle
test
xor
gs
sub
mov
(bad)
mov
mov
pop
mov
loope
movsb
(bad)
mov
(bad)
rorb
adc
sub
movabs
adc
mov
fldl
fisttpll
fistps
pop
mov
(bad)
pushf
rex.wrb
mov
pop
mov
rolb
pop
cltd
(bad)
rex.wrb
clc
rex.wxb
mov
hlt
and
rex.rx
adc
popf
mov
push
sub
mov
mov
or
ds
and
mov
movsxd
je
(bad)
or
or
test
or
(bad)
(bad)
in
rex.wx
rcr
test
jb
out
stos
incl
loope
rex.wx
(bad)
rex.rxb
out
hlt
jbe
pop
xchg
xchg
ret
gs
mov
mov
cmp
and
xchg
mov
in
loope
rex.wx
mov
movabs
rex.wx
je
out
pop
mov
movabs
or
rex.b
lock
mov
(bad)
adc
in
xor
mov
loopne
push
jns
loope
leave
mov
(bad)
rex.b
lret
mov
nop
adc
(bad)
test
jno
(bad)
notl
loope
rex.wx
xor
sbb
and
mov
ss
rex.xb
and
sbb
fists
xor
(bad)
mov
loope
clc
enter
push
gs
movsl
add
data16
rex.wx
ror
xchg
repz
imul
jo
xor
(bad)
frndint
jl
push
test
push
(bad)
in
cmp
(bad)
fwait
movabs
adc
imul
(bad)
mov
rex.wr
fcmove
rcr
rex.wb
mov
(bad)
(bad)
mov
rex.wr
sbb
jne
ja
int
shll
(bad)
insl
mov
stos
lock
(bad)
(bad)
js
mov
sti
nop
mov
or
xor
(bad)
xchg
jmp
lock
movsl
sub
rex.wx
mov
filds
fsubl
(bad)
cmpsb
movabs
lcall
xlat
(bad)
add
xor
ds
(bad)
add
sub
rex.w
add
and
out
sti
xchg
push
(bad)
mov
sti
xchg
push
std
jno
sti
xchg
push
or
out
xor
push
rex.xb
(bad)
or
mov
xchg
rex.xb
stc
es
(bad)
sbb
es
xchg
es
out
add
jge
push
adc
jge
lea
pop
ret
mov
push
(bad)
lret
jne
rex.r
jg
xchg
xchg
cwtl
rex.rxb
or
add
enter
push
mov
jg
mov
fistps
push
ret
jle
add
fstl
sub
iret
movabs
mov
(bad)
sahf
punpcklwd
movabs
adc
mov
xor
xchg
cmp
jrcxz
loope
fsubl
adc
fistps
xchg
pop
(bad)
xchg
sbbl
pop
emms
and
loopne
orb
add
adc
pop
(bad)
xchg
mov
hlt
sti
in
imul
lret
loopne
xor
mov
mov
xor
jmp
and
loopne
push
sbb
pop
xor
(bad)
(bad)
ss
loopne
add
jp
jg
mov
and
lods
movsxd
pop
mov
(bad)
add
(bad)
in
roll
fsts
sbb
and
loopne
sub
lock
leave
movsl
out
(bad)
fistps
push
movsl
test
rex.wrx
lock
xchg
and
mov
cmp
repz
or
movsl
or
out
(bad)
lock
repz
adc
mov
stc
jle
mov
addb
add
push
and
or
sub
sbb
xor
add
clc
push
pop
xor
cmp
sub
lods
call
fistps
push
fidivl
stos
rex.xb
and
fcmovnbe
movsxd
out
and
cmp
shll
int1
rolb
mov
fsubs
shr
mov
xchg
(bad)
xchg
sbbl
(bad)
sub
scas
in
or
out
(bad)
mov
rex.wx
rex.rxb
(bad)
(bad)
cmp
(bad)
mov
pop
nop
js
popf
fisubrl
movsb
(bad)
(bad)
shrb
mov
mov
movabs
sbb
lods
(bad)
pop
insb
mov
or
adc
mov
mov
add
(bad)
pushf
cmp
jg
sub
mov
sbb
adcb
imul
jne
in
add
out
pop
(bad)
pop
(bad)
pop
mov
mov
in
{rex2
mov
rorb
(bad)
divb
push
pop
(bad)
(bad)
lods
rcrl
add
(bad)
imul
fwait
(bad)
jns
in
movsb
(bad)
cmp
movsxd
rex.b
adc
jrcxz
xor
sub
or
in
fstps
fnsave
int3
(bad)
rex.wx
and
xchg
and
sub
out
jmp
(bad)
mov
je
addr32
jb
outsl
test
sub
ficomps
imul
rex.x
add
mov
add
mov
mov
add
and
(bad)
sbb
(bad)
sub
pop
jrcxz
pop
rex.rxb
add
addr32
adc
xchg
lret
mov
cmp
movsl
and
(bad)
rex.wrb
js
in
movabs
push
push
out
mov
mov
rex.wx
add
mov
push
out
mov
jno
push
and
(bad)
pop
in
mov
mov
movabs
cmp
or
sbb
(bad)
sbb
mov
mov
(bad)
or
xlat
lods
xchg
es
sbb
push
xchg
sbb
shr
lret
jno
fstl
pop
imul
insl
int
pop
xor
mov
jns
nop
mov
cmp
mov
clc
out
scas
fcmovne
pushf
std
xchg
int3
sbb
(bad)
rex.rx
rex.x
adc
adc
rorl
adc
xor
rex.wrx
subl
push
pop
stos
movl
lods
scas
mov
in
jle
mov
jnp
enter
xor
(bad)
sar
rorl
negb
add
add
xchg
cltd
add
(bad)
outsb
cmc
idivl
pushf
xchg
adc
lods
std
(bad)
nop
or
rex.wrx
mov
imulb
mov
jb
movsb
je
(bad)
outsb
cmc
testl
pop
(bad)
fdivl
cmp
movabs
int1
xchg
(bad)
fiaddl
adc
outsb
cmc
negl
(bad)
push
mov
(bad)
