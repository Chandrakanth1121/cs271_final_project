jo
push
add
add
add
add
add
add
add
xchg
add
add
add
add
add
pop
imul
rorb
addr16
sbb
push
mov
and
shlb
and
add
mov
mov
divps
jae
dec
push
adc
mov
in
imul
cmp
cld
pop
les
ret
jecxz
xchg
inc
and
pop
shll
push
adc
xor
addr16
xor
sets
(bad)
insl
xor
jnp
inc
sub
pusha
lret
imul
inc
dec
and
mov
sbb
or
in
imul
loope
xor
(bad)
jecxz
(bad)
out
sti
xor
imul
(bad)
pusha
scas
lret
cmp
mov
jns
adc
mov
inc
xor
push
fs
or
dec
and
mov
jp
jne
xor
xchg
in
xchg
outsb
pushf
fadds
es
addr16
in
imul
call
and
dec
jmp
popf
adc
jp
or
add
adc
(bad)
popa
cmp
rclb
jg
adc
or
push
and
insl
add
cmp
sub
adc
scas
clc
dec
ficompl
mov
std
out
test
or
push
add
inc
pusha
sbb
inc
jg
and
popf
ficomps
sub
sub
sub
cmp
mov
adc
lods
sub
lret
mov
jg
sub
(bad)
fwait
push
cwtl
mov
cmpb
mov
mov
xor
fs
lcall
sub
jmp
lods
cmc
mov
in
mov
mov
xchg
arpl
pop
jb
dec
das
jnp
fstl
pop
cmp
mov
fcoml
cs
aad
dec
outsl
cltd
mov
or
mov
out
pop
aas
add
enter
cwtl
cmp
or
shlb
std
push
and
or
mov
sub
test
aas
jmp
rorb
add
out
imul
sbb
add
mov
mov
push
lea
fdivr
imul
out
ret
ret
imulb
mov
xor
aad
sub
faddl
mov
movsb
pop
(bad)
xor
in
gs
std
movsl
jne
(bad)
pop
jle
shrl
(bad)
cmp
sub
cmp
aam
pop
sbb
cmpsb
fsubrl
mov
jg
mov
(bad)
pop
xchg
movsb
je
sbb
fidivrl
in
(bad)
insl
imull
mov
sub
sbb
fsubrl
or
adc
cli
(bad)
dec
int1
leave
mov
mov
in
movb
xor
and
arpl
aad
jne
out
cmp
inc
mov
adc
int1
mov
fs
nop
adc
add
lahf
fisubrl
popf
dec
ficompl
adc
pop
xchg
push
stc
mov
cmp
pop
push
inc
mov
fsubrl
ds
imul
scas
lods
jl
sub
out
into
mov
mov
mov
rcrb
push
int3
and
dec
jl
sub
leave
mov
jl
mov
and
adc
cwtl
inc
mov
push
fists
imul
(bad)
adc
outsb
loop
test
test
dec
iret
xchg
pop
daa
dec
pop
repnz
adc
mov
inc
sub
cmp
fisttpl
mov
sbb
pop
cmp
adc
stos
push
mull
adc
stos
aad
daa
jecxz
push
lods
xchg
sub
xchg
loop
mov
xor
mov
push
add
data16
popa
ror
mov
mov
mov
push
inc
out
xor
push
sahf
sbb
stos
movsb
dec
shrb
(bad)
ljmp
jo
mov
rol
je
clc
dec
jmp
mov
mov
pop
and
mov
mov
mov
xor
mov
push
dec
cmp
gs
daa
cmp
movsl
int
or
mov
jecxz
data16
sbb
lds
mov
sub
and
decb
dec
out
fdivl
inc
cmpl
mov
cmc
es
push
(bad)
into
lahf
mov
xchg
int3
jp
leave
data16
cmp
(bad)
or
jg
add
test
jb,pt
xchg
bound
jmp
and
xchg
pushf
push
scas
jb
(bad)
jb
arpl
jp
add
test
(bad)
movsb
lea
lock
shrl
pop
cwtl
data16
in
std
push
dec
ja
dec
sub
mov
lea
repz
pop
stos
mov
xchg
xchg
mov
push
jne
fcmovnu
push
cltd
jge
push
xorl
ss
push
xchg
fnstcw
adc
clc
sbb
pop
lahf
rorb
add
imul
mov
mov
and
xchg
pop
daa
cli
xor
aad
pop
in
mov
bound
dec
call
mov
cltd
and
in
or
fimuls
mov
cmp
rolb
insb
sub
push
outsb
cmp
dec
movsb
popf
dec
xor
ret
into
(bad)
daa
enter
scas
jb
ds
xor
rorb
adc
lods
jecxz
inc
mov
jno
jnp
cmp
or
pop
(bad)
mov
inc
xchg
xchg
es
rcll
movsb
std
sbb
add
inc
cltd
dec
jae
mov
mov
cs
mov
hlt
push
cmp
add
insb
test
outsb
cmp
sub
dec
and
(bad)
fdivs
data16
xchg
xchg
cs
mov
dec
imul
dec
test
outsb
mov
dec
insl
ret
xor
pop
xchg
es
int1
inc
push
divb
roll
jge
mov
test
mov
jno
in
in
popf
sarb
mov
lds
fwait
test
pop
pop
mov
lcall
outsb
pop
fisubrl
lcall
enter
adc
jbe
and
xor
iret
in
pop
rcr
push
xchg
xor
rorl
dec
orl
subb
into
mov
shll
(bad)
sti
(bad)
or
test
hlt
imul
jae
jp
pop
add
adc
add
sub
fbld
push
cs
inc
ret
xchg
add
or
rclb
jmp
push
pop
enter
fs
dec
iret
cmp
gs
adc
aad
rcrl
shrl
sub
mov
iret
repz
and
fsts
xor
inc
sbb
ret
and
imul
mov
idivl
sbb
push
daa
scas
test
or
in
adc
add
push
mov
test
imul
mov
mov
xchg
lea
mov
clc
add
mov
and
push
xlat
movsb
mov
mov
dec
repnz
rol
jmp
insb
enter
in
jbe
cltd
scas
mov
mov
mov
insb
int
adc
sub
pop
in
call
push
or
dec
dec
lea
pusha
in
jl
test
popa
and
ds
outsl
and
das
dec
out
jb
mov
inc
out
xor
gs
xchg
xchg
imul
lods
lcall
jmp
adc
adc
fnsave
pop
push
mov
add
imul
ret
and
ljmp
pop
add
out
fnstcw
inc
or
xchg
mov
jecxz
movsl
loope
mov
sti
hlt
xchg
inc
mov
ss
mov
movsl
lods
inc
jl
inc
jmp
scas
cmp
push
movsl
ret
mov
jb
fdivl
push
mov
loop
sarl
arpl
inc
test
jmp
mov
int1
inc
pop
cmp
dec
sub
aam
cwtl
aas
cwtl
lds
adc
ss
jns
aad
ja
mov
add
pop
filds
decb
(bad)
mov
lods
xchg
add
(bad)
ds
popa
or
movsb
push
insl
pop
mov
nop
into
xchg
cmp
(bad)
pop
fstpt
jg
xchg
data16
inc
push
movsl
stc
cld
repz
xor
add
rcll
aas
cmp
test
ret
cmpsl
mov
mul
cmpsl
dec
push
xchg
mov
dec
sbb
enter
test
inc
fdivl
shrl
pop
add
int1
jnp
jne
div
mov
outsl
cli
or
cmp
in
dec
ret
lahf
push
inc
loope
ror
aad
xor
and
add
mov
stos
pop
adc
out
add
notb
pop
cmpb
xchg
inc
xor
or
mov
hlt
das
xor
push
or
push
into
and
daa
mov
add
xchg
or
mov
sub
in
into
mov
cmpl
lcall
repnz
push
xchg
mov
