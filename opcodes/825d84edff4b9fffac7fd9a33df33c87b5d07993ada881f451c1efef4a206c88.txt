xor
xor
add
pop
and
(bad)
(bad)
nop
adc
in
add
and
mov
lea
add
add
ret
data16
sub
mov
xor
fdivrs
leave
movl
sbb
mov
rex.wrb
jne
movslq
add
(bad)
(bad)
jns
push
rex.rb
push
(bad)
mov
mov
test
je
mov
jg
call
xor
xor
and
out
xchg
ret
(bad)
fstpl
add
xor
out
(bad)
cld
cmp
je
xor
xor
sub
nop
mov
mov
pop
movzwl
(bad)
cli
or
add
addl
(bad)
jbe
nop
clc
sbb
test
setne
jmp
adc
mov
or
(bad)
insl
mov
(bad)
mov
rex.r
rex
rex.wrx
lock
mov
jns
xchg
ja
(bad)
(bad)
cmp
(bad)
scas
push
xchg
lea
outsb
lock
add
mov
clc
sub
rex.w
rex.wr
fwait
mov
call
sbb
mov
cmovno
push
push
stos
and
jnp
or
sub
push
in
jmp
add
xor
cld
adc
jo
jmp
outsl
cmp
je
add
(bad)
mov
lods
clc
lock
rex.w
rex.w
test
cmp
(bad)
cmp
rex.wrx
adc
out
clc
imul
(bad)
jg
fcoml
(bad)
test
(bad)
add
fdiv
ret
or
es
call
rex.w
(bad)
or
cmp
pop
adc
(bad)
in
std
sub
call
shl
xor
shrb
sbb
shl
cmp
call
and
ljmp
out
jle
test
jle
or
fisttpl
or
call
jo
mov
int1
call
pop
sbb
adc
js,pn
rcll
(bad)
clc
fbstp
(bad)
out
rex.w
int1
sti
ret
movl
cmpsb
call
sbb
push
add
mov
mov
(bad)
rex.wxb
add
sbb
scas
pop
push
(bad)
or
leave
(bad)
mov
sbb
jmp
shlb
and
pop
pop
pop
sub
loopne
js
scas
xor
stos
(bad)
cmp
outsb
mov
mov
xor
mov
clc
xor
fucomp
push
or
(bad)
cmp
movl
mov
rex
fwait
rolb
jno
jbe
mov
in
push
pop
std
(bad)
cmpsb
mov
movabs
mov
(bad)
jmp
test
repnz
add
jb
pop
ret
add
xchg
add
cmp
call
sbb
xchg
stc
pop
lods
add
or
(bad)
(bad)
(bad)
jle
fistps
in
cmpb
mov
and
rex.rb
loop
mov
sub
mov
notb
mov
data16
out
mov
sbb
push
call
(bad)
(bad)
xor
(bad)
cmp
sub
int
cmp
xchg
mov
or
xchg
rex.xb
stos
or
mov
(bad)
lcall
add
cmc
cmp
mull
(bad)
xor
mov
and
xchg
rex.xb
(bad)
(bad)
ret
and
(bad)
loopne
jns
sbbb
and
fwait
cmc
(bad)
add
(bad)
out
(bad)
loopne
and
(bad)
cld
hlt
loopne
hlt
nop
adc
hlt
rex
shll
ds
mov
adc
stc
and
enter
rex.xb
fs
addq
lods
and
out
lea
rex.rx
mov
cmpsb
sub
(bad)
add
adc
in
out
(bad)
enter
pop
(bad)
movabs
lea
sbb
(bad)
fdivrl
xor
(bad)
mov
push
mov
sub
scas
mov
leave
repnz
jg
loop
stc
xchg
outsl
cmpsl
lea
push
add
cmp
enter
ds
jmp
stc
rorl
int3
and
test
sub
xchg
fwait
cmp
call
(bad)
out
movabs
cld
insl
fiadds
xchg
rex.xb
jmp
in
xor
lods
adc
ja
es
fisttpl
sub
(bad)
test
cwtl
mov
xor
(bad)
pop
rex.x
mov
add
or
xchg
mov
loopne
(bad)
mov
popf
cmp
test
pop
rex.wrb
mov
js
insb
add
mov
(bad)
pushf
popf
movsb
movsxd
sub
(bad)
sbb
mov
rorb
jle
(bad)
loopne
call
(bad)
mov
rex.wr
rex.wr
mov
(bad)
adc
(bad)
xchg
push
cwtl
jns
jo
(bad)
(bad)
add
loopne
(bad)
mov
xchg
imul
test
xchg
(bad)
sub
loop
xchg
(bad)
push
loopne
mov
cmpsl
mov
cwtl
jb
pop
add
sbb
rex.wrb
rex.wrb
mov
jae
fs
cltd
divl
or
(bad)
(bad)
lahf
insb
imul
mov
(bad)
ja
sbb
loope
sub
xchg
movsxd
(bad)
pushf
enter
imulb
lahf
adc
iret
clc
and
xor
sub
outsl
mov
push
mov
xchg
xor
ja
jrcxz
call
xor
movabs
(bad)
sbb
ja
fnsave
lea
in
or
movabs
rcr
jbe
(bad)
insb
and
int3
lret
push
out
popf
mov
lock
mov
lahf
jae
repnz
rex.rb
bnd
push
sbb
outsb
imul
(bad)
add
loopne
popf
pop
ds
rex.wrxb
xchg
insl
fsubrp
xchg
outsb
mov
fcoml
int3
insl
xor
rex.wrx
cmp
mov
mov
xchg
lods
pop
lahf
lock
rex.xb
rorl
in
(bad)
insl
jg
mov
cmp
sbb
mov
cmp
test
je
(bad)
repnz
cwtl
(bad)
push
in
ret
mov
rex.rxb
pop
ds
cmp
out
sub
{rex2
call
clc
cmp
shll
rex.wx
rex
mov
cmp
add
clc
scas
mov
(bad)
cmp
and
lret
stos
int
cmc
(bad)
jmp
fdivrl
jle
push
add
cmc
hlt
in
jle
jmp
in
cmp
(bad)
pop
scas
adc
adc
sub
pop
fs
xor
pop
shlb
movsxd
fcomp
rex.r
mov
rex.wxb
cmp
loopne
add
cmp
or
scas
gs
mov
mov
mov
mov
in
jmp
imul
mov
pop
mov
add
es
and
(bad)
xor
rorl
sub
out
not
notb
lock
push
scas
(bad)
cld
mov
pop
adc
cmp
adc
xchg
lret
cmpsl
enter
imul
cmp
xchg
mov
or
mov
ret
and
or
test
je
rex.wrb
xchg
sub
ret
jno
imul
push
in
(bad)
imul
sbb
leave
leave
xchg
nop
je
nop
xchg
or
(bad)
mov
and
and
call
jb
rcr
movabs
lahf
data16
cmc
xchg
rex.rb
cmpsb
add
int
push
rex.r
rex.w
stc
ret
sub
movsb
stc
fs
or
(bad)
(bad)
lret
in
sub
xchg
(bad)
rorb
push
int3
gs
mov
gs
rex.r
sbbl
xor
scas
rex
jrcxz
cmpsl
std
cmp
sbb
sub
cmp
rex.rxb
movsl
rex.wx
(bad)
adc
xor
(bad)
mov
mov
mov
and
pop
add
(bad)
and
push
add
pop
add
(bad)
mov
call
or
add
rex.wrb
adc
adc
add
cmp
shrb
(bad)
hlt
movsl
cmp
(bad)
jo
xchg
jg
int3
xor
je
rex.wrxb
cmp
and
(bad)
mov
cmp
fcomps
movabs
test
lret
cmp
add
(bad)
cmp
scas
fdiv
sti
repnz
rex
sahf
jle
(bad)
insl
cmp
sbb
iret
mov
jns
rex.rx
mov
pushf
mov
mov
push
rex.rxb
pop
movsl
cmp
in
jl
sbb
fidivrl
stos
mov
enter
pop
insl
rex.wrxb
in
(bad)
cmp
stos
sahf
xchg
lock
cmpsl
sub
je
sbb
cmp
out
cli
in
ret
xchg
iret
and
fsubrs
xor
in
mov
pop
int1
jns
and
hlt
add
int1
sub
jo
rex.w
sbb
fistl
in
in
lock
shl
stos
ret
jae
jb
insl
xchg
movabs
lock
push
not
lods
(bad)
push
mov
js
(bad)
mov
(bad)
loopne
jp
xchg
add
push
punpcklbw
mov
data16
clc
jnp
mov
rex
rolb
enter
xchg
add
jno
cs
lea
sbb
enter
adc
js
rcrl
