fcoml
xchg
enter
xor
outsb
int
ds
xchg
insb
(bad)
std
in
test
rex.wrx
movsxd
movabs
(bad)
rex.xb
es
mov
iret
ss
cmp
sbb
jne
insb
xor
div
xchg
rex.wr
cmc
mov
pop
mov
flds
xor
gs
negb
mov
ds
movsxd
add
jne
mov
sar
ss
mov
xor
or
rex.wx
rex.rxb
test
adc
loope
mov
pop
or
sbb
xor
std
stos
jb
ret
xchg
add
xchg
jg
(bad)
sbb
pop
mov
loop
imul
rex.xb
(bad)
adc
(bad)
ret
(bad)
(bad)
lahf
xchg
jg
shlb
leave
jnp
out
sbb
(bad)
lahf
fwait
xor
testl
mov
add
rex.x
rex.r
lods
push
stc
push
add
lods
call
(bad)
(bad)
add
(bad)
movabs
push
adc
add
cli
fstps
push
xchg
rex.wxb
pop
jns
addb
decb
out
push
lret
sbb
rex
rex.wrx
mov
cmpsl
mov
(bad)
int
sti
xor
test
jmp
(bad)
(bad)
pop
push
mov
xor
adc
movabs
jne
xor
(bad)
loopne
imul
rex.b
mov
(bad)
rex.wrb
out
adc
rex.wr
sbb
(bad)
mov
imul
ds
xor
sub
(bad)
and
(bad)
pop
rex.wb
fists
(bad)
data16
jns
in
(bad)
xchg
filds
imul
mov
fisttpll
(bad)
and
fbstp
cli
int3
xchg
out
out
lods
filds
xor
(bad)
xor
sbb
fists
and
jbe
add
jnp
xchg
(bad)
(bad)
(bad)
rclb
mov
jl
and
cmpsb
(bad)
fcomi
add
filds
push
adc
test
loope
enter
mov
(bad)
(bad)
shrb
pushw
cli
cmp
sub
(bad)
jmp
or
and
xchg
ds
rex.xb
idivb
and
jmp
jnp
push
gs
lods
mov
adc
xor
add
lret
jnp
mov
jno
fidivrl
mov
loop
adc
(bad)
(bad)
lea
xor
(bad)
jnp
fnstcw
xorl
addr32
pop
and
int1
out
shr
jmp
cmp
(bad)
mov
rcll
cmp
in
jb
loopne
(bad)
stos
(bad)
add
shrb
outsl
test
loop
adc
push
(bad)
(bad)
js
jge
mov
cltd
jg
xlat
mov
clc
(bad)
cld
ja
(bad)
ja
ss
mov
jrcxz
adc
subb
sbb
push
sbb
rex.b
call
cmp
jmp
and
cmpsl
(bad)
idivb
adc
xchg
in
pop
movabs
cmp
jne
add
rorl
pop
sbb
jnp
lock
mov
xchg
stos
mov
(bad)
push
jp
mov
or
rex.wxb
stos
lcall
xor
(bad)
loop
rex.wr
int
jo
in
push
repz
jo
pop
push
pop
(bad)
mov
loop
(bad)
mov
ds
cmp
cld
rex.wr
pop
mov
testl
ret
add
(bad)
in
pop
cmp
jno
js
cmp
cmp
js
sub
xchg
push
movabs
cmp
jae
xchg
rex.r
(bad)
pop
(bad)
xchg
js
insl
es
{rex2
(bad)
(bad)
(bad)
call
sti
xchg
movsxd
repnz
loope
jae
sub
push
rex.wb
test
adc
(bad)
push
adc
cmpsl
(bad)
sub
xchg
js
in
jmp
push
test
and
rorb
int
sub
rcl
add
adc
sbb
out
(bad)
xor
adc
push
sub
ret
gs
call
sbb
outsb
popf
movabs
scas
or
sub
ficomps
add
lods
rcrl
adc
adc
rex.wxb
adc
jg
sub
push
movabs
xor
adc
adc
sarl
loop
in
std
adcl
rex.wrx
sarl
cmpsl
mov
xchg
ja
sbb
jp
adc
xchg
shll
nop
and
rex.xb
rex.wx
hlt
(bad)
and
jle
out
lret
scas
pop
lahf
and
rex.w
add
adc
push
int1
rex.w
cmpsl
or
jp
or
xchg
mov
clc
rex.w
rex.rx
jge
sub
idivb
scas
cmp
clc
sbb
cmpsb
(bad)
in
movsxd
movsl
dec
jne
fisttpl
shrb
loope
adc
jmp
xor
pushf
int1
(bad)
jns
cs
ds
and
mov
xchg
mov
adc
data16
(bad)
mov
movsw
pop
adc
roll
mov
cmp
hlt
xor
subl
pop
call
sbb
fldcw
loopne
xchg
lods
(bad)
xchg
shlb
push
rex.rb
shr
xchg
mov
rex.wx
{rex2
mov
jbe
(bad)
sbb
shrb
repz
rex
scas
push
(bad)
jne
jb
(bad)
mov
imul
loopne
lahf
xchg
rex
int1
jae
mov
xor
rex.wr
out
out
or
mov
pop
btr
cmp
xor
xchg
movabs
pop
rex.wxb
rex.rb
rex.wrx
rex.rb
xor
cs
insb
add
sbb
movabs
add
lods
rex.rx
data16
fwait
(bad)
cmp
jno
mov
mov
jnp
add
rex.x
rex.wxb
rcrl
jno
call
loope
cmpsl
xchg
(bad)
rex.wx
mov
in
jge
out
movabs
cmc
shrb
lahf
iret
lea
and
ror
(bad)
rex.x
jp
vpsllw
sbb
xchg
xor
rex.x
pop
out
xorl
jmp
hlt
rex.rxb
mov
sbb
xor
pop
add
mulb
rorb
(bad)
(bad)
sarb
push
stc
mov
jle
repnz
adc
jge
push
and
or
mov
or
stos
mov
xlat
cmp
sbb
cmp
or
push
rex
fcoms
push
pop
or
out
(bad)
fdivrs
mov
mov
sbb
rex.w
rex.wrx
jmp
idivb
rex.wrx
hlt
xorb
ficoms
jl
lahf
mov
sub
push
fildll
nop
ret
mov
jbe
push
mov
(bad)
fdivrl
adc
mov
rex.rxb
(bad)
rex.rx
pop
fwait
sbb
mov
leave
popf
decl
xorl
(bad)
fistpl
xchg
mov
incl
jbe
jle
(bad)
iret
pop
mov
adc
rex
fstl
cmp
pop
sbb
jmp
rex
(bad)
js,pt
in
push
ds
int3
pop
push
mov
jns
int1
test
rclb
pop
imul
fcoml
xchg
scas
sbbl
movabs
sbb
rex.wrb
js
mov
cld
add
insl
(bad)
pop
cltd
(bad)
mov
jmp
nop
rex.wx
and
sub
rex.r
(bad)
cmp
out
int3
push
mov
jnp
rex.wb
(bad)
(bad)
leave
fidivs
(bad)
fcmovu
xor
in
pop
mov
jns
rorl
scas
add
enter
mov
ret
vmovss
xchg
movsl
jae
rex.rb
int
mov
(bad)
sub
int1
in
fcoml
je
rorb
xchg
rex.rxb
test
xchg
loopne
js
hlt
rex.wb
repz
out
jl
call
jbe
mov
(bad)
and
and
mov
(bad)
xor
rorb
(bad)
iret
sbb
jge
repz
rex.rb
mov
mov
data16
mov
shr
rolb
jnp
es
mov
cli
addr32
(bad)
sub
(bad)
out
sbb
imul
or
jb
test
(bad)
xchg
xor
jrcxz
addl
movsl
fucomip
fistpll
(bad)
jno
scas
jle,pn
out
jle
mov
(bad)
cs
or
ret
(bad)
rcl
gs
(bad)
imul
jge
repz
mov
rex.rxb
mov
cwtl
push
rex.r
(bad)
outsl
{rex2
lret
jno
xor
mov
rex.wxb
(bad)
stc
pop
in
cmp
gs
(bad)
adc
jae
push
push
push
rex.wxb
sbb
adc
jge
(bad)
lods
imul
int1
rex.wrb
ds
std
outsl
add
out
rex
mov
xchg
clc
fsts
xchg
rex.wb
(bad)
lods
imul
mov
rex
in
adc
(bad)
mov
or
cmpsl
jno
outsb
lods
imul
add
rex
hlt
cmpsb
fwait
pop
cmp
or
movsl
add
mov
rorl
iret
test
mov
shlb
movb
cs
out
(bad)
pop
fbld
gs
jno
lods
imul
rex.wb
adc
int3
push
and
nop
mov
adc
rex.x
mov
stc
(bad)
