in
cld
enter
clc
andl
dec
int
dec
mov
pop
in
rcrb
aad
lods
jmp
stos
jae
loope
pop
(bad)
mov
je
int3
lds
ret
and
mov
int
fimull
xchg
mov
fbstp
daa
sbb
mov
iret
mov
les
push
mov
mov
(bad)
lret
les
xorl
jae
iret
sub
not
int
cmpsl
popa
xchg
fcoml
loopne
int3
pop
shll
iret
(bad)
daa
sarb
cmp
outsb
mov
mov
pusha
pop
sbb
insb
fcoml
in
xor
inc
andb
les
mov
in
je
ret
ret
jecxz
into
sbb
pop
lret
pop
into
daa
ds
out
jmp
xor
jb
dec
aad
mov
out
pop
dec
loop
js
mov
or
out
les
pop
out
les
ror
fdivrl
rcl
mov
out
scas
lea
push
out
frstor
cmp
pop
aad
lcall
fdivrl
mov
xchg
inc
dec
cmpb
add
(bad)
mov
stc
sbb
addb
pop
repz
loope
mov
jnp
arpl
fists
test
aam
idivl
in
aas
add
sub
stos
mov
(bad)
leave
mov
(bad)
dec
fs
movb
cld
add
inc
aad
xchg
inc
dec
shr
add
and
mov
int3
andb
fsubs
cld
jp
(bad)
inc
sbb
inc
fsubl
xchg
pusha
and
ret
fneni(8087
pop
aam
jmp
pusha
sub
(bad)
cmp
sti
lds
or
pop
jl
mov
(bad)
scas
pop
(bad)
loope
mov
mov
fnstenv
fdivrl
je
pop
xchg
mov
mov
sbb
bound
jmp
push
in
mov
shll
xlat
insl
int1
adc
jnp
dec
push
fndisi(8087
cmp
xor
(bad)
jne
bound
xor
jnp
les
shrb
push
(bad)
adc
out
incl
and
jl
mov
jmp
(bad)
hlt
mov
sub
push
in
cmp
shr
mov
es
in
call
movb
faddl
bound
int
inc
cli
jnp
test
ja
out
out
jge
jmp
jb
jnp
jno
lea
les
cli
mov
fstps
lret
popa
add
mov
pop
idivl
shl
jmp
xchg
dec
shrl
out
(bad)
xor
(bad)
call
fnstcw
(bad)
js
pop
(bad)
jge
and
ljmp
jno
rcrl
fistl
out
cli
jnp
(bad)
fdivrl
insb
ret
cld
push
sbb
cltd
in
out
jns
jne
inc
sbb
mov
xor
(bad)
hlt
xchg
xchg
idivl
sbb
and
jnp
repz
outsb
inc
jl
stc
int3
ror
pop
lret
push
mov
jbe
imull
and
pop
mov
mov
cmpsl
inc
and
mov
test
or
int1
cmp
mov
dec
enter
fisubs
cmc
add
in
add
call
inc
lock
fmul
(bad)
push
push
xchg
and
inc
in
or
add
stc
scas
repnz
ss
enter
arpl
add
shlb
test
arpl
out
push
(bad)
mov
imul
adc
sub
imul
lds
push
enter
in
cmc
in
and
sbb
loope
ret
outsl
cli
sub
inc
jne
xchg
inc
ret
int3
les
roll
int
adc
fcom
movsb
and
(bad)
das
mov
fimull
mov
jno
lret
stos
(bad)
lret
int3
push
popa
or
roll
repz
jns
jg
ss
ljmp
jle
fdivs
iret
ret
ror
js
jb
call
lds
push
mov
sbb
xlat
into
mov
int3
test
mov
lret
flds
leave
daa
(bad)
adc
push
cmpsb
mov
lret
push
cmc
sub
fld
add
loope
jb
push
sarl
aaa
fcom
ret
imul
mov
push
fcomp
mov
lcall
pop
xchg
adc
(bad)
rcl
call
shlb
jle
(bad)
push
ja
nop
jl
iret
push
jmp
xlat
mov
sub
stos
jmp
repnz
mov
loopne
fmul
mov
push
pop
mov
mov
sub
fmul
clc
mov
nop
ret
outsb
(bad)
int1
out
test
mov
into
fisttpll
cs
mov
pusha
adc
push
cld
in
inc
js
in
pop
(bad)
jmp
(bad)
pusha
or
(bad)
lret
sbb
imul
jle
sbb
(bad)
pop
(bad)
repz
add
jp
add
or
push
in
and
fcmovne
lret
test
js
mov
adc
lret
xchg
xor
cmpsl
mov
mov
pop
dec
(bad)
pusha
inc
movsl
adc
mov
stc
mov
loopne
lds
in
(bad)
fdivrs
push
repnz
insb
and
mov
xchg
dec
mov
out
shll
cld
dec
out
pop
enter
stc
rclb
push
mov
sub
out
ss
push
ja
sub
adc
(bad)
lret
inc
mov
ss
shlb
xor
in
and
inc
(bad)
sbb
add
pop
outsb
and
and
rcr
loopne
xor
enter
fsubrl
in
push
arpl
insb
testl
cmp
rclb
repnz
adc
insl
aaa
add
sub
les
inc
shll
mov
lret
idivb
mov
sahf
lret
sarl
cld
dec
sub
outsb
sbb
jne
mov
rorl
sub
xlat
xchg
scas
inc
mov
sub
int3
out
cs
jecxz
mov
addr16
xor
xchg
(bad)
cmp
jle
xor
gs
pop
add
mov
inc
xor
mov
dec
mov
fstpl
fdivp
movsb
shll
jne
(bad)
mov
mov
in
fnstsw
xchg
int3
mov
push
and
or
in
xor
out
repz
jns
hlt
push
ljmp
imul
cmp
aaa
pop
es
and
(bad)
cmp
loop
clc
ds
movb
cmp
xlat
arpl
scas
jmp
stos
mov
mov
sahf
push
lahf
sbb
bound
mov
or
cmc
cmpb
lret
pop
dec
inc
xor
sub
out
sbb
les
push
out
pop
mov
mov
int3
ret
div
pop
jp
inc
fs
les
mov
shr
fisubl
sarb
inc
cwtl
mov
insb
rcll
in
mov
cld
and
lea
jge
shl
in
adc
pop
dec
dec
les
mov
in
dec
int
or
sahf
test
mov
addr16
and
pop
cmp
repnz
repz
dec
arpl
and
enter
loope
cmp
mov
popa
push
cmp
in
(bad)
bound
mov
push
int3
(bad)
pop
neg
scas
adc
loope
int
loope
leave
xchg
inc
and
cmp
ret
decb
ficoml
ljmp
push
jle
cmc
push
shll
fnstsw
jnp
sub
in
add
(bad)
fsts
lret
ds
mov
mov
test
push
in
std
dec
std
mov
test
jbe
insb
add
data16
add
aad
pusha
sbb
addl
xchg
jnp
imul
loopne
(bad)
or
mov
xor
ds
test
ds
psrlq
dec
mov
ja
dec
(bad)
fisttps
js
ja
or
cmc
ja
int1
sub
push
out
lret
and
mov
in
mov
fcmovnb
add
loope
mov
jge
outsl
sbb
mov
or
mov
sub
pushf
loope
xchg
sub
int
jecxz
outsb
push
dec
pop
xor
int3
rolb
cmp
sub
mov
pop
rcrl
and
lods
push
(bad)
(bad)
lret
insl
xor
add
pop
mov
ss
pop
sub
jb
test
mov
aam
leave
push
jne
jle
or
ja
ja
and
lock
loopne
inc
jp
mov
pminub
pop
cltd
inc
insb
mov
push
dec
int3
movsb
or
(bad)
repnz
pusha
out
mov
pushf
mov
aaa
test
gs
in
gs
xor
aad
fisubs
stos
(bad)
jns
pop
push
popa
dec
