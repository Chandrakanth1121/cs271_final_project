xchg
add
int3
enter
lahf
pop
push
dec
pop
sbb
loop
in
lock
imul
into
push
sub
xchg
das
cmpsb
test
cwtl
or
cmc
in
mov
cmpsl
dec
test
jae
test
mov
in
xor
div
jns
sbb
or
jb
mov
cmc
dec
xor
jo
xchg
cmp
(bad)
xor
mov
ja
out
int3
mov
shl
xor
mov
loope
test
test
lret
add
cmpsl
and
mov
enter
pop
(bad)
movsl
fsubs
jae
dec
sub
jne
jne
fnstsw
mov
cld
dec
es
mov
ja
push
inc
pop
cmp
in
clc
outsb
adc
dec
cmp
and
cmp
cli
imul
or
je
cwtl
daa
cwtl
xchg
out
popf
int
iret
into
cmc
int3
xlat
lcall
into
jno
xchg
dec
ja
shrb
int1
dec
and
jno
nop
push
fisubrl
sbb
in
cli
and
and
jo
sbb
(bad)
js
or
subl
xchg
lods
add
xchg
loopne
add
push
push
test
and
dec
lret
sub
and
pop
lret
sbbb
sub
jge
mov
add
sub
mov
clc
sbb
xor
nop
and
sbb
imul
adc
fidivs
push
nop
xchg
enter
xor
std
aas
in
cld
sub
jae
fsubs
xor
push
shlb
xchg
push
lret
push
inc
sub
or
int
mov
int3
mov
scas
mov
sti
dec
fidivrl
and
mov
loopne
jl
hlt
or
call
fldcw
fidivl
add
out
rol
adcb
pusha
rorl
mov
aam
add
cwtl
pop
sti
and
js
mov
sbb
pop
in
lea
mov
clc
xlat
push
sbb
clc
test
cmp
mov
mov
int1
cmp
stc
pop
lret
stos
mov
inc
pop
ss
lock
add
sbb
sbb
adc
adc
iret
and
test
aas
jne
mov
loop
pop
sbb
adc
pop
lret
test
push
mov
dec
mov
lock
shll
inc
js
cmpb
fists
popa
clc
inc
int3
movsl
mov
aad
fdivs
sbb
mov
pop
sbb
leave
les
xor
fiaddl
jecxz
test
push
push
mov
add
aam
pop
pop
int
inc
mov
and
(bad)
xchg
and
jo
sub
(bad)
mov
jmp
andl
pusha
fsubrs
aaa
fidivl
or
xchg
mov
ja
bound
and
fdivrl
hlt
aad
popf
fcoml
and
xor
sbb
xchg
sbb
cmp
mov
jmp
imul
sub
and
addl
xchg
test
jnp
(bad)
mov
in
hlt
fidivl
ljmp
jb
jnp
imulb
cmp
aaa
add
mov
xor
int3
adc
outsl
adc
fldenv
lock
or
not
pop
xor
leave
ret
je
mov
cmp
lock
xchg
cmpsb
in
jno
sbb
shlb
sbb
cmp
insl
test
rcrb
fnstcw
ss
gs
aaa
iret
adc
sti
daa
into
pop
mov
pop
sub
sbb
mov
mov
jmp
call
cs
pop
movsl
int
mov
adc
scas
add
jnp
pop
cmp
shll
fisubrl
ja
pop
or
pop
enter
out
decl
scas
fisttpl
dec
addr16
jp
and
ja
dec
gs
fcoms
out
jo
jle
in
jp
mov
cmpl
xor
xor
aam
lock
and
out
mov
or
push
fwait
dec
in
gs
lods
aad
pusha
xor
sub
stc
outsb
out
(bad)
hlt
lods
aam
adc
insl
imul
xchg
push
fwait
movsb
sahf
loope
pop
stc
popa
and
lret
mov
ds
loop
add
pop
rsm
les
or
inc
jns
fldcw
and
or
inc
ljmp
xor
inc
movsl
es
popa
iret
lret
nop
arpl
add
push
mov
push
fsubrp
lret
inc
adc
scas
xlat
mov
jmp
je
mov
pop
xor
pop
pop
jns
cmc
mov
imul
lods
fwait
add
or
cmpsb
shl
lds
xlat
repnz
pop
enter
xor
cs
je
xchg
cs
loop
push
imul
ja
mov
mov
push
mov
stc
imul
dec
jbe
or
sti
jg
jo
xor
leave
dec
xor
imul
mov
into
xor
cmp
mov
jle
jo
xor
movsb
jmp
lea
test
xchg
es
mov
push
repnz
nopl
ds
das
sub
dec
enter
loope
imul
or
in
or
es
pop
fidivrl
pop
xchg
(bad)
mov
movsl
cmc
lcall
push
sub
jno
das
gs
fbld
and
xor
(bad)
mov
cwtl
mov
mov
sbb
mov
popf
xor
cs
dec
repz
jg
jp
mov
mov
hlt
dec
loop
ret
aaa
repnz
add
xor
bound
or
jbe
add
adc
push
rorb
sahf
cli
daa
cs
xor
sub
in
das
stc
or
jge
push
jecxz
int
(bad)
mov
loop
and
cmpsb
mov
subl
mov
pop
(bad)
stos
test
int1
dec
mov
jg
mov
div
inc
sbbl
insl
int
mov
or
pop
push
scas
ss
out
jnp
or
mov
adc
push
jge
xchg
lock
outsl
mov
mov
cmp
les
aas
or
pop
or
mov
mov
mov
or
xchg
push
cwtl
pop
lcall
(bad)
cs
xor
cmpsl
lahf
out
cli
mov
mov
mov
sti
push
or
hlt
inc
iret
shlb
mov
int3
das
test
daa
pusha
clc
jl
sub
enter
and
incb
hlt
xor
hlt
sub
jbe
jnp
aas
lcall
mov
in
imul
cmp
fcomps
fiadds
jl
lret
in
sub
ss
stos
aaa
cmovg
stos
and
mov
test
outsl
adc
fsts
mov
mov
ja
push
mov
outsb
stc
cltd
shrl
and
outsb
mov
pop
mov
jbe
or
stos
test
and
int
stc
mulb
mov
stos
std
fsub
lret
fdiv
pop
pop
loopne
mov
inc
cmp
lea
mov
pop
repz
in
enter
js
xor
add
mov
in
dec
addr16
lret
test
sub
test
in
ds
push
fwait
jnp
jle
inc
mov
xchg
notl
into
fs
js
mov
shr
lret
out
push
fs
daa
mov
xchg
adc
adc
or
test
fstpl
add
mov
scas
cmp
push
jbe
dec
push
sub
clc
pop
into
pop
insl
clc
nop
lret
push
cmpsb
add
pmulhuw
and
out
mov
repnz
popf
sub
push
je
fs
js
mov
mov
mov
sti
outsb
pop
dec
(bad)
mov
push
leave
xchg
push
inc
addr16
mov
mov
inc
xorb
cmp
imul
push
test
mov
push
add
pop
push
adc
loop
jo
sub
aad
shll
pop
push
dec
popa
cli
stos
iret
and
dec
mov
js
(bad)
inc
roll
lcall
popf
dec
lock
dec
jg
mov
lods
jecxz
repnz
das
popf
xchg
jno
sbb
sbb
and
adc
inc
call
bound
rol
mov
pop
lock
add
imul
xor
aaa
inc
into
out
dec
cmp
(bad)
scas
dec
iret
inc
movsb
push
inc
outsl
test
lret
cmp
notl
pop
jb
iret
sahf
xor
(bad)
or
pop
roll
cli
xchg
sub
dec
add
cmp
(bad)
mov
jmp
jmpw
inc
into
sub
mov
sub
sub
into
sub
fadd
loopne
int
mov
add
