movq
call
mov
push
jne
push
nop
movslq
or
jmp
push
or
jno
rex.wrxb
ljmp
(bad)
rex.rb
rex.wrxb
lcall
adc
rcll
js
jg
xchg
jno
loope
int3
out
rex.wr
enter
or
or
cs
jo
je
jrcxz
enter
rex.rxb
jl
cltd
sti
movsxd
movsxd
mov
fcmovne
call
jae
jl
cltd
mov
cmpsb
test
pop
ja
mov
or
jg
sbbb
push
or
jg
loopne
or
jg
xor
jg
jo
or
jg
and
or
jg
loopne
or
jg
cmp
fmul
xchg
mov
xor
outsl
sbb
or
addr32
ja
push
pop
rex.b
cltd
(bad)
mov
je
cmpsb
xchg
jno
je
mov
jge
cltd
(bad)
movabs
je
lret
jge
cltd
xor
and
and
mov
int3
idivb
insb
rex.wrxb
testb
jo
ds
xchg
rex.rb
sarl
insb
sti
loop
xchg
fadds
ret
(bad)
insb
(bad)
mov
(bad)
xchg
(bad)
idivb
push
xchg
push
xor
xchg
jg
mov
jg
push
loop
ss
mov
jo
hlt
rex.rx
(bad)
mov
(bad)
mov
mov
and
rcrl
lock
mov
jle
{rex2
jb
sbb
in
fcoml
(bad)
insb
adc
mov
xchg
mov
xor
in
add
push
shrl
(bad)
(bad)
call
cltd
cld
sub
mulb
and
sbbl
mov
rex.w
rex.r
xchg
in
add
sbb
negb
shlb
insb
mov
(bad)
inc
ds
cmc
out
subl
jbe
mov
or
adc
adc
je
jg
jge
repnz
adcb
in
jbe
sub
lret
(bad)
or
sub
push
(bad)
out
lret
jg
or
and
(bad)
cmp
(bad)
iret
xor
(bad)
mov
or
lods
lret
mov
scas
mov
ja,pn
loop
imulb
xchg
cltd
loop
ret
fistps
(bad)
subl
decb
jnp
rex
xchg
or
(bad)
leave
jg
sub
push
out
mov
in
jp
int
jno
loope
lods
mov
clc
cmpsb
(bad)
jbe
mov
subb
jnp,pn
mov
xor
add
sarl
add
sub
sarl
add
sub
(bad)
add
rcrb
in
(bad)
add
sub
jle
test
cs
jge
(bad)
outsb
(bad)
in
(bad)
cmp
nop
or
jrcxz
es
sbb
loopne
out
sbb
faddl
rex.rx
mov
add
fbstp
lahf
(bad)
loope
rex.xb
(bad)
mov
jbe
cmpsl
nop
subb
cs
call
or
rcl
jbe
(bad)
rex.xb
or
or
and
clc
and
(bad)
iret
xchg
xchg
push
xlat
xchg
je
(bad)
xor
xchg
insb
xchg
(bad)
or
stos
lods
movabs
or
and
mov
iret
jg
cltd
cmp
(bad)
jg
cltd
in
test
jg
cltd
mov
cltd
nop
je
jg
cltd
mov
jg
cltd
add
rex.rxb
cltd
nop
lods
mov
imul
loop
add
push
gs
(bad)
jae
rex.rb
outsl
jb
(bad)
sub
imul
cmp
imul
jne
lods
or
jg
rex.wb
or
jg
int1
cmc
or
jg
mov
or
jg
insl
or
jg
(bad)
lret
xchg
mov
rcl
adc
rorl
(bad)
(bad)
fidivrl
add
je
or
js
cltd
outsl
(bad)
or
je
xorl
mov
(bad)
js
cltd
rex.rxb
hlt
js
cltd
rex.wrxb
js
cltd
mov
(bad)
jne
lods
pop
jne
(bad)
xor
jbe
mov
ret
add
clc
testl
mov
xchg
rex.x
mov
fisubl
rex.x
jbe
mov
mov
test
or
rex.wb
or
or
(bad)
sub
and
cltd
iret
sti
call
mov
js
cltd
stos
andl
cltd
mov
cmp
cltd
xchg
(bad)
clc
js
cltd
jg
(bad)
js
cltd
sub
js
cltd
rcll
loop
fwait
je
data16
jmp
sub
outsl
jg
rex.wx
xor
rex.wx
push
jbe
sbbl
cmc
mov
(bad)
rex.wrx
jmp
insb
in
lret
jno
cld
jg
rcl
(bad)
push
rcl
fcoml
mov
xor
pop
shlb
ret
in
pop
stos
in
{rex2
jno
sbb
jno
(bad)
int
sub
lock
add
push
(bad)
repnz
and
cmpsb
adc
pop
movabs
cli
push
fisubrl
adc
pop
rolb
cs
stos
push
or
sub
movsl
lea
loop
jo
(bad)
{rex2
sbb
pop
or
(bad)
rcl
movabs
(bad)
rex.wxb
add
iret
jge
mov
out
mov
(bad)
movabs
movsb
or
push
mov
pop
xchg
sub
and
rex.rx
sub
lock
insb
xchg
mov
outsl
and
movabs
cmp
sub
rcr
pop
mov
mov
mov
(bad)
jrcxz
rex
repnz
rex.wrb
xor
adc
enter
mov
int
add
push
(bad)
xor
movabs
fadds
jno
jmp
fsubrs
loop
(bad)
jae
{rex2
sub
jrcxz
xor
(bad)
fdivr
loop
movsb
mov
{rex2
js
mov
(bad)
sub
lock
adc
xchg
lods
pop
fimuls
shlb
cmp
faddp
sbb
rex.wrxb
rex.rx
addr32
stos
rex.rx
add
adc
or
rex.wb
rex.w
sbb
movsxd
(bad)
movabs
rorl
mov
outsb
lods
mov
loope
in
movsl
in
out
sub
jno
lock
push
(bad)
subb
subl
repnz
ret
ja
and
cmp
sub
je
stos
sbb
sbb
(bad)
{rex2
xor
xlat
{rex2
sbb
shlb
lret
mov
notb
rcll
adc
rorl
cs
iret
jno
fsubs
{rex2
sbb
sub
xor
cmpsl
jbe
in
pop
mulb
pop
outsl
or
or
lahf
xchg
mov
in
jnp
cltd
ss
jnp
cltd
(bad)
xchg
push
jnp
cltd
scas
push
jge
je
mov
cltd
cmpsb
(bad)
int
je
pop
(bad)
(bad)
cltd
sbb
std
jnp
cltd
jno,pn
jne
xchg
sbb
push
fwait
(bad)
xchg
cwtl
(bad)
movabs
out
fdivrl
sub
rex.wxb
addr32
fsubrl
add
(bad)
rex.rxb
add
rcll
scas
mov
sub
sbb
xor
cwtl
out
nop
insl
rex.wxb
cmpsl
lock
ljmp
rex.rx
addr32
adc
jns
adc
int3
adc
or
or
(bad)
int1
rex.b
and
or
or
jb
test
mov
xor
or
lret
sbb
jbe
or
xchg
insb
rex.rx
cmp
nop
cmp
outsl
xor
cmc
movabs
jg
movsb
(bad)
add
(bad)
rol
mov
(bad)
outsl
mov
(bad)
mov
cmp
jno
(bad)
pop
jbe
loope
rex.wrx
scas
jge
outsl
or
or
(bad)
sbb
(bad)
cltd
(bad)
(bad)
xor
out
cmp
out
je
cltd
pop
es
je
(bad)
cmpsb
xchg
je
cltd
rex.x
popfw
je
cltd
or
adc
jne
mov
xorb
scas
repnz
xchg
outsb
jmp
jg
loope
repnz
jg
leave
xchg
repnz
jg
jge
repnz
jg
sarl
sbb
push
sbb
repnz
jg
mov
pop
add
rex.xb
add
in
rex.wrxb
push
cmpsb
mov
test
xorl
rex.r
adcl
fiadds
and
xchg
in
or
add
push
xor
and
sti
jbe
fcoml
outsl
sbb
or
(bad)
or
gs
cltd
loop
in
je
scas
lret
je
and
cmc
jne
cltd
push
sub
scas
push
jne
cltd
(bad)
loop
jne
cltd
or
(bad)
and
jne
cwtl
(bad)
ja
(bad)
(bad)
(bad)
xlat
imul
rex.wxb
decl
incl
(bad)
and
(bad)
(bad)
ja
jnp
lcall
repz
lcall
sarl
ljmp
jmp
sub
jnp
(bad)
cmp
xor
rex.rx
push
mov
rorl
clc
hlt
xor
ja
