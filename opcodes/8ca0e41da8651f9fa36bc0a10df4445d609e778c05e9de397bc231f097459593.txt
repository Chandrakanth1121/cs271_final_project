mov
add
add
add
add
add
add
test
add
add
add
push
rclb
or
or
sub
in
in
mov
outsl
lock
sar
aam
push
fiaddl
fsubrs
push
ss
loope
jo
mov
cmp
out
out
ror
mov
movl
pop
fimull
ja
push
cltd
mov
aas
pop
adc
in
dec
cmp
lods
mov
mov
inc
int3
gs
cltd
repnz
jo
dec
inc
jae
push
(bad)
ja
push
hlt
test
jo
rcll
mov
stos
daa
or
scas
or
aas
clc
int
clc
cmpxchg
inc
adc
js
outsl
inc
scas
shrl
idiv
movl
pop
sti
scas
xorl
mov
fnstenv
imul
sub
mov
das
jmp
push
push
xchg
outsl
in
out
mov
std
or
scas
insb
push
testl
sbb
xchg
xchg
inc
lock
xchg
dec
inc
int3
stos
cmp
sbb
inc
pop
jp
loopne
(bad)
xor
lods
shll
clc
inc
aad
out
int
fs
das
sub
in
ja
rcl
iret
jecxz
push
inc
outsl
(bad)
cld
andb
out
pop
add
and
push
dec
inc
jge
stos
fcmovb
jge
sub
fsubl
gs
push
mov
lcall
int
sbb
cwtl
pop
mov
cmc
lcall
xchg
jecxz
cmpsl
jbe
leave
roll
sahf
fisubs
and
push
dec
fsubrs
test
notl
xorb
dec
lods
test
cmpsl
not
push
int
sahf
mov
adc
fidivl
scas
cs
out
dec
xchg
cmp
test
les
fcomps
ret
test
sub
pop
dec
pop
cmp
loope
jnp
jge
aas
imul
add
ret
cmp
dec
movsl
movsl
and
jmp
and
xor
imul
insb
andb
fisttpl
cmpsb
ret
push
dec
mov
or
cmp
add
dec
in
ret
dec
cltd
int3
(bad)
jae
shrb
push
outsb
inc
inc
cmp
scas
pop
js
mov
jge
mov
fwait
cld
aam
mov
sbb
out
sub
lahf
fadds
ret
std
xchg
aad
in
xor
insl
pusha
nop
xor
fwait
mov
imul
stos
cmp
push
or
push
push
push
lahf
fs
push
outsb
dec
jle
ret
mov
nop
mov
lcall
inc
pop
cmp
inc
dec
out
test
pop
arpl
jl
mov
pop
scas
in
(bad)
rcr
dec
in
int3
adc
enter
push
inc
mov
(bad)
mov
popa
mov
arpl
ja
inc
scas
arpl
sub
sub
mov
inc
dec
pop
out
(bad)
lahf
dec
mov
gs
xor
mov
push
ss
in
dec
jns
stc
cmpsb
lret
int3
adc
push
jmp
mov
stc
jns
xchg
(bad)
repnz
adc
repz
int1
pusha
imul
lcall
pop
fildl
fildl
xor
adcl
rcrl
xor
sbb
out
aam
and
int3
cmp
cs
xchg
(bad)
daa
mov
lcall
bound
adc
rolb
dec
or
xor
and
ret
fidivs
scas
dec
cmc
out
mov
inc
jae
inc
mov
popf
into
mov
jo
jg
jb
xlat
jg
lret
cs
cltd
fwait
aaa
jbe
sub
jno
push
lods
mov
and
(bad)
jbe
and
ljmp
fwait
sbb
pop
inc
mov
dec
jne
cld
fbstp
adc
dec
xor
cmp
mov
sbb
aas
push
or
pop
pop
cs
push
idivl
mov
in
xor
mov
cs
inc
sbb
xchg
mov
imul
das
popa
shll
xorl
in
(bad)
dec
xchg
xor
inc
fcmovnb
jp
andb
out
jp
dec
scas
sub
cs
dec
mov
scas
or
sbb
movsb
gs
pop
lret
lods
or
add
out
lea
mov
ret
or
xchg
lcall
mov
mov
arpl
xchg
(bad)
pop
and
iret
dec
xorl
clc
mov
(bad)
stc
insb
jb
out
dec
inc
mulb
mov
popf
bound
into
inc
push
loopne
idivb
inc
pushf
jmp
mov
nop
fidivrs
xchg
xchg
mov
(bad)
(bad)
add
pop
jmp
int3
push
insl
xchg
mov
cltd
inc
mov
dec
inc
inc
sub
mov
mov
pop
mov
xlat
push
int
rol
cmp
(bad)
xor
(bad)
pop
xlat
les
rcrl
xor
sub
inc
push
and
ds
test
add
mov
mov
jb
std
not
pop
shll
insl
pop
movb
cs
jo
pop
mov
xchg
push
or
mov
out
fcomps
in
push
jbe
mov
mov
jp
in
sub
cmp
pop
xor
add
andb
lret
rorl
jne
pop
adc
fistpl
adc
jbe
sbb
pop
and
adc
mov
push
add
mov
push
push
push
push
movsb
fldt
xchg
cmpsb
adc
inc
(bad)
pslld
xor
or
orl
mov
inc
cmp
push
add
sub
lret
das
test
or
enter
inc
mov
int
testb
sub
add
aam
pop
jo
inc
push
mov
bound
pop
jecxz
adc
mov
pushf
add
js
sub
inc
mov
sub
adc
mov
sar
xor
push
mov
in
xchg
xor
scas
cmp
mov
mov
hlt
out
pop
lea
ret
call
sbb
adc
xchg
jp
hlt
(bad)
arpl
lds
mov
or
cmp
into
cmp
cmpsb
repz
cld
mov
lahf
insb
push
out
cmp
jg
and
stos
nop
xor
sub
push
sti
xchg
mov
push
les
dec
push
sub
inc
stos
push
lret
xchg
les
outsl
cmp
xchg
push
ljmp
insl
(bad)
lcall
inc
push
add
sarb
jnp
inc
xchg
negb
jmp
mov
fistpll
lods
cmc
ret
cmc
sbb
inc
das
aas
int3
fsubs
cmp
sti
je
add
sbb
ss
sub
or
out
inc
aas
sub
jo
mov
fidivrl
subb
pop
mov
mov
shlb
lahf
cmp
pop
nop
adc
dec
dec
jg
mov
sub
jl
enter
mov
adc
adcb
xor
inc
inc
push
add
fcomip
mov
mov
sbb
and
or
inc
call
sub
stc
rol
loopne
lds
cmpsb
aas
test
sub
scas
or
pop
lret
int3
mov
xchg
xchg
dec
ljmp
pusha
jge
aam
ret
jo
inc
fimuls
jecxz
adc
lods
pushf
dec
mov
cmp
cmp
shll
and
ja
cmp
mov
jnp
add
aad
(bad)
hlt
jns
push
or
lods
xor
loope
sub
stc
pop
test
js
shlb
in
daa
xor
call
das
jl
mov
jbe
stos
xchg
cmpsb
xchg
insl
mov
(bad)
sub
mov
dec
sub
add
xor
je
sub
lcall
fnstenv
je
cmpsb
and
adc
fisttps
lods
lock
stc
inc
(bad)
int1
cmp
int1
cmp
cld
int
and
xor
lock
pop
movsl
mov
dec
push
push
into
push
push
lahf
and
inc
clc
test
sub
ror
mov
xchg
and
pop
(bad)
push
pop
ds
popa
inc
inc
adc
in
pop
in
dec
clc
mov
popf
div
int3
pop
xor
push
ss
and
add
mov
and
(bad)
sahf
push
dec
outsl
inc
xor
and
fdivrl
and
(bad)
cmc
das
rcrl
lea
ret
addr16
or
iret
push
lock
pop
sti
xchg
mov
dec
cs
es
jg
iret
mov
