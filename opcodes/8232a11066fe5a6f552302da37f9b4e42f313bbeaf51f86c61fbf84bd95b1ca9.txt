push
loop
push
fdivrs
or
stos
lret
bound
cmc
shl
lea
mov
jae
fsubs
sbb
(bad)
loope
xor
mov
push
pop
jle
in
adc
es
push
sbb
jecxz
jmp
push
push
cwtl
rol
movsl
aam
fistpll
iret
(bad)
mov
insb
popa
sahf
gs
cld
arpl
xchg
mov
imul
fisttpll
ljmp
and
push
enter
pop
cmp
jmp
outsb
in
adc
out
push
push
adcb
push
adc
out
push
je
shll
add
adc
jg
push
shl
adcb
testb
stos
pop
push
pop
xchg
inc
add
in
mov
lcall
lods
xchg
rcl
mov
push
insl
(bad)
sti
xor
jne
xor
xchg
clc
jnp
stos
faddl
push
insb
sarb
ljmp
sbb
sbb
jo
mov
or
std
xadd
or
rol
mov
rorb
repnz
cmp
mov
push
jmp
(bad)
fistpll
push
xchg
or
inc
shl
pop
cmp
enter
adc
or
outsb
(bad)
scas
push
jge
lcall
push
add
sub
ficoms
xor
out
fdivrp
loop
adc
xor
fs
fistps
loopne
jp
lds
scas
aam
mov
xchg
mov
loop
sti
mov
push
arpl
push
pop
pop
in
(bad)
popa
imul
jge
data16
push
jle
jno
shl
popf
mov
out
lret
pop
mov
xchg
push
mov
pop
hlt
adc
sub
cmp
cmp
push
fiadds
(bad)
mov
int1
sub
mov
add
add
clc
push
push
and
scas
or
sbb
outsb
movsb
inc
and
lret
dec
xchg
or
das
das
cmp
popa
rcrl
cmp
cmpsb
push
outsl
fadds
imul
divb
cmp
pop
push
enter
sbb
push
test
mov
dec
adc
out
jo
pop
or
fiaddl
lcall
es
stos
mov
lcall
push
inc
nop
jno
fsubrs
push
push
lock
xchg
fisubl
or
jnp
incb
add
faddl
sbbb
cld
ljmp
sbb
cmp
xchg
jbe
into
stos
push
dec
int1
cs
std
pop
clc
sarb
sbb
jg
lret
cwtl
lcall
(bad)
aam
and
lock
or
jp
jnp
out
in
sbb
inc
push
bnd
test
mov
pop
add
dec
push
imul
and
test
lock
mov
sub
fsubp
fs
repnz
push
xor
mov
dec
fsubs
das
mov
cmp
mov
es
push
ss
jmp
(bad)
jb
or
xchg
fdivrl
ds
push
inc
aaa
(bad)
xchg
jns
out
lret
fidivrl
fs
pop
outsl
mov
jno
or
cld
and
pop
ljmp
rolb
arpl
xchg
mov
cwtl
testl
lock
insl
fsubp
pop
lods
sti
loope
cmc
mov
imul
mov
cmp
push
in
and
hlt
arpl
aam
pop
sbb
into
push
cs
imul
jl
mov
aaa
xor
arpl
push
stc
dec
fnsave
call
cwtl
mov
adc
sbb
adc
arpl
ljmp
inc
data16
sub
or
rclb
xor
adc
imul
mov
popa
or
xor
dec
and
mov
outsl
inc
enter
addr16
lahf
aas
movsb
hlt
inc
insl
cmp
add
insl
(bad)
jns
and
push
clc
ret
adc
in
rol
fstl
xorl
cmc
mov
push
int
sub
mov
cltd
and
jmp
in
sub
(bad)
xchg
pop
push
in
and
adc
cli
mov
mov
mov
ss
push
or
mov
xor
mov
cmpsl
mov
cli
jecxz
mov
(bad)
xchg
fwait
cmp
cmp
insl
int1
dec
push
xor
test
xor
sub
jecxz
add
jge
fisubs
scas
and
jg
std
outsl
inc
ret
xor
inc
lea
xor
xchg
and
cmpl
xor
(bad)
mov
add
stos
lods
sbb
cltd
cmc
inc
and
xor
ret
mov
push
mov
int1
mov
mov
mulb
in
adc
cli
jbe
jno
push
jno
fldcw
pop
push
(bad)
ljmp
rorb
pusha
xor
insb
test
(bad)
or
movsb
enter
(bad)
push
sbb
test
xchg
and
push
stos
mov
and
repnz
sub
push
sbb
mull
in
jae
ret
test
sub
aam
std
in
cld
js
xor
and
cli
lahf
jp
cli
adc
leave
fucom
mov
mov
mov
jmp
mov
or
insl
cmpsl
imul
(bad)
cltd
out
les
xor
ror
fs
mov
inc
dec
outsb
(bad)
sub
fdivr
mov
and
cld
or
mov
mov
dec
call
and
push
xlat
cmp
outsb
adc
jp
pop
std
into
es
es
into
and
in
sarl
popf
push
clc
sbb
sbb
push
mov
ja
mov
pusha
xor
mov
jo
add
mov
jae
push
fldcw
fwait
shl
add
clc
addr16
repz
xor
(bad)
pop
int1
repnz
dec
cwtl
lock
mov
jecxz
mov
sub
int
gs
sti
popa
imul
popa
imul
into
jp
mov
iret
dec
push
dec
jnp
inc
or
inc
inc
iret
adc
xchg
or
mov
and
jmp
mov
fsubrl
cmc
sub
or
xor
pop
das
(bad)
fwait
lcall
arpl
xchg
rcl
sub
scas
shrb
add
test
and
cmp
xchg
add
loope
lcall
lock
ret
xchg
jno
sbb
cli
iret
cmc
push
pop
int
fcmovnu
sub
pusha
add
loop
int3
adc
incl
int
jecxz
imul
and
jns
pop
pop
or
jecxz
pop
jge
mov
dec
mov
ret
add
mov
fs
xchg
inc
lods
cmp
push
cmp
pop
and
daa
fbstp
decb
mov
inc
mov
hlt
mov
cmp
mov
enter
cltd
xor
mov
sub
je
hlt
dec
inc
mov
jo
pop
or
stc
cmc
dec
pop
adc
jecxz
imul
cmp
push
jecxz
inc
push
sub
fbstp
mulb
testb
mov
arpl
and
xchg
push
and
sub
(bad)
cwtl
jae
imul
pop
repnz
outsb
pop
sbb
cmp
int3
loopne
mov
arpl
jmp
stos
or
inc
cmp
test
jecxz
pop
sbb
dec
dec
jno
and
sbb
out
dec
lret
rorl
loope
push
js
sbb
xorb
(bad)
ja
and
js
inc
inc
cltd
add
sbb
mov
inc
push
fisubs
xchg
fadd
add
repnz
ret
test
mov
jnp
xchg
jl
leave
loope
ret
push
and
mov
loope
adc
rorb
sahf
repnz
into
cwtl
dec
jae
jne
cld
clc
jb
cmp
jno
loope
push
adc
mov
imul
lret
mov
daa
fldt
mov
inc
mov
dec
int3
jl
fwait
jo
int3
cmp
dec
out
lods
test
in
dec
clc
call
jle
xchg
adc
push
sub
js
xchg
loopne
pop
shll
int1
jne
mov
push
pop
jb
cmp
mov
test
enter
mov
xchg
pop
rclb
xor
sbb
ja
outsl
aam
cltd
push
sarb
dec
mov
(bad)
les
xchg
pop
jo
mov
inc
adc
xor
cmp
jmp
fistl
arpl
out
xor
pop
or
nop
fdivrl
sbb
cmp
ss
mov
lods
xorl
mov
mov
and
jge
call
int1
ljmp
dec
mov
pop
push
ljmp
inc
mov
movsb
add
ljmp
jmp
pop
sbb
clc
sahf
outsb
in
pop
mov
jno
in
jns
add
jno
