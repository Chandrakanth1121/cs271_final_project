jmp
fildll
lock
cld
push
sbb
xor
(bad)
pop
out
xor
out
jg
mov
test
or
and
sar
and
clc
adc
stos
adc
je
push
stos
push
stos
sub
adc
pop
jns
push
fwait
push
addr16
jo
adc
cmpl
xchg
je
sbb
jns
cltd
sub
scas
jmp
rolb
lret
movsl
sbb
xchg
(bad)
sbb
and
in
sub
je
mov
jmp
push
lahf
or
das
sub
mov
add
sub
sbb
ret
push
ret
jge
cmp
sbb
push
sbb
enter
es
cmpb
dec
ja
es
rcrl
adc
cmpl
xchg
int
cmc
(bad)
clc
mov
fxch
adc
jae
out
inc
lcall
pop
fisttps
scas
mov
lahf
aam
lret
loopne
or
sub
enter
xor
cmp
mov
jnp
xor
sbb
sbb
dec
mov
xor
sbb
jns
cmp
ja
or
enter
inc
sbbl
jnp
cli
sbb
int
(bad)
jmp
mov
mov
iret
mov
jecxz
jle
sub
cmpsb
jmp
mov
push
aaa
jne
sbb
mov
cltd
(bad)
xlat
jae
call
js
xor
ja
ror
dec
push
pop
push
inc
adc
fwait
mov
es
cmpb
inc
ja
mov
xor
enter
push
les
daa
lods
movsl
loop
sub
push
pop
xchg
lods
lock
out
jg
cltd
lea
lahf
enter
and
into
dec
sub
inc
cmp
dec
int1
inc
xchg
add
fstps
lods
inc
mov
orb
rcr
sbbb
pop
push
es
and
daa
and
mov
lret
xchg
and
lods
inc
in
jmp
xor
jae
mov
enter
mov
and
inc
and
dec
jle
add
stc
lcall
jp
aam
push
mov
jecxz
and
jle
imul
jmp
sbb
sbb
sub
mov
aam
or
clc
sbb
bound
js
xor
je
sbb
xchg
push
pop
xchg
lods
jmp
jmp
push
jg
cltd
lea
outsl
sbb
ja
sbb
mov
or
mov
test
insl
test
dec
(bad)
mov
jecxz
and
into
test
adc
push
dec
cmp
push
jno
dec
mov
and
outsb
js
xor
sbb
lret
mov
jp
int
sbb
sub
(bad)
pop
jmp
xor
jmp
push
pop
imul
cltd
push
dec
lcall
inc
testb
push
mov
je
inc
xchg
jo
jb
sub
fldl2t
push
inc
or
adc
push
jmp
add
addr16
jb
xlat
dec
pop
cltd
sub
xor
in
adc
mov
daa
push
cmpsb
subb
stos
sbb
inc
sbb
jns
dec
dec
in
lods
xor
js
shrl
dec
jle
push
push
lcall
mov
and
cmp
adc
sub
mov
(bad)
and
insb
scas
and
mov
sub
sbb
movsb
jp
inc
mov
push
inc
daa
xchg
inc
push
sub
adc
push
adcl
push
es
and
and
jmp
test
out
and
sbb
push
sbb
stos
jle
xor
jg
enter
data16
xor
cmp
leave
adc
pop
das
pop
repz
int1
fstpt
cmp
push
andb
jnp
pop
xchg
in
xor
xchg
mov
mov
sub
inc
addr16
(bad)
fcomps
xor
ret
aam
(bad)
call
js
shrl
movsl
ss
ja
sbb
aam
mov
add
jmp
inc
jle
out
adc
mov
lret
pop
sub
sub
out
rclb
(bad)
cmp
or
ja
cwtl
and
sbb
pop
dec
pop
out
lock
nop
adc
es
idivl
ljmp
jb
jns
push
mov
pop
test
out
push
rcrl
push
sti
mov
inc
push
xchg
mov
daa
mov
fnstenv
jae
sub
dec
andb
sbb
es
or
push
and
jmp
sub
inc
xchg
jmp
movsb
jge
push
or
mov
leave
mov
xchg
mov
push
sbb
and
xor
lods
pop
sbb
and
imul
(bad)
aam
mov
xchg
sahf
in
movsb
inc
xchg
xor
ret
mov
pop
sub
jns
rcrb
inc
sbb
leave
hlt
dec
push
add
decb
fists
int1
(bad)
(bad)
xor
push
imul
mov
jp
jbe
dec
(bad)
mov
ljmp
jb
pop
jnp
stos
push
mov
mov
out
mov
inc
lcall
inc
sbb
flds
mov
enter
push
ret
mov
pop
jp
es
or
mov
add
pop
inc
cmp
sbb
push
jecxz
sub
jle
mov
jp
int
add
sub
or
inc
push
dec
(bad)
ljmp
sarb
negl
cs
(bad)
jmp
xor
jmp
dec
lcall
js
cmc
loope
pop
push
mov
sarb
data16
cmp
cli
pop
repnz
adc
pusha
sub
mov
sbb
sub
cmpsb
shrb
jg
push
jns
sbb
and
sbb
sub
pop
pop
mov
cs
and
(bad)
aam
mov
sub
rclb
mov
mov
movl
pop
mov
sub
mov
cmc
leave
adc
daa
sbb
pusha
jge
inc
es
pop
enter
xchg
jle
movsb
ret
jno
jns
and
jmp
and
xchg
sbb
mov
cltd
bound
lods
and
inc
mov
sbbb
inc
and
aad
outsb
jmp
in
cltd
xchg
dec
repz
push
scas
int1
ret
jp
cmp
cmc
jnp
out
or
or
jle
popa
mov
cwtl
xor
inc
push
jmp
adc
push
aam
mov
movsl
call
mov
outsl
mov
and
ficompl
test
add
imul
add
cmp
sub
sbb
repz
lcall
out
mov
repz
movsb
inc
mov
push
fmull
sbb
imul
sub
hlt
push
mov
xchg
cld
mov
and
loop
or
daa
push
lods
sub
jge
cs
test
inc
add
nop
dec
sbb
(bad)
les
data16
int3
fxch
sahf
add
xor
(bad)
or
sub
jbe
pop
jle
gs
mov
data16
or
loopne
add
push
fdivs
shl
cs
std
lret
mov
mov
aam
xchg
fnsave
inc
loope
push
scas
scas
daa
sbb
inc
outsb
fcomps
inc
inc
or
popa
jb
jns
fcoml
std
idivb
xor
pop
mov
sbb
sbb
adcb
lea
and
jge
cmp
jns
clc
add
(bad)
mov
testb
pop
mov
sub
mov
aas
jne
sub
push
jne
cmp
(bad)
and
repz
std
rcrb
(bad)
rorb
lcall
fsts
xchg
mov
xchg
dec
jno
mov
jb
pop
mov
dec
popf
xor
fisubl
and
or
dec
sbbb
test
cmp
and
pop
or
inc
jno
mov
cmp
sbb
mov
mov
mov
and
mov
clc
(bad)
dec
jp
out
mov
testb
lcall
repz
jg
jl
add
test
insl
sti
notb
xor
enter
pop
add
mov
mov
add
stos
cli
das
aaa
aad
add
stos
adc
out
fisubs
cmp
dec
dec
pop
aad
jns
sub
cmc
and
dec
dec
repnz
xchg
sub
ss
jg
mov
je
cmp
mov
int
das
xor
cmp
pop
shll
adcb
sub
out
mov
enter
jp
push
push
cmp
(bad)
cmpsl
lret
shrb
pop
xchg
sub
dec
sti
shlb
shll
push
sub
ja
mov
out
stos
shll
aas
or
inc
std
xlat
cmpsl
xchg
cmpsb
loopne
dec
fimuls
pop
or
test
rclb
lock
(bad)
mov
pushf
jp
