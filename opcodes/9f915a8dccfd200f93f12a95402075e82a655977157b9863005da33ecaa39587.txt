mov
cmpsb
mov
test
rol
std
js
xchg
std
arpl
push
cld
add
push
aad
shrl
cmpsb
and
jecxz
xor
ret
bound
pop
push
stos
iret
sbb
ret
mov
aam
jmp
add
push
dec
jecxz
rolb
idivb
insb
mov
data16
scas
in
push
push
sbb
xor
repnz
fistps
ficomps
je
fwait
test
xor
mov
inc
push
fcmovu
mov
lea
and
cmp
aaa
test
push
add
fcompl
cltd
push
daa
ret
sbb
call
sub
add
adc
sbb
loope
jnp
shlb
mov
mov
inc
jg
pop
fistpll
adc
shl
les
mov
and
fdivs
add
or
stos
inc
repz
xor
nop
aaa
test
xor
repz
leave
cli
cmp
nop
add
mov
pop
xchg
mov
add
push
cs
push
gs
loopne
jecxz
negl
cmp
enter
in
lds
pushf
aas
sub
lret
sub
cli
fs
pop
jmp
test
sbb
add
mov
mov
ja
push
fwait
ret
in
movsb
fiadds
adc
push
or
jnp
(bad)
xor
cmpsl
mull
sbb
mov
aad
or
fs
xchg
outsb
jae
xacquire
add
sub
enter
loopne
add
inc
xchg
enter
mov
dec
ljmp
pop
mov
out
lods
mov
jo
repz
and
fbld
or
stos
jbe
xchg
fsubrp
rorl
daa
cmpsl
fdivl
push
addr16
jae
and
sahf
mov
jns
xchg
inc
and
or
idiv
arpl
cwtl
mov
pop
or
inc
(bad)
lea
lds
mov
mov
xor
cmp
mov
insb
mov
stos
mov
dec
mov
adc
stos
addr16
popa
movsl
mov
pop
stc
add
std
push
rcl
js
daa
int1
rclb
test
out
es
push
gs
int1
xchg
stos
cmc
mov
nop
test
push
cmpsl
out
sub
(bad)
int1
jge
mov
bound
lret
fimull
test
inc
pop
(bad)
jp
jg
orl
inc
jl
aas
xchg
mov
in
jle
mov
loope
sbb
jg
aad
adc
loope
rcrb
(bad)
loopne
daa
ja
mov
jns
xor
fildll
popa
sub
movl
in
dec
lcall
popa
dec
(bad)
into
inc
fldcw
cmpsl
push
sbb
jne
pop
fidivrs
ss
les
jne
(bad)
(bad)
xor
lods
scas
aam
leave
lods
std
sbb
mov
add
inc
jg
mov
pop
cmovo
sbb
sahf
adc
test
out
xchg
inc
add
scas
es
rcll
jb
ret
jp
inc
mov
insl
sbb
mov
das
and
dec
or
sbb
rol
fstps
mov
aaa
ss
sub
inc
xor
xchg
mov
out
mov
outsl
and
mov
push
push
inc
data16
movnti
ret
rorl
lahf
xchg
cmp
lods
stos
dec
push
aad
push
sub
insl
xchg
pop
repz
stos
lret
push
sbb
push
data16
jbe
lock
xor
xor
inc
movsb
mov
push
repz
fcmovnu
jae
cmp
mov
outsl
int1
int3
push
fisttps
add
xchg
push
js
lds
popa
(bad)
mov
cmpsb
(bad)
jle
cmc
add
and
xchg
imul
mov
ror
scas
fstps
inc
mov
imul
dec
es
and
ja
pop
fisubrs
push
outsl
popf
(bad)
sbb
(bad)
cltd
sahf
int3
mov
dec
dec
adc
fisubl
(bad)
(bad)
mov
daa
mov
mov
shl
jnp
sub
pop
imul
push
ljmp
inc
lret
popa
scas
js
cmp
push
pop
mov
jnp
lds
xor
inc
mov
xor
add
xchg
lds
divl
inc
inc
sbb
and
cld
aas
pushf
repz
movsl
jge
in
dec
jg
repnz
cli
sbb
(bad)
cmpsl
push
sbb
leave
jo
popf
push
mov
loop
fcompl
mov
enter
push
cmp
jg
add
jmp
test
fstl
xchg
clc
jg
cwtl
dec
dec
lret
arpl
shr
ljmp
rclb
loop
xchg
leave
dec
cli
int1
xchg
aam
js
cmp
sub
arpl
nop
notl
cmp
loop
les
dec
pop
js
jnp
shlb
in
(bad)
and
or
adc
mov
inc
adc
lret
cmp
rorb
pop
add
cmp
insl
cmp
mov
insl
insb
test
mov
lret
lret
jmp
jae
shll
movsl
lds
out
inc
pop
(bad)
lea
out
fisubrl
outsb
imul
in
(bad)
inc
aas
mov
mov
insb
jns
dec
inc
js
pop
push
nop
out
and
movsl
push
xor
ror
mov
xchg
(bad)
nop
inc
iret
test
aad
mov
fstpl
in
pusha
cltd
lods
xchg
inc
mov
mov
dec
movsb
popf
jns
adc
inc
addr16
add
mov
adc
negl
and
data16
jle
cli
mov
aas
mov
adc
int
shrl
aad
addr16
not
dec
and
test
xchg
dec
cmp
and
xor
or
jle
pop
shrl
cmp
inc
movups
add
out
sub
xor
dec
rol
mov
cmp
stos
inc
cmp
mov
jecxz
mov
dec
into
lods
mov
sbb
repnz
mov
add
stos
xchg
sub
movsb
cmp
int1
dec
add
dec
outsb
mov
cmpsb
inc
pusha
stc
stos
mov
sub
test
sbb
cs
add
andl
xor
movhps
pop
call
push
mov
cmp
arpl
mov
push
fdivs
cmp
mov
call
dec
stc
jo
pop
xchg
mov
jmp
daa
pop
mov
and
push
adcl
or
sbb
push
fisttpl
data16
xor
inc
adc
add
out
loop
fimuls
mov
inc
in
adcb
in
sbb
pusha
mov
cmp
lds
rcrb
adc
xchg
mov
add
int1
fisttpll
ror
negl
aaa
iret
cmp
dec
xor
ret
and
out
lock
sub
sub
xchg
inc
xor
jmp
inc
aaa
lret
mov
faddl
mov
popa
xor
pop
subl
dec
pop
push
lcall
cli
cmp
xchg
mov
hlt
scas
test
mov
test
adc
out
pop
fwait
movsb
xchg
mov
enter
mov
mov
aad
fnsave
pop
(bad)
sub
fwait
dec
jl
push
or
xchg
aam
rcll
or
outsl
lahf
stc
sub
aas
scas
cmp
cwtl
dec
adc
sbbl
(bad)
xor
arpl
dec
push
cmpsl
sbb
mov
test
cmpsb
jmp
es
adcl
pop
adc
out
mov
outsb
mulb
mov
gs
mov
adc
inc
gs
push
sub
cld
sbb
pmullw
adc
lret
outsb
or
lret
inc
sbb
mov
repnz
pop
test
test
pop
jl
xchg
repnz
inc
ds
sub
sarl
push
repz
hlt
mov
fneni(8087
dec
fcmovb
lcall
aas
es
repz
adc
repz
(bad)
arpl
shrb
push
xchg
jne
cmp
or
cmp
xor
cmp
mull
leave
adc
xchg
loop
adc
sahf
add
adc
out
jl
pop
stos
jg
xorl
insl
jmp
and
std
aad
mov
jg
addr16
aas
or
incb
push
or
pop
and
mov
cld
jle
adc
pop
jbe
dec
pop
mov
cltd
dec
loope
lret
jns
sbb
pop
lock
adc
adc
lret
pop
outsl
cmp
out
sub
cmc
dec
aas
(bad)
xchg
inc
movsl
mov
lret
enter
out
repnz
leave
mov
push
lock
pop
rcl
inc
inc
sbb
or
inc
pusha
