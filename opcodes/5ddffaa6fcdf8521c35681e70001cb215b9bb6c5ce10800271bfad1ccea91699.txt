add
xchg
nop
mov
xor
add
mov
es
sub
add
inc
addl
cmp
jns
repz
aaa
jnp
xchg
aam
roll
repnz
rcll
inc
push
xor
jecxz
hlt
aaa
iret
test
subb
ret
pop
clc
inc
and
mov
outsl
sti
fdivl
int
int1
xchg
cmp
std
jb
outsl
push
inc
aam
jno
xchg
add
inc
jae
cmp
out
popf
push
fwait
aam
add
dec
pusha
out
outsl
sub
test
add
jmp
enter
pop
inc
xchg
psrld
loopne
cli
ljmp
popf
sbb
mov
inc
pop
in
adc
or
sarl
inc
dec
fbstp
pusha
or
cltd
add
int3
adc
push
adc
jbe
jge
scas
stc
jp
and
pop
je
pop
outsl
idivb
sbbb
test
into
xchg
enter
addb
movsl
xor
int3
push
out
mov
ret
insl
ja
mov
mov
nop
push
dec
das
or
and
xor
sbb
test
mov
push
adc
xor
(bad)
jno
mov
inc
in
sub
daa
push
mov
movsb
add
dec
mov
(bad)
aaa
(bad)
pop
cmp
jns
stos
inc
pop
lea
jns
stc
adc
loop
mov
test
jae
mov
int3
pop
movsb
ljmp
out
js
rcrb
imul
sbb
jae
repz
inc
jecxz
enter
dec
xchg
mov
imul
fdiv
and
jne
sub
mov
out
and
adc
xchg
fstl
pop
aas
xchg
jns
dec
aam
mov
fs
adcl
idivb
aam
mov
xchg
add
mov
iret
cmp
testl
or
ja
inc
dec
(bad)
jnp
mov
int
mov
push
jle
push
insb
dec
testb
dec
scas
push
jns
(bad)
popa
in
dec
mov
push
lcall
pop
push
adc
or
push
popa
cmp
movsl
cmpsl
mov
insl
jp
mov
pop
(bad)
aas
xlat
cmc
and
and
dec
xchg
(bad)
cmp
pop
fstps
arpl
fsub
and
(bad)
mov
jmp
push
leave
pusha
mov
stos
(bad)
mov
inc
fisubl
sti
rcl
push
pop
lret
sbb
enter
fwait
xchg
mov
into
and
(bad)
inc
js
lds
(bad)
insl
ror
push
adc
cmpsb
bound
aad
inc
dec
cmpsl
or
inc
or
aam
int1
cld
out
sub
clc
imul
xor
push
push
mov
js
ret
dec
repz
or
and
test
roll
or
in
add
mov
xchg
imul
into
stos
mov
pop
jmp
ficomps
xlat
inc
fisubs
movsl
loope
mov
je
mov
int3
dec
cmp
cld
jne
dec
jno
fstpt
ja
push
xchg
push
or
cmp
sub
lock
(bad)
mov
jmp
arpl
cmp
xor
cmpsb
mov
mov
es
cli
ret
mov
and
daa
outsl
jmp
adc
or
mov
leave
mov
xchg
lret
(bad)
loopne
jns
pop
(bad)
jmp
lahf
arpl
dec
adc
notl
lahf
stos
lret
cltd
testl
add
test
mov
xor
std
leave
ss
pop
loopne
cs
fmull
insb
xlat
or
movsl
and
xlat
pop
cmp
mov
dec
add
pop
sbb
xchg
js
mov
adc
pop
out
pop
sub
aam
(bad)
(bad)
sub
stc
scas
lret
add
pusha
pop
mov
mov
mov
enter
jo
sub
iret
sbb
mov
add
xorb
mov
pop
and
jae
inc
mov
mov
cmp
xchg
test
sbb
jnp
pop
das
stos
sub
in
add
popf
xchg
mov
hlt
push
pop
add
jb
std
push
pushf
lea
in
ficompl
rorb
addr16
cmp
pop
rolb
pop
das
mov
xor
dec
jae
jo
mov
(bad)
bound
aam
xor
mov
xchg
fildl
xor
repnz
cmp
or
insl
add
pop
jns,pn
sub
mov
imul
or
xchg
mov
fisubl
int3
mov
push
mov
test
lock
fsubrl
mov
sbb
out
adc
pop
push
xor
push
add
push
sub
int
shlb
insl
jnp
sub
fs
jmp
mov
xchg
and
push
mov
(bad)
adc
insb
lea
mov
xchg
or
cmpsl
sub
cmc
into
scas
push
sahf
lahf
jmp
testl
xchg
cld
and
pop
lods
xchg
pop
repz
std
push
aam
mov
xchg
dec
mov
mov
mov
lea
inc
add
dec
sub
test
dec
sub
loope
lock
sbb
mov
insb
movsb
cmp
scas
scas
divb
add
add
lea
ljmp
inc
mov
dec
pop
int
pop
push
lods
ja
mov
sbb
(bad)
int
into
mov
sub
cs
mov
pop
aas
push
jmp
lods
popf
dec
xchg
out
jle
jns
out
cmp
cmpsl
(bad)
xchg
out
(bad)
adc
cli
push
cmp
out
jo
js
pop
mov
jg
lret
pop
js
sbb
(bad)
bound
mov
out
rorl
cmp
stos
imul
jg
add
xor
push
add
sub
add
jmp
(bad)
pop
add
loopne
ljmp
mov
dec
rolb
push
pop
sbb
ja
imul
out
adc
imul
mov
xor
mov
(bad)
insb
sub
faddl
fcoms
rclb
(bad)
pop
lods
scas
fldenv
add
cmp
js
addr16
cmp
cmp
ret
cmp
insb
popf
fs
sbb
fstpt
jno
out
sbb
mov
mov
ljmp
fnsave
sub
xchg
addl
frstor
mov
aas
movsl
mov
or
xor
add
imul
push
cmp
dec
xor
adc
push
inc
xchg
mov
adcb
mov
insl
mov
or
clc
ret
lods
loop
xor
notl
pop
cmp
in
xlat
jbe
jmp
pop
jae
jne
(bad)
iret
fildl
cli
shrl
cmp
dec
rcrb
mov
cmp
jne
push
inc
cmpsl
cld
mov
js
das
push
in
adc
and
mov
pop
movsl
int
mov
hlt
lea
mov
pop
mov
mov
mov
xor
ja
fwait
pop
andl
sub
jbe
stos
jle
movsb
mov
pusha
jle
jecxz
push
loope
or
sbb
int1
arpl
xchg
push
sub
leave
jp
push
push
xchg
inc
ficompl
inc
outsl
push
adc
loopne
rcll
cmp
imul
push
fneni(8087
or
out
stos
jae
jg
mov
loopne
push
insl
lahf
mov
out
scas
enter
mov
out
aad
push
jb
fidivrs
push
jae
addr16
enter
rcll
enter
xchg
faddp
(bad)
in
and
adc
out
test
mov
jbe
lahf
mov
movsb
hlt
std
inc
mov
sub
sbb
inc
ss
push
cld
add
rcll
mov
cmp
sbb
sti
arpl
insl
push
gs
mov
movsl
fwait
insl
mov
scas
mov
sbb
mov
jnp
add
scas
sub
outsl
pop
sub
and
xor
inc
lahf
out
aam
imul
and
leave
sbb
daa
sbb
jno
sbb
sub
int3
xor
fwait
int1
xor
pushf
push
sub
mov
mov
jle
dec
lods
into
adc
cmpsl
pop
into
scas
loopne
mov
or
add
test
out
aad
mov
pop
daa
adc
push
pushf
test
pop
ds
xor
out
dec
test
popf
int1
jmp
js
pushf
int1
dec
or
dec
sub
(bad)
and
fiadds
test
inc
add
or
pop
loopne
sbb
aas
push
sub
mov
xor
in
