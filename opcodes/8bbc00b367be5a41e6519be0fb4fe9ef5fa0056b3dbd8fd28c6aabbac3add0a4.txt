xor
xor
add
pop
and
outsb
outsb
(bad)
sub
imul
pop
mov
(bad)
mov
cs
sub
mov
xor
fdivrs
leave
movl
sbb
push
(bad)
int3
in
cmpl
movslq
add
(bad)
(bad)
jns
push
rex.rb
data16
mov
mov
test
je
mov
jg
call
xchg
nop
xor
mov
int
xchg
popf
xor
xor
out
(bad)
cld
cmp
je
xor
xor
sub
nop
mov
mov
pop
movzwl
(bad)
cli
or
add
addl
(bad)
jbe
nop
clc
sbb
test
setne
jmp
adc
jno
cmp
(bad)
insl
mov
(bad)
mov
rex.r
rex
rex.wrx
lock
mov
jns
xchg
ja
(bad)
(bad)
cmp
(bad)
jle
xchg
lea
outsb
lock
add
add
movsl
insl
mov
rex.w
rex.wr
fwait
mov
call
sti
(bad)
cld
xchg
cmp
cmovno
push
push
stos
and
xadd
cmp
jmp
add
xor
cld
adc
jo
jmp
outsl
cmp
je
add
(bad)
mov
lods
clc
lock
rex.w
rex.w
jo
testb
(bad)
cmp
rex.wrx
ret
loopne
cltd
adc
adc
jg
imul
insb
js
scas
jrcxz
add
or
es
(bad)
sti
call
call
xor
call
cmp
(bad)
push
push
(bad)
in
std
sub
(bad)
(bad)
cs
call
data16
jge
mov
jnp
sbb
shl
cmp
call
fstpt
xor
rex.rx
out
or
fisttpl
lock
testl
jo
mov
call
lock
in
negb
mov
adc
push
ret
or
out
pxor
(bad)
out
movq
cmpsb
call
call
int3
add
push
pop
rex.wr
rex.wxb
adc
vucomisd
rex.x
or
leave
mov
mov
sbb
je
cs
pop
sahf
outsl
xchg
jmp
(bad)
scas
xor
js
insl
test
or
(bad)
mov
sub
jbe
jl
or
imul
outsl
mov
xchg
jmp
fistl
lahf
xchg
add
(bad)
and
and
jns
pushf
std
xchg
movabs
(bad)
jmp
sti
sub
call
loop
add
jbe
mov
add
push
sbb
xchg
lret
call
(bad)
ss
out
outsl
int
cld
push
(bad)
(bad)
(bad)
cmp
sbb
cli
(bad)
push
and
sub
pop
outsl
sarb
clc
mov
sbb
mov
mov
mov
jno
call
mov
sub
pop
hlt
cmp
movb
imul
ficompl
(bad)
fisubrs
sbb
push
loopne
push
and
(bad)
scas
xor
(bad)
cmp
sub
je
jrcxz
or
add
sbb
or
jae
add
rex.x
lcall
add
(bad)
push
adc
or
push
(bad)
pushf
(bad)
insl
jb
mov
push
xlat
xchg
xor
lods
xor
(bad)
pop
ret
gs
push
and
ds
(bad)
(bad)
(bad)
xchg
mov
cltd
(bad)
rex.wr
test
rex.rxb
sub
add
(bad)
sbb
push
or
(bad)
out
out
iret
push
xorb
add
js
mov
rex
(bad)
and
xchg
mov
outsb
mov
test
add
rex.wrb
add
add
popf
fwait
imul
cmp
fsubr
(bad)
sbb
push
or
sbb
addb
enter
mov
add
loopne
call
(bad)
in
imul
mov
mov
in
mov
cmpsl
(bad)
xchg
mov
xchg
(bad)
mov
mov
cwtl
test
rex.wr
and
lcall
ffreep
fisubrs
stc
movabs
mul
mov
rorb
mov
pop
xorl
subl
add
jle
and
repz
xor
imul
insl
fneni(8087
test
xchg
sbb
loopne
sbb
pop
cmp
int
movsxd
mov
(bad)
and
and
nop
gs
cld
mov
xchg
mov
imulb
pop
(bad)
xchg
fwait
nop
sub
adc
scas
sti
(bad)
cwtl
xchg
sti
sub
mov
js
mov
rex.wrb
jle
mov
stc
mov
xchg
jnp
xor
scas
es
jns
and
loope
lahf
pop
lret
orl
(bad)
(bad)
movabs
rex.rb
out
lret
sub
ds
(bad)
in
and
rex.wrxb
(bad)
addl
addr32
stos
(bad)
lahf
push
hlt
mov
movabs
out
int3
hlt
int3
add
sub
(bad)
lods
cmp
test
xchg
stc
jge
leave
(bad)
rex
movabs
sub
rex.wx
sbb
loope
mov
cmpl
bnd
sbb
test
lret
(bad)
jb
(bad)
and
sarb
cmp
xchg
rex.wrxb
fwait
add
jmp
jle
jge
xchg
jl
push
add
(bad)
call
jmp
leave
fwait
sub
enter
vpackuswb
jns
rex.wrb
iret
(bad)
(bad)
stos
js
pop
xchg
rex.wrb
rex.w
(bad)
movabs
movsb
movsb
or
pushf
or
and
or
cmp
cld
call
rex.wx
imul
mov
fsub
int
pop
mov
mov
mov
ret
jo
imul
in
(bad)
mov
fmuls
jno,pn
mov
push
iret
cmp
rex.r
fnsave
repnz
adc
movsxd
(bad)
fnstenv
or
add
adc
(bad)
cmp
fists
out
adc
sub
mov
jno
ret
and
ds
je
movsl
pop
ds
pop
rex.x
in
mov
pop
(bad)
sbb
push
lret
in
(bad)
xor
add
out
insl
(bad)
enter
cmp
movsl
and
rex.wxb
xor
sbb
rex.rxb
sbb
jae
cld
sub
jmp
movabs
rex
filds
movsl
jmp
jb,pt
fwait
insl
and
(bad)
(bad)
lea
out
fcoms
movsl
call
push
pop
pop
pop
pop
imul
add
jo
iret
(bad)
ja
add
or
pop
cmp
and
{rex2
xchg
ss
add
add
movl
cmp
jge
rex.rx
ja
cmp
(bad)
push
enter
fidivrs
xor
addr32
xchg
outsb
add
sahf
lock
lods
subl
sub
mov
add
movb
mov
push
jl
rex.wxb
and
fiaddl
in
cmp
xor
xchg
cmpsl
mov
ret
movsxd
xchg
xchg
add
adc
lret
fildl
push
xchg
popf
sbb
scas
loope
lret
sub
xor
lret
mov
(bad)
enter
or
(bad)
sub
in
lret
popf
sub
jae
xor
ss
adc
fisubrl
mov
or
rex.rxb
ds
mov
test
jne
(bad)
(bad)
cmpsb
lea
fstps
fstl
insb
(bad)
movabs
js
(bad)
cmp
jmp
or
testl
movb
cmp
(bad)
sarl
(bad)
(bad)
mov
xchg
add
mov
cmp
fsts
mov
and
out
adc
cmp
add
test
int
cmp
(bad)
movsl
stc
add
sub
cmc
(bad)
in
int1
movabs
jrcxz
lea
cmp
add
{rex2
insl
sub
std
xchg
cmp
es
movabs
lods
sub
vpmaxuq
(bad)
(bad)
rex.wrx
mov
jne
xchg
ja
jmp
ret
clc
rex.wrxb
enter
cmp
mov
jo
(bad)
rex.wrb
movabs
mov
mov
movabs
cmp
movabs
lea
sub
pushf
stos
fcomps
in
js
movl
rex.wrxb
cs
jrcxz
lock
sub
in
pavgb
and
leave
sub
rex.rb
repz
fmull
(bad)
cmp
fiadds
ret
jns
ficoms
mov
add
sbb
add
mov
add
test
sti
movabs
(bad)
clc
mov
sbb
add
leave
sub
pushf
ds
mov
(bad)
and
nop
adc
(bad)
or
rex.wxb
(bad)
xor
rex
enter
cs
cltd
add
sbb
mov
out
shrb
repz
test
sub
imul
cld
and
(bad)
add
xor
mov
(bad)
add
hlt
xor
in
test
rex.rx
rex.rx
cs
rex.rb
xor
clc
shr
pop
in
sub
movsl
and
sbb
lahf
sti
es
adc
or
xlat
cmc
insl
jmp
cltd
fdivrl
and
test
jle
leave
leave
in
jnp
hlt
xor
push
andb
in
(bad)
(bad)
push
sub
pop
(bad)
